---
title: Pursuing faster time-to-merge for wider community contributions
author: Nick Veenhof
author_gitlab: nick_vh
author_twitter: Nick_vh
categories: open source
description: "How introducing more explicit contribution stages lowered the time it takes to merge a community contribution."
tags: code review, contributors, open source
---

One of GitLab's core strategies is to [build on our open core
strength](/company/strategy/#2-build-on-our-open-core-strength). We believe that building a
strong community of contributors is key to the long-term success of GitLab. We believe in a [dual-flywheel
strategy](/company/strategy/#dual-flywheels) that focuses on both product contributions from
within our GitLab engineering team and community contributions. 

Our goal is to grow to 1000 contributors per month. The saying is that "All roads lead to Rome," but of course not all of those roads are the most efficient ways to get there. To succeed, contributing to GitLab must be a rewarding and incentivizing experience that
motivates contributors to come back. One of the strategic choices we made in the [contributor
success](https://about.gitlab.com/handbook/engineering/quality/contributor-success/) team is the route of being as
responsive and clear as we can about the next steps, using processes and automation. 

## Problem statement

So where do we start? On average GitLab has over [550 open merge
requests](https://gitlab.com/groups/gitlab-org/-/merge_requests?scope=all&state=opened&label_name[]=Community%20contribution).
We wanted to focus on the _ready enough_ problem. When is an MR ready for review? And when is an MR still in development? In
both cases collaboration is required, but having a formal handoff ‚Äî meaning this contribution is ready for a review ‚Äî helps in
understanding who is blocked from moving forward. Before a merge request can find its way into GitLab, it needs to get a
review from at least one maintainer.

How do we know when to ask specific maintainers of our product areas to put their focus on reviewing these merge requests? When is a merge request _ready enough_ for a thorough review? What does _ready enough_ even mean?

Some OSS communities use crowdsourced reviews for contributions to make sure the project maintainers don‚Äôt need to take on everything by themselves. For example, in the Drupal community there is the concept of [Reviewed and Tested by the Community](https://www.drupal.org/community/contributor-guide/task/triage-the-drupal-core-rtbc-queue). At GitLab we have MR coaches and community help to make sure everything is as ready as can be before involving the maintainers.

The GitLab bot and our MR coaches try to assist the wider community contributors on their way. We also had a ping-pong label that tried to signify if a community contributor had reacted and it was ‚Äòping ponged üèì‚Äô back to the GitLab team members. This pingpong label didn‚Äôt take the context into account. It was a great iterative and [boring solution](/handbook/values/#boring-solutions) to know who was up next (the author or the reviewer). But it had a lot of false-positives and caused confusion to both the maintainers and the community contributors.

So where do we go from here? How do we get a better grasp on this _ready enough_ problem? Let‚Äôs start by asking for help from our recommended reading list, [High-Output Management](/handbook/leadership/high-output-management/). Author Andrew S. Grove states: ‚ÄúA very important way to increase productivity is to arrange the work flow inside our black box so that it will be characterized by high output per activity, which is to say high-leverage activities.‚Äù

## Introducing workflow labels

For a while, GitLab team members were using workflow labels to signify the state of a merge request. It wasn‚Äôt always used across all teams, but they were available. More specifically we‚Äôre looking at the following labels:

- `workflow::ready for review`
- `workflow::in dev`
- `workflow::blocked`

Each wider community contributor is now [able to change these labels themselves](https://docs.gitlab.com/ee/development/contributing/#contribution-flow). By using `@gitlab-bot ready`, it sets the state to `workflow::ready for review` and assigns a reviewer. The reviewer is able to set it back to `workflow::in dev` if there are still items to be addressed. Other wider community members can also leave comments or suggestions for improvement, and then [set the label](https://about.gitlab.com/handbook/engineering/quality/triage-operations/#reactive-label-command) back to `workflow::in dev`, or set other labels to help triage these merge requests.

## What have we learned so far?

We started using this system over two months ago. We now know that around 20% of MRs on average are in a "ready for review"
state. Those contributors are blocked and waiting for an answer to either continue to improve the merge request or get
it merged if there are no more comments left. We also noticed that some merge requests were not getting a lot of
attention. We did an async retrospective and feedback session with the GitLab team members and the wider community in order to find an answer on how we can
[improve the time it takes before a review is made](https://gitlab.com/gitlab-com/www-gitlab-com/-/issues/13718) for
contributions that were ready for a review. We‚Äôre still processing that feedback, but are looking to try some of these
suggestions, learn from them, and iterate. Even though GitLab cannot promise timely reviews, we can certainly try to
build in mechanisms, and understand where we see limits, to navigate towards better processes. When we started out, we
had a median time of 17 days that an MR was in the ready for review state. Today that median time has been reduced to five days!

The median Open Community MR Age (OCMA) has also dropped from 139 days in April to 78 days in August. Maybe it is a
coincidence that we reached an all-time high of 126 contributors in August? Either way, all of the steps allowed our amazing wider
community contributors to get 440 merge requests merged in a single month! I‚Äôm certain this change contributed, among other
changes and initiatives, to that record. We will keep learning as we progress. It certainly allowed us to take a peek
into our little black box.

## What‚Äôs next?

Next up is to continue our iterations and move further towards automation. Right now it is up to the reviewer to set the
status back to `workflow::in dev` whenever there is something left to address. We notice that this is not always changed
back when it‚Äôs actually needed. It is also causing false-positives with reviewers and our wider community members.
The Contributor Success team is looking into how this can be automated. If you‚Äôd like to help, the automation happens in
the [Triage Ops project](https://gitlab.com/gitlab-org/quality/triage-ops/) and the Contributor Success [issue
queue](https://gitlab.com/gitlab-com/quality/contributor-success/-/issues) is open for everyone!

We‚Äôre also looking into a new program called [Leading
Organizations](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/110700) which rewards recurring
contributors, and their organizations, with a review time objective of four business days. This would lead us to even
shorter review cycle times and give those organizations that contribute to GitLab a competitive advantage to stay
leaders in their domain. The faster we can innovate together, the faster our dual flywheel will spin. Together we go to
infinity and beyond. Together we can build software fast.




