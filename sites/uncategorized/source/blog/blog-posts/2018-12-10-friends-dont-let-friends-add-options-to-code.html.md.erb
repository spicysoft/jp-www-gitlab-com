---
title: "Friends don't let friends add options to code"
author: Suri Patel
author_gitlab: suripatel
author_twitter: gitlab
categories: engineering
image_title: '/images/blogimages/options.jpg'
description: "Creating optional features burdens users and applications – here's how we avoid adding options."
tags: inside GitLab, UX, open source, workflow
twitter_text: "How we solve problems without adding options"
postType: content marketing
---

Sometimes, when trying to make it easier to work in an application, our instinct is to add
optional features that users can enable if their situations require a specific functionality.
Our intentions may be good, but these actions can actually cause _more_ problems, since we invite users
 to second-guess their choices by adding extra steps into the user experience.

## The disadvantages of a [choose your own adventure](https://en.wikipedia.org/wiki/Choose_Your_Own_Adventure) model

One of the most celebrated aspects of [open source](/solutions/open-source/)
is the freedom that allows developers to brighten a user’s day by adding an
optional feature that may not be for everyone, but allows a small portion of users
to engage with a project in a specific way. While it may seem like a great idea
to cater to individual needs, there are several disadvantages to making something
an option.

### It creates more work for developers

Creating extra options means more work for both frontend and backend teams.
These features add additional code, tests, and documentation for each setting,
and the various states alter the UI. Adding options hurts you in every step of
the development process.

### It places a burden on the user to choose

When we solve problems by including options, we force a user to think about the
function and consider its purpose and drawbacks, placing a burden on them to
control how they use an application. A user hesitates and has to make a decision
about whether this is something that should be enabled. After all, if an option
significantly enhanced the user experience, then wouldn’t it have been automatically
integrated?

### It makes future functionality more difficult to implement

There's also the long-term impact of additional options. Just one extra option can lead to one of two
paths, which might influence other parts of an application. So, every
time we add an option, the number of states of the application doubles. That's
exponential growth and it adds up quickly, making it harder to diagnose errors. Multiple
options can lead to the creation of states of which we’re unaware, so
it’s harder for the user to understand how an application should behave, because
they don't know whether errors are due to an option or not. And, if it is an
option causing the error, _which_ option is the problem?

## How we avoid adding options: Bask in the glow of iteration

So, how do you know if a feature should be optional or not? At GitLab, we ship
the first [iteration](/handbook/values/#iteration) and keep delivering based on
user feedback. Some of the features that we anticipated may never roll out,
because users didn’t request them. Iteration allows us to reduce the scope of
development and avoid including features that aren’t popular or useable.

 <%= partial "includes/blog/content-newsletter-cta", locals: { variant: "b" } %>

Whenever users need something new, try to create a solution that's acceptable
for the most number of people. Rely on your development and operations teams to
provide feedback and ask them to relate to the end user. Conducting
[UX research](/handbook/product/ux/ux-research/#ux-research) with your users
also helps identify pain points and needs.

Teams are continually constrained by development capacity, and adding options to
applications can absorb previous time and effort. We suggest shipping your
application without an option and waiting to see whether people request it or
make a
[feature proposal](https://gitlab.com/gitlab-org/gitlab-ce/issues?label_name%5B%5D=feature+proposal)
for it. In the end, our role is to solve users’ problems, and our goal is to
identify the underlying cause of a challenge and fix it in a way that doesn't
need an option.

[Cover image](https://unsplash.com/photos/pKeF6Tt3c08) by [Brendan Church](https://unsplash.com/@bdchu614) on Unsplash
{: .note}
