---
title: The GitLab guide to modern software testing
author: Valerie Silverthorne
author_gitlab: vsilverthorne
author_twitter: ValSilverthorne
categories: devops platform
tags: testing, DevOps, performance
description: If test is your DevOps team's Public Enemy Number One, it's time to
  rethink your strategy. Here's what you need to know about modern software
  testing.
image_title: /images/blogimages/test-automation-devops.jpg
---
What’s the trickiest part of DevOps? It’s software testing, hands down. Year after year, respondents to our [annual surveys](/developer-survey/) have called out testing as the most likely reason for release delays. And that’s not all they said: “Testing takes too long,” “There are too many tests,” “We need to do more testing,” “We need more automated testing but don’t have time,” "Testing happens too late…” etc.

Clearly something _this_ fraught needs all the help, so here is our best advice to get testing “just right” in any modern DevOps practice. 

## Use the right metrics

All of the testing in the world doesn’t matter if a DevOps team is measuring the wrong things. At GitLab we use industry standard metrics, but we look at them a bit differently. When it comes to S1 and S2 bugs we don’t count the time to close but rather the age of the bugs that remain open. Our reasoning? We want to look forward, but we also don’t want to [incentivize closing only newer bugs](/blog/2022/04/05/gitlab-top-devops-tooling-metrics-and-targets/). So it’s important to make sure DevOps teams are looking at the right metrics and with shared goals in mind.

## Forget flaky

Tests are noisy, and they can be flaky, setting off alarms and disrupting developer flow, often for no reason. That’s at the heart of developer frustration with testing, and one of the biggest problems DevOps teams need to solve. GitLab’s VP of quality, [Mek Stittri](/company/team/#meks), suggests re-thinking how automated tests are created. Tests need to be validating the right things, but that must include looking at how all of the code components work together and not just at pieces of code. Finally, it doesn’t hurt to [develop a manual testing mindset](/blog/2019/08/30/software-test-at-gitlab/).

## Make it modern

In fact, a manual testing mindset, where test designers create tests that actually mimic what real users do, is a key underpinning of modern software testing in DevOps. Testers need to consider getting certified, embracing new technologies like AI, and perhaps most importantly be [evangelists for quality](/blog/2022/07/05/how-to-leverage-modern-software-testing-skills-in-devops/) on a DevOps team.

## Make automation work harder

Software testing may be the most annoying DevOps step, but there’s no doubt that automating the process makes everything work more smoothly. Teams with test automation [have fewer complaints about release delays](/blog/2021/09/30/want-faster-releases-your-answer-lies-in-automated-software-testing/). And teams that have taken it up a notch and added AI/ML into their test automation process are even more upbeat about testing. After all, bots [don’t need to take a lunch break or a vacation](/blog/2021/05/06/the-software-testing-life-cycle-in-2021-a-more-upbeat-outlook/). Finally, if automation is well-thought out, QA and developers can [actually work together to get code out the door](/blog/2020/05/29/what-blocks-faster-code-release/).

## Test for everything

For all the developer finger-pointing around software testing, it’s also clear from our surveys that _more_ testing – of everything – has to happen. When considering how to modernize a software testing strategy, don’t forget that “nice to haves” like [accessibility testing](/blog/2020/03/04/introducing-accessibility-testing-in-gitlab/) aren’t actually optional but critical for success.

And also don’t overlook the potential of newer test techniques like [fuzzing](/blog/2020/12/10/why-continuous-fuzzing/) which can work with [Go](/blog/2020/12/03/how-to-fuzz-go/), [Rust](/blog/2020/12/03/how-to-fuzz-rust-code/) and other languages and take testing into places other methodologies cannot.

## The bottom line

Testing doesn’t have to be the enemy of speedy releases or the object of so much frustration. Start fresh with a modern software testing approach and and make it easy for teams to get the most out of QA.
