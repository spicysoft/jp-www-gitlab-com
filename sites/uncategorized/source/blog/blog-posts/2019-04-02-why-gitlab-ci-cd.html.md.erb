---
title: "Why GitLab CI/CD?"
author: Chrissie Buchanan
author_gitlab: cbuchanan
author_twitter: gitlab
categories: company
image_title: '/images/blogimages/ci-cd-competitive-campaign-blog-cover.png'
description: "With GitLab’s out-of-the-box CI/CD, you can spend less time maintaining and more time creating."
tags: CI/CD, DevOps, workflow
cta_button_text: 'Explore GitLab CI/CD'
cta_button_link: '/stages-devops-lifecycle/continuous-integration/'
twitter_text: "See why GitLab CI/CD is rated # 1 and how we compare to other tools"
featured: yes
postType: content marketing
merch_banner: merch_two
merch_sidebar: merch_two
---
DevOps speed is a competitive advantage for businesses. According to DORA, [companies that deploy more frequently perform better in the market](https://cloudplatformonline.com/2018-state-of-devops.html). Everyone wants to be able to do their jobs better and deploy more frequently, but as the organization grows, speed bumps keep getting in the way:

*   **Too many integration points** – Connecting [CI/CD](/topics/ci-cd/) to all of the different tools in a [DevOps toolchain](/topics/devops/) is confusing and keeps adding more steps and more points of failure to the process.
*   **Brittle tools** – We're spending more time maintaining and updating these tools than actually creating new features.
*   **Slow modernization** – We want to leverage [microservices](/topics/microservices/) and [cloud native](/topics/cloud-native/) development, but we spend too much time putting out fires.

With these speed bumps come complicated workflows, lack of pipeline visibility, and confusion about processes. With the Total Cost of Ownership (TCO) going up as more resources go to maintenance, teams can't afford to innovate. As organizations scale, these complexities only get worse.

That sounds exhausting, doesn't it?

## Current CI/CD tools

At GitLab, we love transparency so much we made it [one of our core values](/handbook/values/#transparency). It's also why [we list all other DevOps tools on our website](/devops-tools/) (no, really). We think open and direct communication is the fastest way to get the feedback you need to make the right decisions. For DevOps teams, the right tools should make things easier but we've found that _more_ doesn't always mean _better_.

### High maintenance

Integrating CI/CD tools with the rest of your toolchain can get complicated – managing and updating these tools regularly isn't any easier. Many teams rely on tool experts just to keep everything running smoothly.

### Lack of cloud native compatibility

As more organizations look to leverage microservices and [cloud native](/cloud-native/) development, they'll need CI/CD tools that support modern architecture. With some CI/CD platforms, teams still need additional plugins to connect to Kubernetes or a container registry. Teams using legacy CI/CD tools will need to upgrade in order to gain those cloud native capabilities.

### Toolchain complexity

Toolchains sometimes have too much in common with [Rube Goldberg devices](https://www.youtube.com/watch?v=qybUFnY7Y8w). Adding on more applications, more platforms, and more handoffs increases complexity that slows down teams. Add to that the maintenance, plugin, and upgrade requirements to manage these separate tools, and productivity gets harder.

## Why teams love GitLab CI/CD



CI/CD tools should make engineers' lives easier by giving them greater visibility into their pipelines, without burdening them with complicated integrations and plugin maintenance. GitLab CI/CD is designed to be simple so teams can start using it right away.

### Easy to use

GitLab uses a YAML configuration that any developer can understand so you can build pipelines faster.

### Cloud native CI/CD

With its built-in container registry and Kubernetes integration, GitLab supports cloud native development.

### Simple architecture

One integrated application with one set of permissions.

### Fast and efficient

With autoscaling runners, developers no longer have to wait on builds, and VMs spin up or down automatically to process queues at a lower cost.

### Everything in one place

GitLab CI/CD is already built into the same application that contains source code management, planning, monitoring, etc.

As a single application for the entire DevOps lifecycle, everything is in one conversation and visible across teams. With GitLab's out-of-the-box CI/CD, you can spend less time maintaining and more time creating. It's CI/CD that _just works_.

We invite you to explore GitLab CI/CD for yourself, and see why we were rated #1 in the Forrester CI Wave™.

[Explore GitLab CI/CD](/stages-devops-lifecycle/continuous-integration/)
{: .alert .alert-gitlab-purple.text-center}

<%= partial "includes/blog/blog-merch-banner" %>

