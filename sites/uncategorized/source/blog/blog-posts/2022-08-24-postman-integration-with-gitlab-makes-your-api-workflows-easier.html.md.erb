---
title: Postman integration with GitLab makes your API workflows easier
author: Andy Rogers
categories: engineering
tags: DevOps, workflow, integrations
description: Learn how to use the git integration to link APIs in Postman to GitLab cloud repos.
image_title: /images/blogimages/introducing-continuous-workflows.jpg
twitter_text: Postman Integration with GitLab makes your API workflows easier
---

APIs are more than just an interface. From a development lifecycle perspective, an API includes source code, definition files, tests, performance measurements, documentation, security audits, deployments, and feedback from API consumers. All of these elements are required for a successful API implementation. The [Postman API Platform](https://blog.postman.com/new-postman-api-platform-redefining-api-management-for-api-first-world/) is designed to help teams collaborate seamlessly by providing tools for the entire API lifecycle. We understand that a fundamental part of the API lifecycle includes [developer workflows](https://blog.postman.com/the-reimagined-api-first-workflow-for-developers/) centered around code and source control. So, in partnership with GitLab, we created a git integration that allows users to link APIs in Postman to their GitLab cloud repos (on-prem versions of GitLab are only supported on [Postman Enterprise](https://www.postman.com/pricing/)).


![Alt text for your image](/images/blogimages/postman1.png){: .shadow}

## 4 key benefits for better collaboration

The launch of this integration earlier in the year provides four key benefits that empower teams to work faster and better together:

1. It introduces the concept of version control into Postman. Users are now able to manage and sync branches, releases, versions, and tags for their APIs in GitLab and Postman. 


![Alt text for your image](/images/blogimages/postman2.png){: .shadow}


2. Elements created in Postman can be pushed to a user’s GitLab repository, where the schema and collections can coexist alongside the source code. Likewise, branching workflows that your team might already be using can now be followed in Postman; external changes to code and API definitions are reviewable and can be merged back to Postman.


![Alt text for your image](/images/blogimages/postman3.png){: .shadow}

3. This integration enables developers to think about API elements as the API itself, instead of treating code, API definitions, documentation, collections, tests, monitors, etc. as independent entities. All of these constitute the API. Moreover, this allows a higher-level view of the entire API, rather than just the source code — a critical requirement for any organization who wants to build a structured and robust API program.


![Alt text for your image](/images/blogimages/postman4.png){: .shadow}


4. The Postman-GitLab integration greatly minimizes the likelihood that downstream teams and API consumers will interact with outdated (or even deprecated) APIs or API elements. Users don’t have to spend time deciphering what API, collection, or documentation is current, since they can see what version they are working with all the way back to the code. In Postman, users also have direct access to real-time collaborative tools such as commenting and forking/merging to maintain synchronization between downstream API consumption and the source of truth.

![Alt text for your image](/images/blogimages/postman5.png){: .shadow}

## An integration for the API-first world

Our partnership with GitLab supports our commitment to building Postman as the platform for the [API-first world](https://api-first-world.com/). With integrations like this, [API-first companies](https://blog.postman.com/what-is-an-api-first-company/) are now more productive, can deliver higher-quality products, and are able to build stronger ecosystems of developers, partners, and consumers. 

To get started with the GitLab integration, check out [our guide](https://blog.postman.com/the-reimagined-api-first-workflow-for-developers/) and our how-to video for GitLab integration config:

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/BL8DFOPncMc" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->


