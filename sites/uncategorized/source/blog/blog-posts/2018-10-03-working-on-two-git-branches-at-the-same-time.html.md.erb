---
title: "How to work on two Git branches at the same time"
author: William Chia
author_gitlab: williamchia
author_twitter: thewilliamchia
categories: engineering
image_title: '/images/blogimages/working-on-two-git-branches-at-the-same-time.jpg'
description: "Watch the demo on how using the GitLab Web IDE and your local dev environment to work on two branches at once can help save time."
tags: demo, features, git, inside GitLab, workflow
ee_cta: false #
twitter_text: "Work on two Git branches at the same time using @gitlab Web IDE"
postType: content marketing
---

I was recently using both my local development environment and the GitLab [Web IDE](/blog/2018/06/15/introducing-gitlab-s-integrated-development-environment/), and found a really nice workflow for working with two Git branches simultaneously.

 <%= partial "includes/blog/content-newsletter-cta", locals: { variant: "b" } %>

### The problem

In this scenario, you’re doing development work on one branch, in one part of your codebase, and then likely documenting your process in another place. I really don’t want all of this in one merge request, because I don’t want to delay shipping the development work if [the docs](https://docs.gitlab.com) aren’t done. I want to be able to get it live so that others can see it, give feedback on each individual component, and iterate on it. At the same time, I don’t want to delay too long on documenting the process, because I want the docs to be as accurate and reproducible as possible.

### The fix

While doing my development work in my local development environment, I created another merge request for the documentation using the [Web IDE](https://docs.gitlab.com/ee/user/project/web_ide/), essentially working on two different Git branches at the same time, using two different editors.

In my quick example below, you can see a merge request to add [Jenkins](/devops-tools/jenkins-vs-gitlab.html) content to our [DevOps tools](/competition/) page. I’ve checked out this branch locally, and I have it open in my Atom editor. I’ve been doing some work by updating `features.yml`, as well as a Markdown file and a Haml file. All of these changes are related to one merge request. While I’m committing changes locally to the comparison page, I’m documenting each step in my Web IDE in a separate tab, to make sure my instructions are precise, helpful, and completed in real time.

### Watch the demo

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/uV3ycYnwhBc" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

You can see what we've got planned for the Web IDE in 2019 in our post about [our product vision for DevOps Create](/blog/2018/09/21/create-vision/).

What are other ways the Web IDE has come in handy for you? Let us know by tweeting us [@gitlab](https://twitter.com/gitlab)!


Cover [photo](https://unsplash.com/photos/3y1zF4hIPCg) by [Hans-Peter Gauster](https://unsplash.com/photos/3y1zF4hIPCg) on Unsplash
{: .note}
