---
title: "Speed up secure software delivery with DevSecOps"
author: Vanessa Wegner
author_gitlab: vwegner
author_twitter: _vanessaptri
categories: insights
image_title: '/images/blogimages/just-commit-blog-cover.png'
description: "It’s time to shift left: Embed security into your DevOps workflow to increase speed, quality, and efficiency in the SDLC."
tags: CI/CD, DevOps, security
cta_button_text: 'Integrate security and development with GitLab'
cta_button_link: '/solutions/dev-sec-ops/'
postType: content marketing
---

DevOps is a revolutionary step forward in efficient software delivery, but teams
often face painful delays when releases are put through security testing.
Security is critical for every digital entity, but often adds tension to a
process that is already under pressure for speed and cost efficiency. For many,
software delivery resembles an assembly-line style of work where employees have
to constantly stop and start their work on different projects, breaking
their mental flow and straining relationships between teams.

To illustrate, let’s trade software for [Ford’s Model Ts](https://www.history.com/this-day-in-history/fords-assembly-line-starts-rolling)
for a minute. Software development closely resembles development of those first cars
manufactured by Ford: Each worker makes a contribution and hands off to the
next, and then the security pros take it for a test drive (or look for
vulnerabilities). But if the car doesn’t function properly, it’s sent back to
the beginning of the line to the developers who have already begun working on
a different vehicle.

Back to software. How can teams solve this back-and-forth without foregoing
quality? They must embed security into the development workflow.

## Integrate and automate end-to-end security

When security is embedded into the developer workflow, developers can respond
to vulnerability alerts _while_ they’re writing code. Within the developer's
pipeline report in GitLab, individual vulnerabilities are presented to the developer for
review. Alerts could include unsafe code, dangerous attributes, and other
vulnerabilities that could put your application at risk. The developer is able
to look into each alert, determine whether it needs to be addressed or can be
dismissed, and then address each alert while moving through the
development process. In the [Security Group Dashboard](https://docs.gitlab.com/ee/user/application_security/security_dashboard/), the security analyst is able to see which alerts the developer was unable to resolve as well as what
was dismissed, making sure no vulnerabilities slip through the cracks.

### Gain speed and efficiency with DevSecOps

Embedded security checks allow developers to pass off a streamlined workflow to
their security peers. Security then focuses on the most important risks and
threats with the typical mountain of checks reduced to a much shorter list.
Shortened test times lead to much faster releases: Wag! (a dog-walking app)
[brought their release time down from 40 minutes to just six.](/blog/2019/01/16/wag-labs-blog-post/)

Standard release processes place an unnecessary burden on your teams when a
limited number of engineers can work on them and project handoff actually
impedes completion. The ability to work concurrently within the same environment
represents much more than a shift left: It redefines the entire DevOps
lifecycle, enabling greater efficiency and collaboration on a single source
of truth.

### How it works

[Static application security testing (SAST)](https://docs.gitlab.com/ee/user/application_security/sast/)
brings vulnerabilities to developers so they can review gaps in their code
_within_ their own working environment before passing the project off to
security. This integration mitigates the friction that often stands between dev
and security, allowing security to graduate from roadblock status to critical
workflow component. The collaborative nature of [SAST within tools like GitLab](https://docs.gitlab.com/ee/user/application_security/sast/)
allows different teams to access the project at any time, eliminating any
cumbersome linear processes and breaking down silos within the larger
organization.

## Accelerate delivery and build productivity by testing closer to remediation

Shifting left might ring alarm bells for some, but don’t worry – developers
won’t be solving _every_ security problem. The idea is to alert your dev team to
the code fixes that would be easiest for them to solve, rather than making the
security team do the digging. This switch will streamline the overall workflow,
allowing the security team to focus on more critical risks and reducing handoff
between security and dev.

[DevSecOps](/topics/devsecops/) integrates security into your CI/CD processes, allowing your teams to
work quickly, collaborate efficiently, and produce secure and
quality software at every release.

Are you ready to build security into your DevOps practices? [Just commit.](https://about.gitlab.com/solutions/dev-sec-ops/)
{: .alert .alert-gitlab-purple .text-center}
