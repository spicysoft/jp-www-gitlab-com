---
title: "Improving DevOps and software development with communication and collaboration"
window_title: "How Collaboration and Communication Improve DevOps Success | GitLab"
author: Sara Kassabian
author_gitlab: skassabian
author_twitter: sarakassabian
categories: insights
image_title: '/images/blogimages/chatbubble.jpg'
description: "The most important skills for a DevOps pro? Collaboration and communication. We share some of our best blogs, articles, and videos to help you work better, together."
tags: collaboration, DevOps
ee_cta: false # required only if you do not want to display the EE-trial banner
install_cta: false # required only if you do not want to display the 'Install GitLab' banner
twitter_text: "Don’t be fooled into thinking collaboration and communication are DevOps soft skills. Bookmark this collection of best practices from @GitLab" # optional;  If no text is provided it will use post's title.
featured: no
postType: content marketing
related_posts:
  - "/blog/2019/08/20/agile-pairing-sessions/"
  - "/blog/2019/12/19/future-merge-requests-realtime-collab/"
  - "/blog/2020/10/30/future-proof-your-developer-career/"
merch_banner: merch_seven
---

We believe that the best software developers, companies, and products are those that embrace collaboration and transparency in communication, which is why we’ve compiled some of our best blog posts, articles, and videos about the topic in this blog collection.

But first, has your engineering team adopted a [DevOps](/topics/devops/) strategy? [Start here if you need help communicating why DevOps is the best approach](/blog/2020/09/24/devops-stakeholder-buyin/) to stakeholders outside the engineering team.

## What is DevOps collaboration?

Collaboration is as important to DevOps as automation and nearly as hard to achieve. Software development was traditionally split into very different functions that didn’t work together; the advent of DevOps, bringing dev and ops together, was designed to change all of that. 

## Why collaboration in software development matters

We unpack three key reasons why collaboration is an essential skill for software developers.

### 1. Your future as a software developer is bright if you embrace collaboration

While some might consider teamwork and communication to be soft skills, the results of our [2020 DevSecOps](/developer-survey/) survey reveal a consensus among developers, security pros, ops team members, and testers that collaboration and communication are the most important skills for a DevOps professional.

"You can’t have one brain that knows it all," explains [Darwin Sanoy](/company/team/#DarwinJS), senior solutions architect, Americas, at GitLab. "You need communication and collaboration to work together." Read more to learn about how to [brush up on soft skills to future-proof your DevOps career](/blog/2020/10/30/future-proof-your-developer-career/) .

### 2. The best way to practice collaborative software development? In open source communities

GitLab is an open-core product with [open source and source-available code](/handbook/marketing/strategic-marketing/tiers/#open-source-vs-source-available). This means that community contributors can push changes to our open source codebase, and can view our proprietary, source-available code. Anyone who has been a part of an open source community can tell you that they’re very global, so you could be living in Mexico and [collaborating on an MR with someone in Poland](/blog/2020/10/29/gitlab-hero-devops-platform/). Global collaboration without needing a passport is enriching and unique, but sometimes cultural differences can give way to miscommunication. The best way to embrace working in open source communities is to practice mindful communication and always [assume positive intent](/handbook/values/#assume-positive-intent). Most of the time, conflict is the result of misunderstanding, not malevolence.

Earlier this year at [GitLab Commit Virtual](https://www.youtube.com/playlist?list=PLFGfElNsQthYQaTiUPQcu4O0O20WHZksz), we shared some communication hacks to help you seem approachable and invite dialog while contributing to open source communities. Watch the video below to learn all about it.

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube-nocookie.com/embed/XTBWX-evVEA" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

And while open source and security might seem like a strange coupling, we found that community contributions helped fortify our GitLab Secure product. [Read the blog post](/blog/2020/10/22/integrating-with-gitlab-secure/) to learn more about how inviting contributions from our open source community helped users extend our product to suit their needs.

### 3. Why can’t dev and sec be friends?

Teamwork doesn’t always come easily, particularly when you’re on opposite sides of the DevOps lifecycle. While at GitLab, dev and sec teams do work well together, this isn’t the case on every engineering team.

[Brendan O’Leary](/company/team/#brendan), senior developer evangelist at GitLab, and [Ethan Strike](/company/team/#estrike), security manager for Application Security, [talk candidly about their respective objectives and how it’s better to integrate security into the development process](/blog/2020/08/13/developer-security-divide/), as opposed to tacking it onto the end.

## Best practices for developers

We explain why code review and pair programming are two methods that help engineering teams ship more stable code.

### Code reviews for all

Fast feedback is one of the pillars of collaborative software development practices, and code reviews are an essential component. Whether you’ve been coding for 10 years or 10 weeks, having more than one person review your work is critical for catching errors and shipping stable code. But that doesn’t mean code reviews are simple. [Read our blog post on the challenges of code review](/blog/2020/07/03/challenges-of-code-reviews/) to learn tips on how to overcome the hurdles, and [watch the demo on how to use GitLab for code review](https://page.gitlab.com/resources-demo-scm.html). [Phil Hughes](/company/team/#iamphill), staff frontend engineer for the Create: Code Review team summarizes [four tips to make code review more efficient and less painful](/blog/2020/09/08/efficient-code-review-tips/). But all in all, we believe that despite the challenges of code review, it’s absolutely worth any hassle.

While you’re at it, [check out our blog post where we share some of our ideas about the future of merge requests and code review](/blog/2019/12/19/future-merge-requests-realtime-collab/) with GitLab. Not all of the ideas will necessarily be implemented, but it will give you some insight as to our vision moving forward.

### Use the buddy system

Pair programming is basically code review in real time, and it is also one of the pillars of [Agile software development](/solutions/agile-delivery/). Typically it is done with two programmers at the same workstation, but when you’re on a a globally distributed team like we are at GitLab, that workstation exists in the virtual realm instead of IRL. In pair programming, one programmer creates the code (the driver) while the other person reviews the code (the navigator).

>"Programming is fairly abstract. When you have to explain a concept verbally, it often makes you realize you're missing pieces or that there are better ways to solve problems than your initial idea." – [Brandon Lyon](/company/team/#brandon_m_lyon), marketing web developer/designer

That’s not to say pair programming is the ideal workflow for everyone, one developer said that, as an introvert, pair programming is tiring. But one of the key benefits is that it speeds up the software development process and allows you to ship more stable code, faster. Read more about [the upsides and downsides to pair programming for Agile software development](/blog/2019/08/20/agile-pairing-sessions/).

## Best practices for collaboration on non-engineering teams

The tools and strategies you use to communicate may vary based on where you sit in your company, but there are a few best practices that engineering teams use that can be applied to non-engineering teams, such as pairing up on design, code production, and even writing projects. Check out some of our blog posts about [how to use GitLab for collaborative project management within and across teams](/blog/2020/06/03/collaboration-in-product-planning/).

*   [**How designers collaborate sychronously**](/blog/2020/04/01/synchronous-collaboration-as-a-remote-designer-at-gitlab/): Pair designers, coffee chats with team members across GitLab, weekly UX showcases, calls with product designers and product managers, and other strategies.
*   **How Marketing uses GitLab for project management**: In [part one](/blog/2019/12/06/gitlab-for-project-management-one/), we explain why the architecture of GitLab is so effective for project management, even for users in non-technical roles. In [part two](/blog/2019/12/11/gl-for-pm-prt-2/), we share some real-life examples of how we use GitLab was used for successful project management.

### Other inventive ideas for collaboration

In a stroke of genius, our Support team recognized that the weekly team all-hands meeting was getting a bit dull, and decided to change up the format and distribute it as a [podcast instead](/blog/2019/06/03/how-we-turned-40-person-meeting-into-a-podcast/). The podcast format allowed team members to listen to the weekly update asynchronously, which is an essential component of communication for a globally distributed team such as ours. This is a great example of how thinking outside the box can improve how information is disseminated.

## Some challenges with DevOps collaboration

- **Maintaining security.** Security and compliance are critical for successful DevOps, but these areas have traditionally been siloed, making collaboration tricky at best.
- **Too many people on a project**. Large and busy teams can struggle with communication and collaboration.
- **Lots of communication options.** Using email, instant messaging, tickets, Zoom recordings, and more to house project info can cause things to slip through the cracks. 
- **Dealing with different personality types and working styles.** Individual needs and preferences can vary wildly and it can be a struggle to keep everyone on the same page.

## Want more information on collaborative software development?

Trust us, you’ll want to [bookmark this page](/topics/version-control/software-team-collaboration/) so examples of best practices for collaboration are just a click away for the times when you’re feeling stumped or siloed.

[Watch the webcast](/webcast/collaboration-without-boundaries/) to learn how to bring cross-functional teams together using GitLab to deliver more stable software, faster.

Cover image by [Volodymyr Hryshchenko](https://unsplash.com/@lunarts?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/V5vqWC9gyEU)
{: .note}
