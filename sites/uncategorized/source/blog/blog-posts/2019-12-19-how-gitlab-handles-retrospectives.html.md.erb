---
title: "How GitLab handles retrospectives"
author: Suri Patel
author_gitlab: suripatel
author_twitter: gitlab
categories: company
image_title: '/images/blogimages/retrospectivesgitlabpost.jpg'
description: "Take a peek at how the GitLab team holds monthly retrospectives."
tags: agile, collaboration, workflow
twitter_text: "Learn how GitLab holds monthly retrospectives"
featured: yes
postType: content marketing
merch_banner: merch_two
---

Each month, GitLab‚Äôs engineering team hold a retrospective to learn and improve as much as possible from [every monthly release](/releases/). Retrospectives are the preferred method for GitLab team members [focused on improvement](/handbook/values/#focus-on-improvement) and ensures that our technical debt doesn‚Äôt grow faster than our code base.

> ‚ÄúWhen we say retrospective, here‚Äôs what we have in mind: A special meeting where the team gathers after completing an increment of work to inspect and adapt their methods and teamwork. Retrospectives enable whole-team learning, act as catalysts for change, and gener-ate action. Retrospectives go beyond checklist project audits or per-functory project closeouts. And, in contrast to traditional post-mortems or project reviews, retrospectives focus not only on the development process, but on the team and team issues. And team issues are as challenging as technical issues ‚Äì if not more so.‚Äù ‚Äî [Agile retrospectives: Making good teams great](https://www.amazon.com/Agile-Retrospectives-Making-Pragmatic-Programmers-ebook/dp/B00B03SRJW)

Since retrospectives can cultivate a culture of transparency, trust, collaboration, and communication, we want to share the steps our team takes in order to ship every month.

## Engineering-wide retrospectives

In line with our [value of transparency](/handbook/values/#transparency), we livestream the meetings to YouTube and monitor the chat for questions from viewers. We also have a publicly available document for [retrospective notes](https://docs.google.com/document/d/1nEkM_7Dj4bT21GJy0Ut3By76FZqCfLBmFQNVThmW2TY/edit?usp=sharing) so that we can [efficiently refer back to decisions, insight, and comments](/handbook/values/#write-things-down).

In each retrospective, the team methodically works through the same discussion points:

1. **Previous retrospective improvement tasks**: The moderator reviews the improvements the team identified in the last retrospective and discuss progress on those items.
1. **What went well this month**: Teams are encouraged to celebrate the ways in which we exceeded expectations either individually or as a team.
1. **What went wrong this month**: Teams are encouraged to identify mistakes and unmet goals. The focus is to highlight areas that didn‚Äôt meet our expectations as a team.
1. **How we can improve**: The team engages in [blameless problem solving](/handbook/values/#blameless-problem-solving) to identify how subsequent releases can improve. Are there changes we can make in workflow? Is there a potential silo forming? Do changes need to be made in communication and collaboration?
1. **Improvements for next release to track**: At the end of each retrospective, the [Engineering Productivity team](/handbook/engineering/quality/#engineering-productivity) triages improvement items identified during the retrospective. Having a single owner of triaging enables the awareness of the bigger picture technical debt and backstage work required. The individuals issues are assigned to other teams or engineers to execute.

Retrospectives are publicly live streamed each month. Take a look at the retrospective for 12.5. üçø

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/tkwo9xisg90" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

## Team retrospectives

[Team retrospectives](/handbook/engineering/management/group-retrospectives/) are held to inform the function-wide retrospective for any given release. [Sean McGivern](/company/team/#smcgivern), engineering manager, Plan:Project Management, wrote a [great article on using GitLab CI to automate monthly releases](/blog/2019/03/07/how-we-used-gitlab-to-automate-our-monthly-retrospectives/). Using scheduled pipelines to create an issue early in the release cycle, teams can contribute to the retro issue while they‚Äôre still working on the release.

> ‚ÄúIt doesn‚Äôt matter whether you have four or five labels of things on your retro board, or exactly how you do the retro. What does matter is the notion of thinking about what we're doing and how we can do better, and it is the team that‚Äôs doing the work that does this, that is the central thing.‚Äù ‚Äî [Martin Fowler](https://martinfowler.com/articles/agile-aus-2018.html)

In this [team retrospective issue](https://gitlab.com/gl-retrospectives/create-stage/editor/issues/6), the [Create:Editor team](/handbook/engineering/development/dev/create/editor/) takes a look at what went well, what didn‚Äôt go well, what can be improved, which issues shipped, and which issues slipped in the [12.5 release](/blog/2019/11/22/gitlab-12-5-released). In team retro issues, individuals can gauge how others experienced the release and discuss points raised by teammates.

Here‚Äôs a video of the [Plan team](/handbook/product/categories/plan/) holding a retrospective to discuss recent slipped issues. üçø

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/QA3LlJOi0Ik" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

## Asynchronous retrospectives

Since GitLab is an [all-remote company](/company/culture/all-remote/), we strongly encourage [asynchronous communication](/handbook/communication/confidentiality-levels/#internal-communication), since team members can be located in any of the [65 countries](/company/team/) where GitLab team members live. We apply asynchronous communication to our retrospectives to ensure that everyone can contribute and document their experiences.

Asynchronous retrospectives are not just for remote teams. They can also be used by colocated teams to facilitate open discussion when team members have the bandwidth to dedicate to problem solving. Furthermore, asynch retros can serve as a dedicated place where people can quickly jot down their thoughts when they suddenly remember an experience, rather than be forced to remember everything during a dedicated call.

## Retrospectives: The impact on culture

[When retrospectives are run efficiently](/handbook/engineering/management/team-retrospectives/#requirements-for-an-efficient-retrospective), these meetings can build mutual trust, communication, and collaboration. They cultivate a culture of continuous learning and improvement, two characteristics of any strong Agile team. The more teams can determine how to efficiently build software, the more value they can bring to users.

Cover image by [Shane Aldendorff](https://unsplash.com/@pluyar?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/photos/mQHEgroKw2k).
{: .note}

<%= partial "includes/blog/blog-merch-banner" %>
