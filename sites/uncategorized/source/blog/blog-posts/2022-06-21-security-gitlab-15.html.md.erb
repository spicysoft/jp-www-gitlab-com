---
title: "GitLab's commitment to enhanced application security in the modern DevOps world"
author: Fernando Diaz
author_gitlab: fjdiaz
author_twitter: awkwardferny
categories: security
image_title: '/images/blogimages/gl15.jpg'
description: "Security abounds in our latest DevOps platform release, GitLab 15."
tags: security, DevOps
twitter_text: "Learn how @GitLab 15 commits to enhanced application security in the modern Devops world"
featured: no
postType: content marketing
related_posts:
  - "/blog/2020/05/20/gitlab-instance-security-best-practices/"
  - "/blog/2021/12/17/gitlab-security-twenty-twenty-one/"
  - "/blog/2021/12/15/use-gitlab-to-detect-vulnerabilities/"
---

With [GitLab 14](/gitlab-14/), we saw deep emphasis on modernizing our DevOps capabilities. This modernization enabled enhanced application security and strenghtened collaboration between developers and security professionals.

We saw enhancments such as:

- global rule registry and customization for policy requriements with support for separation of duties
- a newly developed browser-based Dynamic Application Security Testing (DAST) scanner used to test and secure modern APIs and Single Page
Applications
- more support for different languages using Semgrep
- new vulnerability management capabilities to increase visibility

With the GitLab 15 release, we can see how our commitment to enhancing application security across the board is stronger than ever. In this blog post, I will provide details on how GitLab is commited to enhancing not only security, but efficiency.

> Discover how GitLab 15 can help your team deliver secure software, while maintaining compliance and automating manual processes.
Save the date for our GitLab 15 [launch event](/fifteen/) on June 23rd!

## GitLab 15 security features

We see that with every GitLab release, there are plenty of enhancements to our security tools.
GitLab 15 is no exception! We can see a boatload ðŸš¢ of security enhacements released in GitLab 15 below:

- [Container Scanning available in all tiers](https://docs.gitlab.com/ee/user/application_security/container_scanning/#capabilities)
- [Audit changes to group IP allowlist](https://docs.gitlab.com/ee/administration/audit_events.html#group-events)
- [Revoke a personal access token without PAT ID](https://docs.gitlab.com/ee/api/personal_access_tokens.html#using-a-request-header)
- [Project-level Secure Files in open beta](https://docs.gitlab.com/ee/ci/secure_files/)
- [Dependency scanning support for poetry.lock files](https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#supported-languages-and-package-managers)
- [Semgrep-based Static Application Security Testing (SAST) scanning available for early adoption](https://docs.gitlab.com/ee/user/application_security/sast/analyzers.html#transition-to-semgrep-based-scanning)
- [Access and Verify actions for environments](https://docs.gitlab.com/ee/ci/yaml/index.html#environmentaction)
- [Terraform CI/CD template authenticates to Terraform module registry](https://docs.gitlab.com/ee/user/infrastructure/iac/#integrate-your-project-with-terraform)
- [GitLab advisory data included in container scanning results](https://docs.gitlab.com/ee/user/application_security/container_scanning/#vulnerabilities-database)
- [New audit events for merge settings](https://docs.gitlab.com/ee/administration/audit_events.html#project-events)
- [Users with the Reporter role can manage iterations and milestones](https://docs.gitlab.com/ee/user/permissions.html)
- [Dependency path information](https://docs.gitlab.com/ee/user/application_security/dependency_list/#dependency-paths)
- [Secure and Protect analyzer major version update](https://docs.gitlab.com/ee/user/application_security/)
- [Static Analysis analyzer updates](https://docs.gitlab.com/ee/user/application_security/sast/analyzers)
- [Approve deployments from the Environments detail page](https://docs.gitlab.com/ee/ci/environments/deployment_approvals.html)
- [Scan result policies listed under MR approval settings](https://docs.gitlab.com/ee/user/project/merge_requests/approvals/rules.html#security-approvals)

These features run across different stages of the software development lifecycle. I have created a video showing some of the coolest new security features
in GitLab 15:

<iframe width="560" height="315" src="https://www.youtube.com/embed/BasGVNvOFGo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

## Scanners moved to GitLab Free Tier

A lot of our scanners were only part of GitLab Ultimate in the past. However, over time, certain scanners
have been moved over to GitLab Free Tier, enabling you to enhance the security of your application
no matter what tier of GitLab you are using.

| Scanner            | Introduced | Moved to Free |
| ------------------ | ---------- | ------------- |
| SAST               | 10.3       | 13.3          |
| Container Scanning | 10.4       | 15.0          |
| Secret Detection   | 11.9       | 13.3          |

Within the free tier, you are able to download the reports generated by the security scanners.
This allows developers to see what vulnerabilites were detected within their source code and
container images.

![Report on vulnerabilities](/images/blogimages/modern-devops-security/results_1.png)

However, there are benefits to upgrading to Ultimate, which are described below.

## Benefits of upgrading to Ultimate

Some organizations have multiple groups and projects they are working on, as well as a the security team,
which manages all the detected vulnerabilities. While having security scan reports ready for download
is useful, it is not exactly scalable across an organization. This is where Ultimate assists in enhancing
DevSecOps efficiency.

### Scanners

While the GitLab Free Tier includes SAST, Secret Detection, and Container Scanning to find vulnerabilities
in your source code, when you upgrade to Ultimate, you are provided with even more scanners. Here are some
of the additional scanners provided in Ultimate:

- [DAST](https://docs.gitlab.com/ee/user/application_security/dast/index.html)
- [Operational Container Scanning](https://docs.gitlab.com/ee/user/clusters/agent/vulnerabilities.html)
- [Dependency Scanning](https://docs.gitlab.com/ee/user/application_security/dependency_scanning/)
- [Infrastructure as Code Scanning](https://docs.gitlab.com/ee/user/application_security/iac_scanning/)
- [Coverage-Guided Fuzzing](https://docs.gitlab.com/ee/user/application_security/coverage_fuzzing/)
- [Web-API Fuzzing](https://docs.gitlab.com/ee/user/application_security/api_fuzzing/)

### Developer Lifecycle

In Ultimate, there is enhanced functionality within the developer lifecycle. The merge request a developer creates will
contain a security widget which displays a summary of the new security scan results. New results are determined by
comparing the current findings against existing findings in the default branch.

![Ultimate security widget](/images/blogimages/modern-devops-security/developer_1.png)

The results contain not only detailed information on the vulnerability and how it affects the system, but also
solutions to mitigating or resolving the issue. These vulnerabilities are also actionable, meaning that a comment
can be added in order to notify the security team, so they may review â€“ enhancing developer and appsec collaboration.
A confidential issue can also be created so that developers and security professionals can work together towards a
resolution safely and efficiently.

![Confidential issue](/images/blogimages/modern-devops-security/developer_2.png)

While these features were avaliable in Ultimate on older versions of GitLab, within release 14 this feature was heightened
to include developer training within the vulnerability, helping to educate developers and make them more security-aware. GitLab 15
will provide even more enhancements to the developer lifecycle.

![Ultimate enhancements](/images/blogimages/modern-devops-security/developer_3.png)

### Security team lifecycle

There are also several features which greatly benefit members of a security team.

The security team is able to effectively manage and triage vulnerabilities using the [Vulnerability Reports](https://docs.gitlab.com/ee/user/application_security/vulnerability_report/).

![Vulnerability reports](/images/blogimages/modern-devops-security/appsec_1.png)  

The [security dashboard](https://docs.gitlab.com/ee/user/application_security/security_dashboard/) allows the security team to assess the security posture
of a project or group of projects. This is helpful to see how many vulnerabilities were introduced/resolved over time, as well as which projects require more
attention than others

![security dashboard](/images/blogimages/modern-devops-security/appsec_2.png)  

Separation of duties can be enforced using [Compliance Frameworks](https://docs.gitlab.com/ee/user/project/settings/#compliance-frameworks)
and [Security Policies](https://docs.gitlab.com/ee/user/application_security/policies/) assuring code requires approval before making it to production.

![Separation of duties](/images/blogimages/modern-devops-security/appsec_3.png)  

These are just some of the features GitLab has to offer in terms of security. For even more features, please see
the [GitLab application security](https://docs.gitlab.com/ee/user/application_security/) documentation.

---
  
Thanks for reading! To find out more about the newest security features in GitLab 15, check out
the [release post](/releases/2022/05/22/gitlab-15-0-released/). For upcoming
version features, see the [Upcoming Releases](/upcoming-releases/) page.

It is also helpful to check out our [Secure](/direction/secure/) and [Protect](/direction/protect/) roadmaps to get an idea of the direction we
are headed!
