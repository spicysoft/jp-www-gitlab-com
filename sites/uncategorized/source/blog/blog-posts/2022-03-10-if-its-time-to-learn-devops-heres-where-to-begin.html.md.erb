---
title: It's time to learn DevOps and here's where to begin
author: Sharon Gaudin
author_gitlab: sgaudin
author_twitter: gitlab
categories: devops platform
tags: DevOps, CI/CD, collaboration
description: DevOps is a unique blend of tech, tools and culture. Take it step-by-step and it's easy to learn. This simple guide shows you how to get started. Learn more here!
image_title: /images/blogimages/three-things-i-learned-in-my-first-month-at-gitlab.jpg
twitter_text: "Get started with #DevOps with @gitlab's beginner guide"
---

If you’re fairly new – or really new – to a DevOps team, you’ve made a great career move, but you probably [have a lot to learn](/blog/2021/11/09/best-advice-for-your-devops-career-keep-on-learning/). To truly learn DevOps, there are technologies and processes to figure out, phases to understand, and a [whole new mindset to adopt](/blog/2021/11/30/soft-skills-are-the-key-to-your-devops-career-advancement/). 

## Learn DevOps, where to start?

Laern DevOps? Why? Where?... Since the demand for DevOps professionals is hot and salaries for this [dynamic job sector](/blog/2021/10/20/four-tips-to-increase-your-devops-salary/) are on the rise, there are a lot of DevOps beginners trying to figure out what to learn first. But don’t worry: We can help. 

With a lot on [your learn DevOps to-do list](https://learn.gitlab.com/beginners-guide-devops/guide-to-devops), we’ll walk you through where you should start, including figuring out what DevOps is all about, the stages of the DevOps lifecycle, and the uniquely [collaborative culture](/blog/2021/02/09/engineering-teams-collaborating-remotely/). 

## What DevOps is really all about

In the past, software development was done using a complicated and confusing jumble of tools and workflows. Both projects and teams often were siloed, which meant they weren’t coordinating efforts or sharing best practices. It was a frustrating and inefficient process that led to deployment traffic jams, costing teams time and money. There were a lot of headaches.

Think of DevOps as a way to simplify development and deployment, while making the entire process more efficient. With DevOps, once-siloed teams, tools, and workflows are combined in a software development ecosystem. That ecosystem enables teams to plan, create and deliver more efficiently, securely, and collaboratively. 

DevOps also puts a focus on automation, shifting security left, and making practices not only repeatable but measurable. That speeds development cycles and slashes the time between designing new features and rolling them out into production.

Because of this efficiency and the enablement of teamwork, DevOps makes not only your software delivery more agile, it makes your entire company more agile. DevOps enables the business to pivot quickly, answering new and critical customer needs, responding to changes in the market and adjusting to stay ahead of the competition. 

## To learn DevOps, collaborate

DevOps is built around a culture of collaboration that encourages teammates to share ideas and help each other. It’s not simply something that’s suggested and it’s not something that’s done in a meeting or two. Collaboration is a [core principle](/blog/2022/02/11/4-must-know-devops-principles/) of DevOps. 

It's easy to think that to learn DevOps means focusing on programming languages, security, and CI/CD. Those skills and technologies are critical but don’t dismiss the idea of collaboration. It’s about communication, and working together to create something new and to fix problems. However, DevOps professionals also collaborate with other departments, like security, marketing, and the C-suite. You’re all pulling in the same direction.

In the [2021 Global DevSecOps Survey](/developer-survey/), survey respondents consistently said communication and collaboration skills were key to their future careers. 

## The key stages of the DevOps lifecycle

There’s a definite flow to DevOps, with the process moving from planning and developing all the way through to deployment, monitoring, and feedback. There are three basic stages, or phases – build, test, and deploy. Within these are nine other stages that will help you produce software efficiently, reliably, and with speed and agility.

- Planning focuses on everything that happens before a single line of code is written.
- Creating is about designing and developing.
- Verifying checks the quality of the code.
- Packaging applications and dependencies, managing containers, and building artifacts maintains a consistent software supply chain. 
- Release, or deployment, is all about moving code updates into production as iterations are ready.
- Configuring is focused on creating, managing, and maintaining application environments.
- Monitoring is about checking the status of software and networks.
- Protecting is all about securing your applications and their environment.
- Managing runs end-to-end through your software development lifecycle, controlling permissions and processes. 

## What it means to shift security left

Did you notice that security wasn’t one of the lifecycle stages for DevOps? Well, it’s not a single stage because it’s woven into EVERY stage. Shift left means you don’t wait to incorporate security into software at the end of a build. You consider security beginning with the initial planning stage and continue to focus on it all the way through, giving you more opportunity to avoid or find and address any issues. Shifting left enables you to make sure the code you are developing functions as intended, and that any vulnerabilities and compliance issues are caught and fixed.

## Understand CI/CD

First off, CI/CD means continuous integration and continuous delivery. Combined continuous development methodologies and practices focus on catching vulnerabilities and errors early in the development lifecycle, ensuring that all the code deployed into production complies with standards the DevOps team has established for the software being created. This helps connect development and operations teams, as well as projects, by using automation for building, testing, and deployment. 

CI/CD is all about  incremental code changes being made frequently and reliably – a critical part of how a DevOps platform enables an organization to automatically deliver software multiple times a day. This is key for DevOps teams and the overall business because CI/CD helps to quickly and efficiently move software updates into production, making the organization able to respond faster to customer needs. 

## Dig deeper

Want to learn more? Our [Beginner's guide to DevOps](https://page.gitlab.com/resources-ebook-beginners-guide-devops.html) has everything you need to get started.
