<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">

<channel>
  <title>GitLab Breaking Changes</title>
  <link>https://docs.gitlab.com/ee/update/deprecations.html</link>
  <description>Receive notifications of upcoming changes to GitLab that may affect your team's workflow.</description>
  


  <item>
    <title>Dependency Scanning default Java version changed to 17</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#dependency-scanning-default-java-version-changed-to-17</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#dependency-scanning-default-java-version-changed-to-17</link> 
    <description>In GitLab 15.0, for Dependency Scanning, the default version of Java that the scanner expects will be updated from 11 to 17. Java 17 is <a href="https://en.wikipedia.org/wiki/Java_version_history">the most up-to-date Long Term Support (LTS) version</a>. Dependency scanning continues to support the same <a href="https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#supported-languages-and-package-managers">range of versions (8, 11, 13, 14, 15, 16, 17)</a>, only the default version is changing. If your project uses the previous default of Java 11, be sure to <a href="https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#configuring-specific-analyzers-used-by-dependency-scanning">set the `DS_Java_Version` variable to match</a>.
</description>
    <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Manual iteration management</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#manual-iteration-management</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#manual-iteration-management</link> 
    <description>Manual iteration management is deprecated and only automatic iteration cadences will be supported in the future.

Creating and deleting iterations will be fully removed in 16.0. Updating all iteration fields except for
`description` will also be removed.

On the GraphQL API the following mutations will be removed:

  1. `iterationCreate`
  1. `iterationDelete`

The update `updateIteration` mutation will only allow updating the iteration's `description`. The following
arguments will be removed:

  1. `title`
  1. `dueDate`
  1. `startDate`

For more information about iteration cadences, you can refer to
<a href="https://docs.gitlab.com/ee/user/group/iterations/#iteration-cadences">the documentation of the feature</a>.
</description>
    <pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Sidekiq metrics and health checks configuration</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#sidekiq-metrics-and-health-checks-configuration</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#sidekiq-metrics-and-health-checks-configuration</link> 
    <description>Exporting Sidekiq metrics and health checks using a single process and port is deprecated.
Support will be removed in 15.0.

We have updated Sidekiq to export <a href="https://gitlab.com/groups/gitlab-org/-/epics/6409">metrics and health checks from two separate processes</a>
to improve stability and availability and prevent data loss in edge cases.
As those are two separate servers, a configuration change will be required in 15.0
to explicitly set separate ports for metrics and health-checks.
The newly introduced settings for `sidekiq['health_checks_*']`
should always be set in `gitlab.rb`.
For more information, check the documentation for <a href="https://docs.gitlab.com/ee/administration/sidekiq.html">configuring Sidekiq</a>.

These changes also require updates in either Prometheus to scrape the new endpoint or k8s health-checks to target the new
health-check port to work properly, otherwise either metrics or health-checks will disappear.

For the deprecation period those settings are optional
and GitLab will default the Sidekiq health-checks port to the same port as `sidekiq_exporter`
and only run one server (not changing the current behaviour).
Only if they are both set and a different port is provided, a separate metrics server will spin up
to serve the Sidekiq metrics, similar to the way Sidekiq will behave in 15.0.
</description>
    <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Self-managed certificate-based integration with Kubernetes</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#self-managed-certificate-based-integration-with-kubernetes</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#self-managed-certificate-based-integration-with-kubernetes</link> 
    <description>The certificate-based integration with Kubernetes <a href="https://about.gitlab.com/blog/2021/11/15/deprecating-the-cert-based-kubernetes-integration/">will be deprecated and removed</a>.

As a self-managed customer, we are introducing a feature flag in GitLab 15.0 so you can keep your certificate-based integration enabled. However, the feature flag will be disabled by default, so this change is a **breaking change**.

In GitLab 16.0 we will remove both the feature and its related code. Until the final removal in 16.0, features built on this integration will continue to work, if you enable the feature flag. Until the feature is removed, GitLab will continue to fix security and critical issues as they arise.

For a more robust, secure, forthcoming, and reliable integration with Kubernetes, we recommend you use the
<a href="https://docs.gitlab.com/ee/user/clusters/agent/">agent for Kubernetes</a> to connect Kubernetes clusters with GitLab. <a href="https://docs.gitlab.com/ee/user/infrastructure/clusters/migrate_to_gitlab_agent.html">How do I migrate?</a>

For updates and details about this deprecation, follow <a href="https://gitlab.com/groups/gitlab-org/configure/-/epics/8">this epic</a>.
</description>
    <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>SaaS certificate-based integration with Kubernetes</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#saas-certificate-based-integration-with-kubernetes</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#saas-certificate-based-integration-with-kubernetes</link> 
    <description>The certificate-based integration with Kubernetes will be <a href="https://about.gitlab.com/blog/2021/11/15/deprecating-the-cert-based-kubernetes-integration/">deprecated and removed</a>. As a GitLab SaaS customer, on new namespaces, you will no longer be able to integrate GitLab and your cluster using the certificate-based approach as of GitLab 15.0. The integration for current users will be enabled per namespace. The integrations are expected to be switched off completely on GitLab SaaS around 2022 November 22.

For a more robust, secure, forthcoming, and reliable integration with Kubernetes, we recommend you use the
<a href="https://docs.gitlab.com/ee/user/clusters/agent/">agent for Kubernetes</a> to connect Kubernetes clusters with GitLab. <a href="https://docs.gitlab.com/ee/user/infrastructure/clusters/migrate_to_gitlab_agent.html">How do I migrate?</a>

For updates and details about this deprecation, follow <a href="https://gitlab.com/groups/gitlab-org/configure/-/epics/8">this epic</a>.

GitLab self-managed customers can still use the feature <a href="https://docs.gitlab.com/ee/update/deprecations.html#self-managed-certificate-based-integration-with-kubernetes">with a feature flag</a>.
</description>
    <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>External status check API breaking changes</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#external-status-check-api-breaking-changes</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#external-status-check-api-breaking-changes</link> 
    <description>The <a href="https://docs.gitlab.com/ee/api/status_checks.html">external status check API</a> was originally implemented to
support pass-by-default requests to mark a status check as passing. Pass-by-default requests are now deprecated.
Specifically, the following are deprecated:

- Requests that do not contain the `status` field.
- Requests that have the `status` field set to `approved`.

Beginning in GitLab 15.0, status checks will only be updated to a passing state if the `status` field is both present
and set to `passed`. Requests that:

- Do not contain the `status` field will be rejected with a `422` error. For more information, see <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/338827">the relevant issue</a>.
- Contain any value other than `passed` will cause the status check to fail. For more information, see <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/339039">the relevant issue</a>.

To align with this change, API calls to list external status checks will also return the value of `passed` rather than
`approved` for status checks that have passed.
</description>
    <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`CI_BUILD_*` predefined variables</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#ci_build_-predefined-variables</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#ci_build_-predefined-variables</link> 
    <description>The predefined CI/CD variables that start with `CI_BUILD_*` were deprecated in GitLab 9.0, and will be removed in GitLab 16.0. If you still use these variables, be sure to change to the replacement <a href="https://docs.gitlab.com/ee/ci/variables/predefined_variables.html">predefined variables</a> which are functionally identical:

| Removed variable      | Replacement variable    |
| --------------------- |------------------------ |
| `CI_BUILD_BEFORE_SHA` | `CI_COMMIT_BEFORE_SHA`  |
| `CI_BUILD_ID`         | `CI_JOB_ID`             |
| `CI_BUILD_MANUAL`     | `CI_JOB_MANUAL`         |
| `CI_BUILD_NAME`       | `CI_JOB_NAME`           |
| `CI_BUILD_REF`        | `CI_COMMIT_SHA`         |
| `CI_BUILD_REF_NAME`   | `CI_COMMIT_REF_NAME`    |
| `CI_BUILD_REF_SLUG`   | `CI_COMMIT_REF_SLUG`    |
| `CI_BUILD_REPO`       | `CI_REPOSITORY_URL`     |
| `CI_BUILD_STAGE`      | `CI_JOB_STAGE`          |
| `CI_BUILD_TAG`        | `CI_COMMIT_TAG`         |
| `CI_BUILD_TOKEN`      | `CI_JOB_TOKEN`          |
| `CI_BUILD_TRIGGERED`  | `CI_PIPELINE_TRIGGERED` |
</description>
    <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Dependency Scanning Python 3.9 and 3.6 image deprecation</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#dependency-scanning-python-39-and-36-image-deprecation</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#dependency-scanning-python-39-and-36-image-deprecation</link> 
    <description>For those using Dependency Scanning for Python projects, we are deprecating the default `gemnasium-python:2` image which uses Python 3.6 as well as the custom `gemnasium-python:2-python-3.9` image which uses Python 3.9. The new default image as of GitLab 15.0 will be for Python 3.9 as it is a <a href="https://endoflife.date/python">supported version</a> and 3.6 <a href="https://endoflife.date/python">is no longer supported</a>.

For users using Python 3.9 or 3.9-compatible projects, you should not need to take action and dependency scanning should begin to work in GitLab 15.0. If you wish to test the new container now please run a test pipeline in your project with this container (which will be removed in 15.0). Use the Python 3.9 image:

```yaml
gemnasium-python-dependency_scanning:
  image:
    name: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium-python:2-python-3.9
```

For users using Python 3.6, as of GitLab 15.0 you will no longer be able to use the default template for dependency scanning. You will need to switch to use the deprecated `gemnasium-python:2` analyzer image. If you are impacted by this please comment in <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/351503">this issue</a> so we can extend the removal if needed.

For users using the 3.9 special exception image, you must instead use the default value and no longer override your container. To verify if you are using the 3.9 special exception image, check your `.gitlab-ci.yml` file for the following reference:

```yaml
gemnasium-python-dependency_scanning:
  image:
    name: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium-python:2-python-3.9
```
</description>
    <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Required pipeline configurations in Premium tier</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#required-pipeline-configurations-in-premium-tier</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#required-pipeline-configurations-in-premium-tier</link> 
    <description>The <a href="https://docs.gitlab.com/ee/user/admin_area/settings/continuous_integration.html#required-pipeline-configuration">required pipeline configuration</a> feature is deprecated in GitLab 14.8 for Premium customers and is scheduled for removal in GitLab 15.0. This feature is not deprecated for GitLab Ultimate customers.

This change to move the feature to GitLab's Ultimate tier is intended to help our features better align with our <a href="https://about.gitlab.com/company/pricing/#three-tiers">pricing philosophy</a> as we see demand for this feature originating primarily from executives.

This change will also help GitLab remain consistent in its tiering strategy with the other related Ultimate-tier features of:
<a href="https://docs.gitlab.com/ee/user/application_security/policies/">Security policies</a> and <a href="https://docs.gitlab.com/ee/user/project/settings/index.html#compliance-pipeline-configuration">compliance framework pipelines</a>.
</description>
    <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Request profiling</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#request-profiling</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#request-profiling</link> 
    <description><a href="https://docs.gitlab.com/ee/administration/monitoring/performance/request_profiling.html">Request profiling</a> is deprecated in GitLab 14.8 and scheduled for removal in GitLab 15.0.

We're working on <a href="https://gitlab.com/groups/gitlab-org/-/epics/7327">consolidating our profiling tools</a> and making them more easily accessible.
We <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/350152">evaluated</a> the use of this feature and we found that it is not widely used.
It also depends on a few third-party gems that are not actively maintained anymore, have not been updated for the latest version of Ruby, or crash frequently when profiling heavy page loads.

For more information, check the <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352488#deprecation-summary">summary section of the deprecation issue</a>.
</description>
    <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Package pipelines in API payload is paginated</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#package-pipelines-in-api-payload-is-paginated</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#package-pipelines-in-api-payload-is-paginated</link> 
    <description>A request to the API for `/api/v4/projects/:id/packages` returns a paginated result of packages. Each package lists all of its pipelines in this response. This is a performance concern, as it's possible for a package to have hundreds or thousands of associated pipelines.

In milestone 16.0, we will remove the `pipelines` attribute from the API response.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`pipelines` field from the `version` field</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#pipelines-field-from-the-version-field</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#pipelines-field-from-the-version-field</link> 
    <description>In GraphQL, there are two `pipelines` fields that you can use in a <a href="https://docs.gitlab.com/ee/api/graphql/reference/#packagedetailstype">`PackageDetailsType`</a> to get the pipelines for package versions:

- The `versions` field's `pipelines` field. This returns all the pipelines associated with all the package's versions, which can pull an unbounded number of objects in memory and create performance concerns.
- The `pipelines` field of a specific `version`. This returns only the pipelines associated with that single package version.

To mitigate possible performance problems, we will remove the `versions` field's `pipelines` field in milestone 15.0. Although you will no longer be able to get all pipelines for all versions of a package, you can still get the pipelines of a single version through the remaining `pipelines` field for that version.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>REST and GraphQL API Runner status will not return `paused`</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#rest-and-graphql-api-runner-status-will-not-return-paused</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#rest-and-graphql-api-runner-status-will-not-return-paused</link> 
    <description>The GitLab Runner REST and GraphQL API endpoints will not return `paused` or `active` as a status in GitLab 16.0.

A runner's status will only relate to runner contact status, such as:
`online`, `offline`, or `not_connected`. Status `paused` or `active` will no longer appear.

When checking if a runner is `paused`, API users are advised to check the boolean attribute
`paused` to be `true` instead. When checking if a runner is `active`, check if `paused` is `false`.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Must explicitly assign `AuthenticationType` for `[runners.cache.s3]`</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#must-explicitly-assign-authenticationtype-for-runnerscaches3</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#must-explicitly-assign-authenticationtype-for-runnerscaches3</link> 
    <description>In GitLab 15.0 and later, to access the AWS S3 cache, you must specify the `AuthenticationType` for [`[runners.cache.s3]`](https://docs.gitlab.com/runner/configuration/advanced-configuration.html#the-runnerscaches3-section). The `AuthenticationType` must be `IAM` or `credentials`.

Prior to 14.5, if you did not define the `AuthenticationType`, GitLab Runner chose a type for you.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`promote-db` command from `gitlab-ctl`</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#promote-db-command-from-gitlab-ctl</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#promote-db-command-from-gitlab-ctl</link> 
    <description>In GitLab 14.5, we introduced the command `gitlab-ctl promote` to promote any Geo secondary node to a primary during a failover. This command replaces `gitlab-ctl promote-db` which is used to promote database nodes in multi-node Geo secondary sites. `gitlab-ctl promote-db` will continue to function as-is and be available until GitLab 15.0. We recommend that Geo customers begin testing the new `gitlab-ctl promote` command in their staging environments and incorporating the new command in their failover procedures.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Changing an instance (shared) runner to a project (specific) runner</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#changing-an-instance-shared-runner-to-a-project-specific-runner</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#changing-an-instance-shared-runner-to-a-project-specific-runner</link> 
    <description>In GitLab 15.0, you can no longer change an instance (shared) runner to a project (specific) runner.

Users often accidentally change instance runners to project runners, and they're unable to change them back. GitLab does not allow you to change a project runner to a shared runner because of the security implications. A runner meant for one project could be set to run jobs for an entire instance.

Administrators who need to add runners for multiple projects can register a runner for one project, then go to the Admin view and choose additional projects.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`defaultMergeCommitMessageWithDescription` GraphQL API field</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#defaultmergecommitmessagewithdescription-graphql-api-field</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#defaultmergecommitmessagewithdescription-graphql-api-field</link> 
    <description>The GraphQL API field `defaultMergeCommitMessageWithDescription` has been deprecated and will be removed in GitLab 15.0. For projects with a commit message template set, it will ignore the template.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Support for SLES 12 SP2</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#support-for-sles-12-sp2</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#support-for-sles-12-sp2</link> 
    <description>Long term service and support (LTSS) for SUSE Linux Enterprise Server (SLES) 12 SP2 <a href="https://www.suse.com/lifecycle/">ended on March 31, 2021</a>. The CA certificates on SP2 include the expired DST root certificate, and it's not getting new CA certificate package updates. We have implemented some <a href="https://gitlab.com/gitlab-org/gitlab-omnibus-builder/-/merge_requests/191">workarounds</a>, but we will not be able to continue to keep the build running properly.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`Versions` on base `PackageType`</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#versions-on-base-packagetype</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#versions-on-base-packagetype</link> 
    <description>As part of the work to create a <a href="https://gitlab.com/groups/gitlab-org/-/epics/6318">Package Registry GraphQL API</a>, the Package group deprecated the `Version` type for the basic `PackageType` type and moved it to <a href="https://docs.gitlab.com/ee/api/graphql/reference/index.html#packagedetailstype">`PackageDetailsType`</a>.

In milestone 15.0, we will completely remove `Version` from `PackageType`.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Value Stream Analytics filtering calculation change</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#value-stream-analytics-filtering-calculation-change</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#value-stream-analytics-filtering-calculation-change</link> 
    <description>We are changing how the date filter works in Value Stream Analytics. Instead of filtering by the time that the issue or merge request was created, the date filter will filter by the end event time of the given stage. This will result in completely different figures after this change has rolled out.

If you monitor Value Stream Analytics metrics and rely on the date filter, to avoid losing data, you must save the data prior to this change.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Known host required for GitLab Runner SSH executor</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#known-host-required-for-gitlab-runner-ssh-executor</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#known-host-required-for-gitlab-runner-ssh-executor</link> 
    <description>In <a href="https://gitlab.com/gitlab-org/gitlab-runner/-/merge_requests/3074">GitLab 14.3</a>, we added a configuration setting in the GitLab Runner `config.toml` file. This setting, [`[runners.ssh.disable_strict_host_key_checking]`](https://docs.gitlab.com/runner/executors/ssh.html#security), controls whether or not to use strict host key checking with the SSH executor.

In GitLab 15.0 and later, the default value for this configuration option will change from `true` to `false`. This means that strict host key checking will be enforced when using the GitLab Runner SSH executor.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`promote-to-primary-node` command from `gitlab-ctl`</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#promote-to-primary-node-command-from-gitlab-ctl</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#promote-to-primary-node-command-from-gitlab-ctl</link> 
    <description>In GitLab 14.5, we introduced the command `gitlab-ctl promote` to promote any Geo secondary node to a primary during a failover. This command replaces `gitlab-ctl promote-to-primary-node` which was only usable for single-node Geo sites. `gitlab-ctl promote-to-primary-node` will continue to function as-is and be available until GitLab 15.0. We recommend that Geo customers begin testing the new `gitlab-ctl promote` command in their staging environments and incorporating the new command in their failover procedures.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Update to the Container Registry group-level API</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#update-to-the-container-registry-group-level-api</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#update-to-the-container-registry-group-level-api</link> 
    <description>In milestone 15.0, support for the `tags` and `tags_count` parameters will be removed from the Container Registry API that <a href="../api/container_registry.md#within-a-group">gets registry repositories from a group</a>.

The `GET /groups/:id/registry/repositories` endpoint will remain, but won't return any info about tags. To get the info about tags, you can use the existing `GET /registry/repositories/:id` endpoint, which will continue to support the `tags` and `tag_count` options as it does today. The latter must be called once per image repository.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`dependency_proxy_for_private_groups` feature flag</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#dependency_proxy_for_private_groups-feature-flag</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#dependency_proxy_for_private_groups-feature-flag</link> 
    <description>We added a feature flag because <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/11582">GitLab-#11582</a> changed how public groups use the Dependency Proxy. Prior to this change, you could use the Dependency Proxy without authentication. The change requires authentication to use the Dependency Proxy.

In milestone 15.0, we will remove the feature flag entirely. Moving forward, you must authenticate when using the Dependency Proxy.
</description>
    <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Logging in GitLab</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#logging-in-gitlab</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#logging-in-gitlab</link> 
    <description>The logging features in GitLab allow users to install the ELK stack (Elasticsearch, Logstash, and Kibana) to aggregate and manage application logs. Users can search for relevant logs in GitLab. However, since deprecating certificate-based integration with Kubernetes clusters and GitLab Managed Apps, we don't have a recommended solution for logging within GitLab. For more information, you can follow the issue for <a href="https://gitlab.com/groups/gitlab-org/-/epics/6976">integrating Opstrace with GitLab</a>.
</description>
    <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>merged_by API field</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#merged_by-api-field</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#merged_by-api-field</link> 
    <description>The `merged_by` field in the <a href="https://docs.gitlab.com/ee/api/merge_requests.html#list-merge-requests">merge request API</a> is being deprecated and will be removed in GitLab 15.0. This field is being replaced with the `merge_user` field (already present in GraphQL) which more correctly identifies who merged a merge request when performing actions (merge when pipeline succeeds, add to merge train) other than a simple merge.
</description>
    <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Monitor performance metrics through Prometheus</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#monitor-performance-metrics-through-prometheus</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#monitor-performance-metrics-through-prometheus</link> 
    <description>By displaying data stored in a Prometheus instance, GitLab allows users to view performance metrics. GitLab also displays visualizations of these metrics in dashboards. The user can connect to a previously-configured external Prometheus instance, or set up Prometheus as a GitLab Managed App.
However, since certificate-based integration with Kubernetes clusters is deprecated in GitLab, the metrics functionality in GitLab that relies on Prometheus is also deprecated. This includes the metrics visualizations in dashboards. GitLab is working to develop a single user experience based on <a href="https://about.gitlab.com/press/releases/2021-12-14-gitlab-acquires-opstrace-to-expand-its-devops-platform-with-open-source-observability-solution.html">Opstrace</a>. An <a href="https://gitlab.com/groups/gitlab-org/-/epics/6976">issue exists</a> for you to follow work on the Opstrace integration.
</description>
    <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Tracing in GitLab</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#tracing-in-gitlab</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#tracing-in-gitlab</link> 
    <description>Tracing in GitLab is an integration with Jaeger, an open-source end-to-end distributed tracing system. GitLab users can navigate to their Jaeger instance to gain insight into the performance of a deployed application, tracking each function or microservice that handles a given request. Tracing in GitLab is deprecated in GitLab 14.7, and scheduled for removal in 15.0. To track work on a possible replacement, see the issue for <a href="https://gitlab.com/groups/gitlab-org/-/epics/6976">Opstrace integration with GitLab</a>.
</description>
    <pubDate>Sat, 22 Jan 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>GraphQL API legacyMode argument for Runner status</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#graphql-api-legacymode-argument-for-runner-status</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#graphql-api-legacymode-argument-for-runner-status</link> 
    <description>The `legacyMode` argument to the `status` field in `RunnerType` will be rendered non-functional in the 16.0 release
as part of the deprecations details in the <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/351109">issue</a>.

In GitLab 16.0 and later, the `status` field will act as if `legacyMode` is null. The `legacyMode` argument will
be present during the 16.x cycle to avoid breaking the API signature, and will be removed altogether in the
17.0 release.
</description>
    <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>PostgreSQL 12 deprecated</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#postgresql-12-deprecated</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#postgresql-12-deprecated</link> 
    <description>Support for PostgreSQL 12 is scheduled for removal in GitLab 16.0.
In GitLab 16.0, PostgreSQL 13 becomes the minimum required PostgreSQL version.

PostgreSQL 12 will be supported for the full GitLab 15 release cycle.
PostgreSQL 13 will also be supported for instances that want to upgrade prior to GitLab 16.0.

Upgrading to PostgreSQL 13 is not yet supported for GitLab instances with Geo enabled. Geo support for PostgreSQL 13 will be announced in a minor release version of GitLab 15, after the process is fully supported and validated. For more information, read the Geo related verifications on the <a href="https://gitlab.com/groups/gitlab-org/-/epics/3832">support epic for PostgreSQL 13</a>.
</description>
    <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>CiCdSettingsUpdate mutation renamed to ProjectCiCdSettingsUpdate</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#cicdsettingsupdate-mutation-renamed-to-projectcicdsettingsupdate</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#cicdsettingsupdate-mutation-renamed-to-projectcicdsettingsupdate</link> 
    <description>The `CiCdSettingsUpdate` mutation was renamed to `ProjectCiCdSettingsUpdate` in GitLab 15.0.
The `CiCdSettingsUpdate` mutation will be removed in GitLab 16.0.
Any user scripts that use the `CiCdSettingsUpdate` mutation must be updated to use `ProjectCiCdSettingsUpdate`
instead.
</description>
    <pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Outdated indices of Advanced Search migrations</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#outdated-indices-of-advanced-search-migrations</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#outdated-indices-of-advanced-search-migrations</link> 
    <description>As Advanced Search migrations usually require support multiple code paths for a long period of time, it’s important to clean those up when we safely can. We use GitLab major version upgrades as a safe time to remove backward compatibility for indices that have not been fully migrated. See the <a href="https://docs.gitlab.com/ee/update/index.html#upgrading-to-a-new-major-version">upgrade documentation</a> for details.
</description>
    <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Out-of-the-box SAST support for Java 8</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#out-of-the-box-sast-support-for-java-8</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#out-of-the-box-sast-support-for-java-8</link> 
    <description>The <a href="https://gitlab.com/gitlab-org/security-products/analyzers/spotbugs">GitLab SAST SpotBugs analyzer</a> scans <a href="https://docs.gitlab.com/ee/user/application_security/sast/#supported-languages-and-frameworks">Java, Scala, Groovy, and Kotlin code</a> for security vulnerabilities.
For technical reasons, the analyzer must first compile the code before scanning.
Unless you use the <a href="https://docs.gitlab.com/ee/user/application_security/sast/#pre-compilation">pre-compilation strategy</a>, the analyzer attempts to automatically compile your project's code.

In GitLab versions prior to 15.0, the analyzer image includes Java 8 and Java 11 runtimes to facilitate compilation.

In GitLab 15.0, we will:

- Remove Java 8 from the analyzer image to reduce the size of the image.
- Add Java 17 to the analyzer image to make it easier to compile with Java 17.

If you rely on Java 8 being present in the analyzer environment, you must take action as detailed in the <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352549#breaking-change">deprecation issue for this change</a>.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Elasticsearch 6.8</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#elasticsearch-68</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#elasticsearch-68</link> 
    <description>Elasticsearch 6.8 is deprecated in GitLab 14.8 and scheduled for removal in GitLab 15.0.
Customers using Elasticsearch 6.8 need to upgrade their Elasticsearch version to 7.x prior to upgrading to GitLab 15.0.
We recommend using the latest version of Elasticsearch 7 to benefit from all Elasticsearch improvements.

Elasticsearch 6.8 is also incompatible with Amazon OpenSearch, which we <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/327560">plan to support in GitLab 15.0</a>.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Deprecate legacy Gitaly configuration methods</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#deprecate-legacy-gitaly-configuration-methods</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#deprecate-legacy-gitaly-configuration-methods</link> 
    <description>Using environment variables `GIT_CONFIG_SYSTEM` and `GIT_CONFIG_GLOBAL` to configure Gitaly is <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352609">deprecated</a>.
These variables are being replaced with standard <a href="https://docs.gitlab.com/ee/administration/gitaly/reference.html">`config.toml` Gitaly configuration</a>.

GitLab instances that use `GIT_CONFIG_SYSTEM` and `GIT_CONFIG_GLOBAL` to configure Gitaly should switch to configuring using
`config.toml`.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>GraphQL ID and GlobalID compatibility</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#graphql-id-and-globalid-compatibility</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#graphql-id-and-globalid-compatibility</link> 
    <description>We are removing a non-standard extension to our GraphQL processor, which we added for backwards compatibility. This extension modifies the validation of GraphQL queries, allowing the use of the `ID` type for arguments where it would normally be rejected.
Some arguments originally had the type `ID`. These were changed to specific
kinds of `ID`. This change may be a breaking change if you:

- Use GraphQL.
- Use the `ID` type for any argument in your query signatures.

Some field arguments still have the `ID` type. These are typically for
IID values, or namespace paths. An example is `Query.project(fullPath: ID!)`.

For a list of affected and unaffected field arguments,
see the <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352832">deprecation issue</a>.

You can test if this change affects you by validating
your queries locally, using schema data fetched from a GitLab server.
You can do this by using the GraphQL explorer tool for the relevant GitLab
instance. For example: `https://gitlab.com/-/graphql-explorer`.

For example, the following query illustrates the breaking change:

```graphql
# a query using the deprecated type of Query.issue(id:)
# WARNING: This will not work after GitLab 15.0
query($id: ID!) {
  deprecated: issue(id: $id) {
    title, description
  }
}
```

The query above will not work after GitLab 15.0 is released, because the type
of `Query.issue(id:)` is actually `IssueID!`.

Instead, you should use one of the following two forms:

```graphql
# This will continue to work
query($id: IssueID!) {
  a: issue(id: $id) {
    title, description
  }
  b: issue(id: "gid://gitlab/Issue/12345") {
    title, description
  }
}
```

This query works now, and will continue to work after GitLab 15.0.
You should convert any queries in the first form (using `ID` as a named type in the signature)
to one of the other two forms (using the correct appropriate type in the signature, or using
an inline argument expression).
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Support for gRPC-aware proxy deployed between Gitaly and rest of GitLab</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#support-for-grpc-aware-proxy-deployed-between-gitaly-and-rest-of-gitlab</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#support-for-grpc-aware-proxy-deployed-between-gitaly-and-rest-of-gitlab</link> 
    <description>Although not recommended or documented, it was possible to deploy a gRPC-aware proxy between Gitaly and
the rest of GitLab. For example, NGINX and Envoy. The ability to deploy a gRPC-aware proxy is
<a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352517">deprecated</a>. If you currently use a gRPC-aware proxy for
Gitaly connections, you should change your proxy configuration to use TCP or TLS proxying (OSI layer 4) instead.

Gitaly Cluster became incompatible with gRPC-aware proxies in GitLab 13.12. Now all GitLab installations will be incompatible with
gRPC-aware proxies, even without Gitaly Cluster.

By sending some of our internal RPC traffic through a custom protocol (instead of gRPC) we
increase throughput and reduce Go garbage collection latency. For more information, see
the <a href="https://gitlab.com/groups/gitlab-com/gl-infra/-/epics/463">relevant epic</a>.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`started` iterations API field</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#started-iterations-api-field</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#started-iterations-api-field</link> 
    <description>The `started` field in the <a href="https://docs.gitlab.com/ee/api/iterations.html#list-project-iterations">iterations API</a> is being deprecated and will be removed in GitLab 15.0. This field is being replaced with the `current` field (already available) which aligns with the naming for other time-based entities, such as milestones.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Container Network and Host Security</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#container-network-and-host-security</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#container-network-and-host-security</link> 
    <description>All functionality related to GitLab's Container Network Security and Container Host Security categories is deprecated in GitLab 14.8 and scheduled for removal in GitLab 15.0. Users who need a replacement for this functionality are encouraged to evaluate the following open source projects as potential solutions that can be installed and managed outside of GitLab: <a href="https://gitlab.com/apparmor/apparmor">AppArmor</a>, <a href="https://github.com/cilium/cilium">Cilium</a>, <a href="https://github.com/falcosecurity/falco">Falco</a>, <a href="https://github.com/fluent/fluentd">FluentD</a>, <a href="https://kubernetes.io/docs/concepts/security/pod-security-admission/">Pod Security Admission</a>. To integrate these technologies into GitLab, add the desired Helm charts into your copy of the <a href="https://docs.gitlab.com/ee/user/clusters/management_project_template.html">Cluster Management Project Template</a>. Deploy these Helm charts in production by calling commands through GitLab <a href="https://docs.gitlab.com/ee/user/clusters/agent/ci_cd_workflow.html">CI/CD</a>.

As part of this change, the following specific capabilities within GitLab are now deprecated, and are scheduled for removal in GitLab 15.0:

- The **Security &amp; Compliance > Threat Monitoring** page.
- The `Network Policy` security policy type, as found on the **Security &amp; Compliance > Policies** page.
- The ability to manage integrations with the following technologies through GitLab: AppArmor, Cilium, Falco, FluentD, and Pod Security Policies.
- All APIs related to the above functionality.

For additional context, or to provide feedback regarding this change, please reference our open <a href="https://gitlab.com/groups/gitlab-org/-/epics/7476">deprecation issue</a>.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Vulnerability Check</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#vulnerability-check</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#vulnerability-check</link> 
    <description>The vulnerability check feature is deprecated in GitLab 14.8 and scheduled for removal in GitLab 15.0. We encourage you to migrate to the new security approvals feature instead. You can do so by navigating to **Security &amp; Compliance > Policies** and creating a new Scan Result Policy.

The new security approvals feature is similar to vulnerability check. For example, both can require approvals for MRs that contain security vulnerabilities. However, security approvals improve the previous experience in several ways:

- Users can choose who is allowed to edit security approval rules. An independent security or compliance team can therefore manage rules in a way that prevents development project maintainers from modifying the rules.
- Multiple rules can be created and chained together to allow for filtering on different severity thresholds for each scanner type.
- A two-step approval process can be enforced for any desired changes to security approval rules.
- A single set of security policies can be applied to multiple development projects to allow for ease in maintaining a single, centralized ruleset.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Deprecate feature flag PUSH_RULES_SUPERSEDE_CODE_OWNERS</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#deprecate-feature-flag-push_rules_supersede_code_owners</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#deprecate-feature-flag-push_rules_supersede_code_owners</link> 
    <description>The feature flag `PUSH_RULES_SUPERSEDE_CODE_OWNERS` is being removed in GitLab 15.0. Upon its removal, push rules will supersede CODEOWNERS. The CODEOWNERS feature will no longer be available for access control.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>REST and GraphQL API Runner usage of `active` replaced by `paused`</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#rest-and-graphql-api-runner-usage-of-active-replaced-by-paused</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#rest-and-graphql-api-runner-usage-of-active-replaced-by-paused</link> 
    <description>Occurrences of the `active` identifier in the GitLab Runner REST and GraphQL API endpoints will be
renamed to `paused` in GitLab 16.0, namely:

- GraphQL API:
  - the `CiRunner` property;
  - the `RunnerUpdateInput` input type for the `runnerUpdate` mutation;
  - the `runners` and `Group.runners` queries.
- REST API:
  - endpoints taking or returning `active` properties, such as:
    - `GET /runners`
    - `GET /runners/all`
    - `GET /runners/:id` / `PUT /runners/:id`
    - `PUT --form "active=false" /runners/:runner_id`
    - `GET /projects/:id/runners` / `POST /projects/:id/runners`
    - `GET /groups/:id/runners`

The 16.0 release of the GitLab Runner will start using the `paused` property when registering runners, and therefore
will only be compatible with GitLab 16.0 and later. Until 16.0, GitLab will accept the deprecated `active` flag from
existing runners.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>REST API endpoint to list group runners no longer accepts `project_type` value for `type` argument</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#rest-api-endpoint-to-list-group-runners-no-longer-accepts-project_type-value-for-type-argument</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#rest-api-endpoint-to-list-group-runners-no-longer-accepts-project_type-value-for-type-argument</link> 
    <description>The `GET /groups/:id/runners?type=project_type` endpoint will be removed in GitLab 16.0. The endpoint always returned an empty collection.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>REST API Runner will not accept `status` filter values of `active` or `paused`</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#rest-api-runner-will-not-accept-status-filter-values-of-active-or-paused</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#rest-api-runner-will-not-accept-status-filter-values-of-active-or-paused</link> 
    <description>The GitLab Runner REST endpoints will stop accepting `paused` or `active` as a status value in GitLab 16.0.

A runner's status will only relate to runner contact status, such as: `online`, `offline`.
Status values `paused` or `active` will no longer be accepted and will be replaced by the `paused` query parameter.

When checking for paused runners, API users are advised to specify `paused=true` as the query parameter.
When checking for active runners, specify `paused=false`.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>SAST analyzer consolidation and CI/CD template changes</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#sast-analyzer-consolidation-and-cicd-template-changes</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#sast-analyzer-consolidation-and-cicd-template-changes</link> 
    <description>GitLab SAST uses various <a href="https://docs.gitlab.com/ee/user/application_security/sast/analyzers/">analyzers</a> to scan code for vulnerabilities.

We are reducing the number of analyzers used in GitLab SAST as part of our long-term strategy to deliver a better and more consistent user experience.
Streamlining the set of analyzers will also enable faster <a href="https://about.gitlab.com/handbook/values/#iteration">iteration</a>, better <a href="https://about.gitlab.com/handbook/values/#results">results</a>, and greater <a href="https://about.gitlab.com/handbook/values/#results">efficiency</a> (including a reduction in CI runner usage in most cases).

In GitLab 15.2, GitLab SAST will no longer use the following analyzers:

- <a href="https://gitlab.com/gitlab-org/security-products/analyzers/eslint">ESLint</a> (JavaScript, TypeScript, React)
- <a href="https://gitlab.com/gitlab-org/security-products/analyzers/gosec">Gosec</a> (Go)
- <a href="https://gitlab.com/gitlab-org/security-products/analyzers/bandit">Bandit</a> (Python)

NOTE:
This change was originally planned for GitLab 15.0 and has been postponed.

These analyzers will be removed from the <a href="https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml">GitLab-managed SAST CI/CD template</a> and replaced with the <a href="https://gitlab.com/gitlab-org/security-products/analyzers/semgrep">Semgrep-based analyzer</a>.
They will no longer receive routine updates, except for security issues.
We will not delete container images previously published for these analyzers; any such change would be announced as a <a href="https://about.gitlab.com/handbook/marketing/blog/release-posts/#deprecations-removals-and-breaking-changes">deprecation, removal, or breaking change announcement</a>.

We will also remove Java from the scope of the <a href="https://gitlab.com/gitlab-org/security-products/analyzers/spotbugs">SpotBugs</a> analyzer and replace it with the <a href="https://gitlab.com/gitlab-org/security-products/analyzers/semgrep">Semgrep-based analyzer</a>.
This change will make it simpler to scan Java code; compilation will no longer be required.
This change will be reflected in the automatic language detection portion of the <a href="https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/SAST.gitlab-ci.yml">GitLab-managed SAST CI/CD template</a>.

If you applied customizations to any of the affected analyzers or if you currently disable the Semgrep analyzer in your pipelines, you must take action as detailed in the <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352554#breaking-change">deprecation issue for this change</a>.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>SAST support for .NET 2.1</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#sast-support-for-net-21</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#sast-support-for-net-21</link> 
    <description>The GitLab SAST Security Code Scan analyzer scans .NET code for security vulnerabilities.
For technical reasons, the analyzer must first build the code to scan it.

In GitLab versions prior to 15.0, the default analyzer image (version 2) includes support for:

- .NET 2.1
- .NET 3.0 and .NET Core 3.0
- .NET Core 3.1
- .NET 5.0

In GitLab 15.0, we will change the default major version for this analyzer from version 2 to version 3. This change:

- Adds <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/350408">severity values for vulnerabilities</a> along with <a href="https://gitlab.com/gitlab-org/security-products/analyzers/security-code-scan/-/blob/master/CHANGELOG.md">other new features and improvements</a>.
- Removes .NET 2.1 support.
- Adds support for .NET 6.0, Visual Studio 2019, and Visual Studio 2022.

Version 3 was <a href="https://about.gitlab.com/releases/2021/12/22/gitlab-14-6-released/#sast-support-for-net-6">announced in GitLab 14.6</a> and made available as an optional upgrade.

If you rely on .NET 2.1 support being present in the analyzer image by default, you must take action as detailed in the <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352553#breaking-change">deprecation issue for this change</a>.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Secure and Protect analyzer images published in new location</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#secure-and-protect-analyzer-images-published-in-new-location</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#secure-and-protect-analyzer-images-published-in-new-location</link> 
    <description>GitLab uses various <a href="https://docs.gitlab.com/ee/user/application_security/terminology/#analyzer">analyzers</a> to <a href="https://docs.gitlab.com/ee/user/application_security/">scan for security vulnerabilities</a>.
Each analyzer is distributed as a container image.

Starting in GitLab 14.8, new versions of GitLab Secure and Protect analyzers are published to a new registry location under `registry.gitlab.com/security-products`.

We will update the default value of <a href="https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib/gitlab/ci/templates/Security">GitLab-managed CI/CD templates</a> to reflect this change:

- For all analyzers except Container Scanning, we will update the variable `SECURE_ANALYZERS_PREFIX` to the new image registry location.
- For Container Scanning, the default image address is already updated. There is no `SECURE_ANALYZERS_PREFIX` variable for Container Scanning.

In a future release, we will stop publishing images to `registry.gitlab.com/gitlab-org/security-products/analyzers`.
Once this happens, you must take action if you manually pull images and push them into a separate registry. This is commonly the case for <a href="https://docs.gitlab.com/ee/user/application_security/offline_deployments/index.html">offline deployments</a>.
Otherwise, you won't receive further updates.

See the <a href="https://gitlab.com/gitlab-org/gitlab/-/issues/352564">deprecation issue</a> for more details.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Secure and Protect analyzer major version update</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#secure-and-protect-analyzer-major-version-update</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#secure-and-protect-analyzer-major-version-update</link> 
    <description>The Secure and Protect stages will be bumping the major versions of their analyzers in tandem with the GitLab 15.0 release. This major bump will enable a clear delineation for analyzers, between:

- Those released prior to May 22, 2022, which generate reports that _are not_ subject to stringent schema validation.
- Those released after May 22, 2022, which generate reports that _are_ subject to stringent schema validation.

If you are not using the default inclusion templates, or have pinned your analyzer version(s) you will need to update your CI/CD job definition to either remove the pinned version or to update the latest major version.
Users of GitLab 12.0-14.10 will continue to experience analyzer updates as normal until the release of GitLab 15.0, following which all newly fixed bugs and newly released features in the new major versions of the analyzers will not be available in the deprecated versions because we do not backport bugs and new features as per our <a href="https://docs.gitlab.com/ee/policy/maintenance.html">maintenance policy</a>. As required security patches will be backported within the latest 3 minor releases.
Specifically, the following are being deprecated and will no longer be updated after 15.0 GitLab release:

- API Security: version 1
- Container Scanning: version 4
- Coverage-guided fuzz testing: version 2
- Dependency Scanning: version 2
- Dynamic Application Security Testing (DAST): version 2
- Infrastructure as Code (IaC) Scanning: version 1
- License Scanning: version 3
- Secret Detection: version 3
- Static Application Security Testing (SAST): version 2 of <a href="https://docs.gitlab.com/ee/user/application_security/sast/#supported-languages-and-frameworks">all analyzers</a>, except `gosec` which is currently at version 3
  - `bandit`: version 2
  - `brakeman`: version 2
  - `eslint`: version 2
  - `flawfinder`: version 2
  - `gosec`: version 3
  - `kubesec`: version 2
  - `mobsf`: version 2
  - `nodejs-scan`: version 2
  - `phpcs-security-audit`: version 2
  - `pmd-apex`: version 2
  - `security-code-scan`: version 2
  - `semgrep`: version 2
  - `sobelow`: version 2
  - `spotbugs`: version 2
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Test coverage project CI/CD setting</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#test-coverage-project-cicd-setting</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#test-coverage-project-cicd-setting</link> 
    <description>To simplify setting a test coverage pattern, in GitLab 15.0 the
<a href="https://docs.gitlab.com/ee/ci/pipelines/settings.html#add-test-coverage-results-using-project-settings-removed">project setting for test coverage parsing</a>
is being removed.

Instead, using the project’s `.gitlab-ci.yml`, provide a regular expression with the `coverage` keyword to set
testing coverage results in merge requests.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Querying Usage Trends via the `instanceStatisticsMeasurements` GraphQL node</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#querying-usage-trends-via-the-instancestatisticsmeasurements-graphql-node</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#querying-usage-trends-via-the-instancestatisticsmeasurements-graphql-node</link> 
    <description>The `instanceStatisticsMeasurements` GraphQL node has been renamed to `usageTrendsMeasurements` in 13.10 and the old field name has been marked as deprecated. To fix the existing GraphQL queries, replace `instanceStatisticsMeasurements` with `usageTrendsMeasurements`.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>OAuth tokens without expiration</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#oauth-tokens-without-expiration</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#oauth-tokens-without-expiration</link> 
    <description>By default, all new applications expire access tokens after 2 hours. In GitLab 14.2 and earlier, OAuth access tokens
had no expiration. In GitLab 15.0, an expiry will be automatically generated for any existing token that does not
already have one.

You should <a href="https://docs.gitlab.com/ee/integration/oauth_provider.html#expiring-access-tokens">opt in</a> to expiring
tokens before GitLab 15.0 is released:

1. Edit the application.
1. Select **Expire access tokens** to enable them. Tokens must be revoked or they don’t expire.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`projectFingerprint` in `PipelineSecurityReportFinding` GraphQL</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#projectfingerprint-in-pipelinesecurityreportfinding-graphql</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#projectfingerprint-in-pipelinesecurityreportfinding-graphql</link> 
    <description>The `projectFingerprint` field in the <a href="https://docs.gitlab.com/ee/api/graphql/reference/index.html#pipelinesecurityreportfinding">PipelineSecurityReportFinding</a>
GraphQL object is being deprecated. This field contains a "fingerprint" of security findings used to determine uniqueness.
The method for calculating fingerprints has changed, resulting in different values. Going forward, the new values will be
exposed in the UUID field. Data previously available in the projectFingerprint field will eventually be removed entirely.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Retire-JS Dependency Scanning tool</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#retire-js-dependency-scanning-tool</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#retire-js-dependency-scanning-tool</link> 
    <description>As of 14.8 the retire.js job is being deprecated from Dependency Scanning. It will continue to be included in our CI/CD template while deprecated. We are removing retire.js from Dependency Scanning on May 22, 2022 in GitLab 15.0. JavaScript scanning functionality will not be affected as it is still being covered by Gemnasium.

If you have explicitly excluded retire.js using DS_EXCLUDED_ANALYZERS you will need to clean up (remove the reference) in 15.0. If you have customized your pipeline's Dependency Scanning configuration related to the `retire-js-dependency_scanning` job you will want to switch to gemnasium-dependency_scanning before the removal in 15.0, to prevent your pipeline from failing. If you have not used the DS_EXCLUDED_ANALYZERS to reference retire.js, or customized your template specifically for retire.js, you will not need to take action.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Optional enforcement of PAT expiration</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#optional-enforcement-of-pat-expiration</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#optional-enforcement-of-pat-expiration</link> 
    <description>The feature to disable enforcement of PAT expiration is unusual from a security perspective.
We have become concerned that this unusual feature could create unexpected behavior for users.
Unexpected behavior in a security feature is inherently dangerous, so we have decided to remove this feature.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Optional enforcement of SSH expiration</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#optional-enforcement-of-ssh-expiration</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#optional-enforcement-of-ssh-expiration</link> 
    <description>The feature to disable enforcement of SSH expiration is unusual from a security perspective.
We have become concerned that this unusual feature could create unexpected behavior for users.
Unexpected behavior in a security feature is inherently dangerous, so we have decided to remove this feature.
</description>
    <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>OAuth implicit grant</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#oauth-implicit-grant</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#oauth-implicit-grant</link> 
    <description>The OAuth implicit grant authorization flow will be removed in our next major release, GitLab 15.0. Any applications that use OAuth implicit grant should switch to alternative <a href="https://docs.gitlab.com/ee/api/oauth2.html">supported OAuth flows</a>.
</description>
    <pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Toggle notes confidentiality on APIs</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#toggle-notes-confidentiality-on-apis</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#toggle-notes-confidentiality-on-apis</link> 
    <description>Toggling notes confidentiality with REST and GraphQL APIs is being deprecated. Updating notes confidential attribute is no longer supported by any means. We are changing this to simplify the experience and prevent private information from being unintentionally exposed.
</description>
    <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>htpasswd Authentication for the Container Registry</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#htpasswd-authentication-for-the-container-registry</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#htpasswd-authentication-for-the-container-registry</link> 
    <description>The Container Registry supports <a href="https://gitlab.com/gitlab-org/container-registry/-/blob/master/docs/configuration.md#auth">authentication</a> with `htpasswd`. It relies on an <a href="https://httpd.apache.org/docs/2.4/programs/htpasswd.html">Apache `htpasswd` file</a>, with passwords hashed using `bcrypt`.

Since it isn't used in the context of GitLab (the product), `htpasswd` authentication will be deprecated in GitLab 14.9 and removed in GitLab 15.0.
</description>
    <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>GitLab self-monitoring project</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#gitlab-self-monitoring-project</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#gitlab-self-monitoring-project</link> 
    <description>GitLab self-monitoring gives administrators of self-hosted GitLab instances the tools to monitor the health of their instances. This feature is deprecated in GitLab 14.9, and is scheduled for removal in 16.0.
</description>
    <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>user_email_lookup_limit API field</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#user_email_lookup_limit-api-field</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#user_email_lookup_limit-api-field</link> 
    <description>The `user_email_lookup_limit` <a href="https://docs.gitlab.com/ee/api/settings.html">API field</a> is deprecated and will be removed in GitLab 15.0. Until GitLab 15.0, `user_email_lookup_limit` is aliased to `search_rate_limit` and existing workflows will continue to work.

Any API calls attempting to change the rate limits for `user_email_lookup_limit` should use `search_rate_limit` instead.
</description>
    <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Background upload for object storage</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#background-upload-for-object-storage</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#background-upload-for-object-storage</link> 
    <description>To reduce the overall complexity and maintenance burden of GitLab's <a href="https://docs.gitlab.com/ee/administration/object_storage.html">object storage feature</a>, support for using `background_upload` to upload files is deprecated and will be fully removed in GitLab 15.0.

This impacts a small subset of object storage providers:

- **OpenStack** Customers using OpenStack need to change their configuration to use the S3 API instead of Swift.
- **RackSpace** Customers using RackSpace-based object storage need to migrate data to a different provider.

GitLab will publish additional guidance to assist affected customers in migrating.
</description>
    <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>GraphQL permissions change for Package settings</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#graphql-permissions-change-for-package-settings</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#graphql-permissions-change-for-package-settings</link> 
    <description>The GitLab Package stage offers a Package Registry, Container Registry, and Dependency Proxy to help you manage all of your dependencies using GitLab. Each of these product categories has a variety of settings that can be adjusted using the API.

The permissions model for GraphQL is being updated. After 15.0, users with the Guest, Reporter, and Developer role can no longer update these settings:

- <a href="https://docs.gitlab.com/ee/api/graphql/reference/#packagesettings">Package Registry settings</a>
- <a href="https://docs.gitlab.com/ee/api/graphql/reference/#containerexpirationpolicy">Container Registry cleanup policy</a>
- <a href="https://docs.gitlab.com/ee/api/graphql/reference/#dependencyproxyimagettlgrouppolicy">Dependency Proxy time-to-live policy</a>
- <a href="https://docs.gitlab.com/ee/api/graphql/reference/#dependencyproxysetting">Enabling the Dependency Proxy for your group</a>
</description>
    <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Permissions change for downloading Composer dependencies</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#permissions-change-for-downloading-composer-dependencies</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#permissions-change-for-downloading-composer-dependencies</link> 
    <description>The GitLab Composer repository can be used to push, search, fetch metadata about, and download PHP dependencies. All these actions require authentication, except for downloading dependencies.

Downloading Composer dependencies without authentication is deprecated in GitLab 14.9, and will be removed in GitLab 15.0. Starting with GitLab 15.0, you must authenticate to download Composer dependencies.
</description>
    <pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>apiFuzzingCiConfigurationCreate GraphQL mutation</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#apifuzzingciconfigurationcreate-graphql-mutation</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#apifuzzingciconfigurationcreate-graphql-mutation</link> 
    <description>The API Fuzzing configuration snippet is now being generated client-side and does not require an
API request anymore. We are therefore deprecating the `apiFuzzingCiConfigurationCreate` mutation
which isn't being used in GitLab anymore.
</description>
    <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>bundler-audit Dependency Scanning tool</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#bundler-audit-dependency-scanning-tool</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#bundler-audit-dependency-scanning-tool</link> 
    <description>As of 14.6 bundler-audit is being deprecated from Dependency Scanning. It will continue to be in our CI/CD template while deprecated. We are removing bundler-audit from Dependency Scanning on May 22, 2022 in 15.0. After this removal Ruby scanning functionality will not be affected as it is still being covered by Gemnasium.

If you have explicitly excluded bundler-audit using DS_EXCLUDED_ANALYZERS you will need to clean up (remove the reference) in 15.0. If you have customized your pipeline's Dependency Scanning configuration, for example to edit the `bundler-audit-dependency_scanning` job, you will want to switch to gemnasium-dependency_scanning before removal in 15.0, to prevent your pipeline from failing. If you have not used the DS_EXCLUDED_ANALYZERS to reference bundler-audit, or customized your template specifically for bundler-audit, you will not need to take action.
</description>
    <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Legacy approval status names from License Compliance API</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#legacy-approval-status-names-from-license-compliance-api</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#legacy-approval-status-names-from-license-compliance-api</link> 
    <description>We deprecated legacy names for approval status of license policy (blacklisted, approved) in the `managed_licenses` API but they are still used in our API queries and responses. They will be removed in 15.0.

If you are using our License Compliance API you should stop using the `approved` and `blacklisted` query parameters, they are now `allowed` and `denied`. In 15.0 the responses will also stop using `approved` and `blacklisted` so you need to adjust any of your custom tools to use the old and new values so they do not break with the 15.0 release.
</description>
    <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>CI/CD job name length limit</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#cicd-job-name-length-limit</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#cicd-job-name-length-limit</link> 
    <description>In GitLab 15.0 we are going to limit the number of characters in CI/CD job names to 255. Any pipeline with job names that exceed the 255 character limit will stop working after the 15.0 release.
</description>
    <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>`type` and `types` keyword in CI/CD configuration</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#type-and-types-keyword-in-cicd-configuration</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#type-and-types-keyword-in-cicd-configuration</link> 
    <description>The `type` and `types` CI/CD keywords will be removed in GitLab 15.0. Pipelines that use these keywords will stop working, so you must switch to `stage` and `stages`, which have the same behavior.
</description>
    <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>OmniAuth Kerberos gem</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#omniauth-kerberos-gem</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#omniauth-kerberos-gem</link> 
    <description>The `omniauth-kerberos` gem will be removed in our next major release, GitLab 15.0.

This gem has not been maintained and has very little usage. We therefore plan to remove support for this authentication method and recommend using the Kerberos <a href="https://en.wikipedia.org/wiki/SPNEGO">SPNEGO</a> integration instead. You can follow the <a href="https://docs.gitlab.com/ee/integration/kerberos.html#upgrading-from-password-based-to-ticket-based-kerberos-sign-ins">upgrade instructions</a> to upgrade from the `omniauth-kerberos` integration to the supported one.

Note that we are not deprecating the Kerberos SPNEGO integration, only the old password-based Kerberos integration.
</description>
    <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Audit events for repository push events</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#audit-events-for-repository-push-events</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#audit-events-for-repository-push-events</link> 
    <description>Audit events for <a href="https://docs.gitlab.com/ee/administration/audit_events.html#removed-events">repository events</a> are now deprecated and will be removed in GitLab 15.0.

These events have always been disabled by default and had to be manually enabled with a
feature flag. Enabling them can cause too many events to be generated which can
dramatically slow down GitLab instances. For this reason, they are being removed.
</description>
    <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>Legacy database configuration</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#legacy-database-configuration</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#legacy-database-configuration</link> 
    <description>The syntax of <a href="https://docs.gitlab.com/omnibus/settings/database.html">GitLabs database</a>
configuration located in `database.yml` is changing and the legacy format is deprecated. The legacy format
supported using a single PostgreSQL adapter, whereas the new format is changing to support multiple databases. The `main:` database needs to be defined as a first configuration item.

This deprecation mainly impacts users compiling GitLab from source because Omnibus will handle this configuration automatically.
</description>
    <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
  </item>

  <item>
    <title>GitLab Serverless</title> 
    <guid>https://docs.gitlab.com/ee/update/deprecations.html#gitlab-serverless</guid> 
    <link>https://docs.gitlab.com/ee/update/deprecations.html#gitlab-serverless</link> 
    <description><a href="https://docs.gitlab.com/ee/user/project/clusters/serverless/">GitLab Serverless</a> is a feature set to support Knative-based serverless development with automatic deployments and monitoring.

We decided to remove the GitLab Serverless features as they never really resonated with our users. Besides, given the continuous development of Kubernetes and Knative, our current implementations do not even work with recent versions.
</description>
    <pubDate>Wed, 22 Sep 2021 00:00:00 +0000</pubDate>
  </item>


</channel>
</rss>
