---
layout: handbook-page-toc
html_lang: "ja"
title: "リモートワークで非同期コミュニケーションを活用する方法"
canonical_path: "/handbook/culture/all-remote/asynchronous/"
description: "リモートワーク環境で非同期的に仕事やコミュニケーションをとるために必要なすべてを網羅したガイドブックです。"
twitter_image: "/images/opengraph/all-remote.jpg"
twitter_image_alt: "GitLab リモート・チーム・グラフィックス"
twitter_site: "@gitlab"
twitter_creator: "@gitlab"
---

## 目次 {#on-this-page}
{:.no_toc}

- TOC
{:toc}
## はじめかた {#how-to-get-started-with-async}

![GitLabカスタマー・パス・図解](/images/all-remote/gitlab-customer-path.jpg){: .medium.center}

GitLabは、オールリモートが[未来の働き方](https://about.gitlab.com/company/culture/all-remote/vision/)だと考えています。リモートワークを受け入れるための最初のステップは、非同期での業務フローとコミュニケーション*と*、非同期を**うまく活用する**方法を理解することです。

### 非同期で働くとは？ {#what-is-asynchronous-work}

私たちは、[リモート・ブログ](https://remote.com/blog/elements-sustainable-remote-work-culture)の[Preston W.](https://twitter.com/PrestonWick)の説明を気に入っています。

> 非同期作業とは、シンプルな概念です。持っているものでできる限りのことをし、すべてを文書化し、プロジェクトのオーナーシップを次の人に移し、それから他のことに取り掛かる。"

[非同期型ワークの人気が高まっている](https://hbr.org/2022/01/11-trends-that-will-shape-work-in-2022-and-beyond)のは、従業員*と*雇用者の両方に大きなメリットがあるからです。

## 非同期で働くの6大メリット {#six-major-benefits-of-asynchronous-working}

### 1. 非同期型の仕事は自律性、権限、主体性をもたらす {#_1-asynchronous-work-provides-autonomy-empowerment-and-agency}

非同期型の会社は社員に[権限を移譲](/handbook/values/#give-agency)して、各自のペースでプロジェクトを進めます。GitLabでは、[時間ではなく、結果を測定する](/handbook/values/#measure-results-not-hours)のです。最も適した時間に働き、時間に束縛されずに結果をだすということです。

毎月いろいろ国に[旅行](/company/culture/all-remote/people/#travelers)したり、[家族](/company/culture/all-remote/people/#worklife-harmony)と快適に午後を過ごすのも、働く人の[権利](/blog/2019/12/10/how-to-build-a-more-productive-remote-team/)です。

当然のことながら[自律した人材](/handbook/leadership/#managers-of-one)にそのような裁量を許すから、[ロイヤリティー](/company/culture/all-remote/benefits/#for-your-organization)、[定着率](/handbook/people-group/people-group-metrics/#team-member-retention)や仕事の質が高まるのです。

さらに徹底するために「[許可をとるな、やりたいことを言え](/handbook/paid-time-off/#a-gitlab-team-members-guide-to-time-off)」という休暇のポリシーを導入しましょう。社員が仕事から離れる際には許可を得る必要がないということです。

オールリモートな職場では、社員にとって[最も充実できる場所で生活し仕事をする](/company/culture/all-remote/people/)ことができます。複数のフロアやオフィスに社員がいる分散オフィス型の企業でも、複数のタイムゾーンが絡む場合は特に、非同期で運用する必要があります。

*[GitLab ぶっちゃけチャンネル](https://youtu.be/cy6WGuzArgY)で、Emna G.氏 [Veamly](https://veamly.com/)社 創業者&CEOと GitLab社の[Darren M.](https://twitter.com/darrenmurph)が、原則非同期で働くことが、ストレス、不安感、メンタルヘルスや健康にあたえる影響について語っています。*

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/cy6WGuzArgY?start=2019" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

非同期で仕事をする方が、効率的でストレスが少なく[組織は成長しやすい](/company/culture/all-remote/scaling/)のです。

### 2. 非同期作業で効率を上げ、生産性を高める {#_2-asynchronous-work-increases-efficiency-and-boosts-productivity}

社員全員は常に[行動することがデフォルト](https://remote.com/blog/why-you-should-be-doing-async-work)であるため、非同期で働くことはとても効率的です.

>「よくあることですが、攻撃する準備が整っていないとか、計画していなかったタスクであるとか、決裁者がオンラインではないとか。このようなとき、成功するチームは、たとえ後でリファクタリングや改善をする必要があったとしても、「待ち」で時間を無駄にしません。まずは実行するのみです。
>
「行動することがデフォルト」は、[Remote](https://remote.com/)社で繰り返し唱えているマントラです。"

### 3. 非同期での仕事はよりインクルーシブである {#_3-asynchronous-work-is-more-inclusive}

非同期に働くの最大のメリットは、[時差のハードルがなくなる](https://www.fastcompany.com/90712513/the-future-of-work-is-asynchronous)ことです。

> GitLabは65カ国に社員がいるのでさまざまなタイムゾーンで働いています。つまりあなたのチームにも全く異なるタイムゾーンにいる人がいる可能性があるということです。自分が起きて仕事をしている間、同僚は睡眠中かもしれません" - Darren M., GitLabのリモート部門責任者

ビジネスは、24時間、どのタイムゾーンでも、ずっと回っています。ある特定のタイムゾーンの時間にあわせてコミュニケーションをさせることは、[機能不全](/handbook/values/#five-dysfunctions)です。

65カ国以上に社員がいる100％リモートの会社なので、[非同期で働く](/handbook/values/#bias-towards-asynchronous-communication)ことは、タイムゾーンの壁を取り除き、GitLabがグローバルに[包括的](/company/culture/inclusion/building-diversity-and-inclusion/)な組織となるために必要なことの一つです。

### 4. 非同期で働けば、ストレスは減り、心は健康になります {#_4-asynchronous-work-alleviates-stress-and-supports-mental-health}

勤務時間中は常に、オンラインであること、作業していること、すぐに返信できること、そのような期待は非常に大きなストレスの原因になります。酷いことに"常につながっている社会"では24時間常にそのようなことが求められており、仕事と私生活の境がなくなりつつあります。

あまり知られていませんが、非同期で働くメリットは、[緊張感がない](/company/culture/all-remote/building-culture/#gratitude-and-transparency)ことです。どの社員もが、いつでも、どんな理由でもオフラインになりえる前提で全員が働いていれば、問い合わせをしたら即座に返信があるという期待を持つことはなくなります。

そうすれば、[心の健康](/company/culture/all-remote/mental-health/)が優先される環境になります。社員は[仕事と私生活に一線を引く](/company/culture/all-remote/mental-health/#be-transparent-about-boundaries)ことができ、ひっきりなしに通知が来たり判断を求められることがなくなります。

GitLab社のリモート責任者[Darren M.](https://gitlab.com/dmurph) は、[theCUBE](https://www.thecube.net/)が主催する[SiliconANGLE メディア](https://siliconangle.com/)で、同社のコンテンツ部門のGMである [Stuart Miniman](https://twitter.com/stu/)からインタビューをうけました。24時間いつでも即答が求められる現代社会において、非同期コミュニケーションは、どういう影響があるのかという質問に、次のように答えました。

> リモートでは、非同期で働く必要があります。だから他の環境よりも、メンタルが健全でいられます。
>
> 非同期で働くのであれば、誰かがオンラインではなくても独りで仕事を進められます。メッセージに即答し続ける無限ループという負担がなくなります。
>
> 精神衛生上、全員が非同期を受け入れば、邪魔されことなく集中して仕事をすることができます。
>
> 効率化が求められる中、そろそろこれ以上の大量のメッセージ、電子メールや緊急連絡は許されないところまで来ています。弊社はそういう点では少し先に進んでいます。業界全体でも、非同期コミュニケーションを採用し、本来すべき仕事に時間を費やせるようになって欲しいものです。

### 5. 非同期で働けば、きちんと考えぬけて計画的になります {#_5-asynchronous-work-encourages-thoughtfulness-and-intentionality}

同期コミュニケーションの本質的な問題点は締め切りへの意識です。勤務日に出勤時刻と退勤時刻が決められていると、時間内にできるだけたくさんコミュニケーションをしなくてはならないというプレッシャーが生じ、作業時間がなくなってしまいがちです。

[Sahil Lavingia](https://twitter.com/shl) [Gumroad社](https://gumroad.com/) 創業者/CEOは、非同期化することで実現されたメリットをシェアしています。

> フルーリモート化して良かったです。でも本当に良かったのは完全に非同期化したことです。
> 
> Gumroad社で体験した非同期のメリットは下記のとおりです
>
> 続く 👇🏽
> <a href="https://twitter.com/shl/status/1222545212477599751">2020年1月29日</a>
> <hr>
> きちんと考えぬかれてコミュニケーションされるようになります。例えサイトがダウンした時でも、即答を求められることはありません。きちんと考え抜いてからコメントされます。即答即応はされません。そこに劇的なコミュニケーションはありません。
>
> <hr>
>
> 他人に邪魔されないようにスケジュールはブロックされているようなものです。だから前もって計画を立てることができます。また、1時間、1日、1週間と出社しなくても、会社の足手まといになることはありません。代表である私がいなくてもです。
>
> <hr>
>
> 生活に合わせて仕事をするべきです。その逆ではありません。特に新米パパママにとってありがたいことですが、それだけではなく、みんなが日々の幸せと生産性を最大化できるメリットがあります。
>
> <hr>
>
> すべてを文書化しているので、そのようなことが実現できました。すべて個別のテキスト・チャネルで会話をしているので、気になった人は簡単にすべてを見ることができます。また、必要があれば、引き継ぐこともできます。また、会議はなく、すべての数値は公開されているので、[職場での仲間外れ感](https://www.businessinsider.com/how-to-deal-with-fomo-full-time-remote-work-2021-11)はありません。
>
> <hr>
>
> 弊社が提供しているソフトウェアは、キチンとテストされおり驚くほど安定しています。ディプロイをする時に全員が同時にオンラインであることはありません。だから、そうある必要があります。対応すべき障害が起きることはめったにありません。またGumroadの技術的負債は毎週返され続けています。
>
> <hr>
>
> ストレスが少ない職場です。社員のほとんどがSlackをインストールしてさえいません。それでも最高のソフトウェアを出荷し、過去最高のスピードで成長しています。不思議なものですね。

### 6. 非同期作業で知識のギャップを埋める {#_6-asynchronous-work-bridges-the-knowledge-gap}

非同期型の企業は[低コンテクスト文化](/company/culture/all-remote/effective-communication/#understanding-low-context-communication)を採用すべきです。正確でダイレクトなコミュニケーションをすべきです。方針を伝える際は、どのような質問が来るかを予測し、可能な限り多くの補足情報を加えて発信します。受け取り手が睡眠中であることや将来入社する人であることを想定して、補足情報を加えることにより、曖昧さがなくなり誤解が減ります。

このやり方ではメッセージを作成したり編集するのに時間がかかるため、非効率的に感じるかもしれません。しかし長い目で見ると利点があります。GitLabでは、[速度より可用性を重視する](/gitlab-com/www-gitlab-com/merge_requests/30046)のように何年にもわたり意思決定を文書として残してきているので、背景を理解することができます。新入社員は、アーカイブをあさりながら、意思決定の裏にある背景を知ることができるので、[自己学習](/company/culture/all-remote/self-service/)することができます。

同期型の組織では、会議で意思決定されることが多く、ほとんど文書化されることはなく、途中から参加した人は常に事実確認のために無駄な手間を費やしています。さらに重要な決定の後に採用された者は、意思決定の前に変更されたことの背景を理解することができず、知識のギャップが生じ、企業の効率を低下させることになります。

MailChimpの主席エンジニアである[Coda Hale](https://twitter.com/coda) は、組織デザインについて解説した*[Work is Work](https://codahale.com/work-is-work/)*という記事の中で下記のように説明しています。

> 誰が何をしているかを把握したいというリーダーの欲求から、ミーティングや進捗確認といった[失敗需要](https://en.wikipedia.org/wiki/Lean_services#Value_Demand_and_Failure_Demand)(業務フロー上の上流や前工程の失敗の結果追加で仕事の必要性が産まれること)が産まれます。進捗確認をすることは確かに必要ですが、会議を招集したり、Slackでメッセージを送ったり、廊下で人を捕まえたりして、進捗を把握しようとすることは、組織の生産性を大きく低下させる原因となります。
>
> 組織が拡大する中で進捗を把握し続けるベストな方法は、全員が日々の業務の中で進捗を文書として公開し続けることです。上司は、非同期で進捗を読み、必要なときに同期コミュニケーションをして質問やフィードバックをします。
>
> 同期ミーティングは、複雑な問題に対応するためにリアルタイムにコラボレーションしたい時だけにしましょう。同様に、コラボレーションをするのは、同期ミーティングの時だけにしましょう。- [*Coda Hale*](https://twitter.com/coda)

企業が大きくなれば人の出入りは激しくなります。非同期コミュニケーションを活用すれば組織で知識を共有し続けることができます。

例えば、GitLab社の [バリュー](/handbook/values/) のページの [Git blame history](https://gitlab.com/gitlab-com/www-gitlab-com/blame/master/source/handbook/values/index.html.md) で、誰がどのような変更を行ったか、どのような背景があったかを、確認できます。ページの貢献者の中には、もうGitLabで働いていない人もいるので、この情報は非常に貴重です。情報が必要な人は、他の人の手間をかけることなく、また他の人が起床してオンラインになるのを待つこともなく、[非同期で見つける](/company/culture/all-remote/self-service/)ことができるのです。

## 非同期コミュニケーションのご案内 {#guide-to-asynchronous-communication}

スケジュールと[カレンダー](/blog/2019/12/30/mastering-the-all-remote-environment/)があると、複数の人が物理的にもしくは仮想的にかは問わず同じ場所に、同じ時間に集まって、同期的に仕事をせざるをえません。

しかしながら今や私たちは、非同期コミュニケーションにより、物理的にも仮想的にも同期的に時間をともにする必要なく、プロジェクトを進めることができる世界にいます。非同期コミュニケーションは、働いたりコミュニケーションをとる場所や時間を最適化します。

### 非同期コミュニケーションをどうワークさせるか？ {#how-does-asynchronous-communication-work}

基本的に、非同期コミュニケーションはシンプルです。メッセージを送ったり、ボイスメールを残したり、ビデオを録画したりと、いつもの通りです。ただ非同期コミュニケーションでは、受け手と送り手が同時間にも同じ空間にもいることがないだけです。

しかし、非同期コミュニケーションをうまく行うには、かなり意識して行動する必要があります。非同期に発信をする際には、次のようなチェックリストを満たしているか確認する必要があります：
* このメッセージを発信するのに最適な形式（文書、口頭、ビデオ...）を選んでいるか？
* このメッセージを受け取る人は、理解するために必要な状況を把握していますか？
* 混乱がなく明確に伝えられているだろうか？
* 言葉のトーンは適切か？どう受け取られるてしまうか？
* 必要なリソースや次にすべきことを伝えられているか？会話やプロジェクトが進みそうか？
* このコミュニケーションは文章化されていて後から見返せるようになっているか？

このような配慮をすることで、分かりやすくで間違いなくかつ親切にコミュニケーションができて、生産的に結果をだすことができます。

非同期でコミュニケーションするには、時間と計画が必要ですし、専用のツールが必要です。非同期コミュニケーションに関しては、[学ぶべきことと同じくらいにアンラーンすべきことがたくさんある](/jobs/faq/#whats-it-like-to-work-at-gitlab)のです。

非同期でうまくコミュニケーションすれば、さらに効率がよくなり、コラボレーションとチームワークがはかどります。

#### ドキュメント化の徹底がないと非同期コミュニケーションはできません

The importance of [strong documentation](/company/culture/all-remote/handbook-first-documentation/) for async communication truly can't be overstated. No matter how intentional you are in communication, there's always something that will be left out, misunderstood, or needed to move forward. If someone has a follow-up question, they may need to wait hours or days for a response. Alternatively, they can look up the answer in the company handbook.

GitLab has a [handbook-first](/handbook/handbook-usage/#why-handbook-first) approach to all communication. Our goal is to ensure that our handbook is always up to date and that it is a powerful resource to make our team massively more efficient. The [GitLab handbook](/handbook/) would be over 2,000 pages if printed, and it is available to read for any visitor who wants to know how we work.

While you may not choose to have this level of transparency, be aware that [transparent information-sharing](/handbook/values/#transparency) within your organization is crucial to asynchronous work. Every team member should be empowered to do their work at any time, whether or not their teammates are online and available.

#### GitLabを使ったリモートコラボレーション

GitLab's entire team uses GitLab to collaborate asynchronously on all of our work. GitLab is a collaboration tool designed to help people work better together whether they are in the same location or spread across multiple time zones. 

Originally, GitLab let software developers collaborate on writing code and packaging it up into software applications. Today, GitLab has a wide range of capabilities used by people around the globe in all kinds of companies and roles.

You can learn more at GitLab's [remote team solutions page](/company/culture/all-remote/gitlab-for-remote/). 

### 同期コミュニケーションではなく、非同期コミュニケーションを使用すべきとき {#how-to-implement-asynchronous-workflows}

GitLab は[非同期コミュニケーション](/handbook/values/#bias-towards-asynchronous-communication)をコミュニケーションの中心にしています。戦略的に同期と非同期のバランスをとれば、最大の[効率](/handbook/values/#efficiency)を引き出すことができます。非同期で仕事をすることそのものは目的ではありません。むしろ、思いやりをもち、可能な限り非同期で議論やプロジェクトを進めることで、同期してコミュニケーションをする時間が取れるようになります。

非同期で仕事をする高い力を持てば、適切なタイミングで同期的な議論を行うことができるようになります。非同期はGitLabにとって非常に強力ですが、絶対的なものではありません。特に、私たちの[バリュー](/handbook/values/)に反するのであれば。

#### ただ書くではなく **言語化** という言葉を使うのか？

At GitLab, if you schedule a work-related meeting (e.g. not a [coffee chat](/company/culture/all-remote/informal-communication/#coffee-chats)) it is required that you [have an agenda](/company/culture/all-remote/meetings/#have-an-agenda). If you add an agenda item, you are expected to verbalize your agenda item and ensure that you or someone else is taking notes of the response. If writing it down effectively communicates the intent, then consider going completely asynchronous on the topic.

If you are creating double work for yourself or others — holding a meeting simply to document what will need to be written down in order to [work handbook-first](/handbook/handbook-usage/#why-handbook-first) — it is likely more efficient to not hold a meeting and instead work asynchronously.

When considering meetings, review the GitLab value of [Efficiency](/handbook/values/#efficiency) and following the meeting guidelines in [being respectful of others' time](/handbook/values/#be-respectful-of-others-time). Do not schedule a coffee chat which is a work-related meeting in disguise.

## 非同期な業務フローを実装する方法 {#how-to-implement-asynchronous-workflows}

### 質問, "異なる種類の会話には、異なる種類のコミュニケーションモードが必要なのか？" {#ask-do-different-conversations-require-different-modes-of-communication}

非同期の考え方を身につける最も簡単な方法は、こう問いかけることです。「もし、私のチーム（または会社）のみんなが寝ていたら、今、どのようにこのメッセージを伝え、この仕事を指示、このプロジェクトを進められるだろうか？

そうすることで、近道をしようとする誘惑や、単に意見を集めるために[会議](/company/culture/all-remote/meetings/)を招集する誘惑から逃れることができます。(結局のところ、すべての会議は[具体的に提案を検討する場](/handbook/values/#make-a-proposal)であるべきで、非同期で行うよりも効率的に結果をだせる場合に限って開かれます。)

### イテレーションを重視する {#focus-on-iteration}

Practicing [iteration 👣](/handbook/values/#iteration) at GitLab requires intention and effort. It is often referred to as the most difficult [value](/handbook/values/) to embrace. Iterating on numerous ongoing projects is an ideal forcing function to ensure a [bias toward asynchronous communication](/handbook/values/#bias-towards-asynchronous-communication).

Asynchronous work can feel taxing and inefficient if you're only working on a single project and you're stuck waiting for another person's contribution. Scheduling your work so you can pick up other tasks while waiting to be unblocked can reduce this downtime.

Now suppose you have five ongoing projects. It's much easier to make iterative progress on one, tag a person or team within a GitLab epic, issue, or merge request for desired input or action, and switch to another ongoing project while you wait. Suppose you cycle through your assigned tasks, making iterative improvements on each before handing off. In that case, you're able to create [minimum viable change](/handbook/values/#minimal-viable-change-mvc) for many more projects while being less concerned over the immediate response to any one of the projects in particular.

Async works well when managing multiple projects, although it does require discipline and an ability to switch contexts and compartmentalize.

<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/_okcPC9YucA" frameborder="0" allowfullscreen="true"> </iframe>
</figure>

*GitLab CEO Sid and the [Learning and Development](/handbook/people-group/learning-and-development/) team provide more context on our bias towards asynchronous communication and the importance of our iteration value.*

> There is a reason we are really good at async, and that is because we make things [smaller](/handbook/values/#move-fast-by-shipping-the-minimal-viable-change). Through iteration, you don't have to coordinate with a ton of people. By taking smaller steps through iteration, we can ship faster. The only way this is possible is through asynchronous communication. — *Sid Sijbrandij, GitLab CEO and co-founder*

### 完璧を目指さず改善を目指す

At GitLab, [everything is in draft mode](/handbook/values/#everything-is-in-draft) and subject to change. Asynchronous workflows are more easily adopted when you foster a culture of progress over perfection. Move a project forward as best you can given the resources available, and if you reach a point where you're blocked, attempt to ship what you have now through a [two-way door](/handbook/values/#make-two-way-door-decisions).

This allows colleagues to see the direction you're heading and relieves pressure on them to reply immediately as some progress is better than none.

### 段階的に改善することを評価する

Asynchronous workflows require a culture where [incremental improvements](/handbook/values/#focus-on-improvement) are celebrated equally, if not more, than massive launches. If leadership casts shame on unfinished or unpolished work, workers will be reluctant to work asynchronously. Rather, they will delay work for the sake of consensus. [Consensus](/company/culture/all-remote/management/#separating-decision-gathering-from-decision-making) feels good, but can easily mask inefficiency, progress, and innovation.

### 正確に文書化する

Mastering the art of communicating asynchronously has a prerequisite: [documentation](/company/culture/all-remote/handbook-first-documentation/). At its core, asynchronous communication *is* documentation. It is delivering a message or series of messages in a way that does not require the recipient(s) to be available — or even awake — at the same time.

If your organization has no standardized method of documentation, establish that first.

### 正しいツールを使う

コミュニケーションをどこでどのようにするかについて全社的な取り決めがある場合に、非同期コミュニケーションは最も効果がでます。リーダーは、できるだけ少ないチャネルにコミュニケーションをまとめられるように、ツールを慎重に選んでください。

A common frustration in large organizations — regardless of what [stage of remote](/company/culture/all-remote/stages/) they're in — is the chaotic splintering of communication. Projects frequently end up strewn across email, chat, text messages, unrecorded meetings, design tools, Google Docs, and more. It's best to choose a single system for communicating project progress.

At GitLab ([the company](/company/)), that destination is GitLab ([the product](/stages-devops-lifecycle/)). Any side conversation that occurs in a meeting is [documented](/handbook/communication/confidentiality-levels/#internal-communication) in an agenda, and the useful elements are [contextualized](/company/culture/all-remote/effective-communication/) and ported to relevant GitLab issues and/or merge requests. The same goes for side conversations that happen in Slack or email. Relevant portions are ported over into GitLab (the product), which is the [single source of truth](/handbook/values/#single-source-of-truth) for any ongoing work.

**If it's not in a GitLab epic, issue, or merge request, it doesn't exist**. This [mentality](/handbook/communication/#everything-starts-with-a-merge-request) is essential to reaping the benefits of asynchronous communication.

Here are some tried-and-true apps and cloud tools that facilitate asynchronous collaboration:

* [Google Drive](https://workspace.google.com/)
* [Dropbox Spaces](https://blog.dropbox.com/topics/product-tips/make-remote-work-easier-with-dropbox-spaces)
* [Qatalog](https://qatalog.com/)
* [Yac](https://www.yac.com/)
* [Friday HQ](https://friday.app/)
* [GitLab](/solutions/devops-platform/)
* [Almanac](https://almanac.io/)
* [Tettra](https://tettra.com/)
* [Slab](https://slab.com/)
* [Twist](https://twist.com/)

### タイムゾーンの偏りを最小化する

Leaders should strive to eliminate bias toward one time zone, or one swath of time zones (e.g. time zones covering North America). For company all-hands meetings, look to rotate these to accommodate a more diverse array of time zones. Also consider recording them so that others can watch at a later time.

When hosting live learning sessions, for instance, host several instances so people around the globe are able to attend one that suits their schedule.

If a company pulls too hard in the direction of one time zone (oftentimes the zone where most company executives live), it signals to the rest of the company that asynchronous workflows aren't taken seriously.

## 非同期型で働くひとのためベストプラクティス

![GitLab collaboration illustration](/images/all-remote/gitlab-collaboration.jpg)

### 心のゆとりをつくる

One of the more challenging aspects of remote work is closing out of all mental tabs — to use a web browser analogy — once you leave work. Since remote enables you to work a [non-linear workday](/company/culture/all-remote/non-linear-workday/), it's difficult to rationalize where one working session ends and another begins. There is often no reason or excuse other than "it's time." Dedicated remote workers may struggle with disconnecting from this feeling, deprioritizing their own wellbeing and falling into the trap of "just one more reply."

Chat-style communication tools should be used primarily for [informal communication](/company/culture/all-remote/informal-communication/). If you are accustomed to Slack being an always-on center of urgency in a prior organization, breaking your reliance on it as a core part of accomplishing tasks will require deliberate effort and reinforcement.

Below are recommended forcing functions to keep leaders and individual contributors alike from being consumed by instant messages and a bias for synchronicity. The goal is to place the power of prioritization back into one's own hands. This is critical to being an effective [manager of one](/handbook/leadership/#managers-of-one).

### 毎日/毎週、すべてのメッセージを消去 {#clear-all-messages-dailyweekly}

人は大量の新しいデータを受け続けられるようには設計されていません。多くの人にとって、プライベートやパブリックチャネル、メッセージの新着の毎日・毎週のダイジェストを読み、理解していたら一日仕事になります。重要なものとそうでないものを選別する方法は立場や職能によって異なりますが、1日や週の終わりにすべてのメッセージを消去することで、精神的な負担を軽減することができます。

Slackでは「すべてのメッセージを既読にする」と呼ばれており、[同時押し](https://slack.com/help/articles/201374536-Slack-keyboard-shortcuts) `Shift` + `Esc` で簡単に切り替えることができます。

### 働き方の好み伝える

Create a rudimentary [README](/handbook/marketing/readmes/dmurph/) that clarifies how you work. Ideally, it's working from a GitLab Issue board, tagging system, or To-Do list which can be understood and used company-wide. You can then post the link to your README in your Slack profile, pointing others to it. Showing others how to deliberately choose asynchronous over synchronous is vital to reinforcing our operating principle of [Bias towards asynchronous communication](/handbook/values/#bias-towards-asynchronous-communication).

This is an extension of another remote-first forcing function: [Always answer with a link](/company/culture/all-remote/self-service/#answer-with-a-link).

### 携帯からSlackを削除する

Remote workers lack many of the physical gateways that serve as dividers between work and life. When work and life happen in the same building, and one's work equipment is always within reach, it's far too easy to allow unread Slack messages to haunt you.

Being intentional about removing Slack from one's phone is a great way to reinforce that time away from work is important. A [litany](http://sitn.hms.harvard.edu/flash/2018/dopamine-smartphones-battle-time/) of [studies](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6449671/) have covered the addictive impact of smartphones. Even if you aren't sure if this approach will benefit you, give it a try. It's a [two-way door](/handbook/values/#make-two-way-door-decisions).

### キャパに関する透明性を確保する {#be-transparent-on-capacity}

同じ場所で働いていれば、働く人が急に立ち去ったり、大きなため息をついたり、邪魔されないようにわざとノイズキャンセリングヘッドフォンをつけたりするのを見て、その人の状況を理解することができます。しかしリモート環境の場合は、自分が集中していて邪魔されたくないことを周囲に知ってもらうのは難しいです。

そのため、Slackのステータスを活用して、自分のステータスに関する情報をチームに流すことが重要です。GitLabの多くは[Clockwise](/handbook/tools-and-tips/other-apps/#clockwise)を利用しています。これは、会議中は自動的にカレンダーアイコンが表示され、Slack内で`Do Not Disturb`が作動したり、シフト上退勤済みであることが表示されるものです。

自分のステータスを手でいじり話しかけられる余裕があるのか集中しているのかを伝えれば心強く感じるはずです。そうすれば、他の人も同じようにできるし同じようにするようになります。さらにSlackをしたり[同期的に話すことがデフォルトであってはならない](/handbook/communication/#internal-communication)ことを他の人に思い出させます。

### 非同期がよりインクルーシブであることを再認識させる

While GitLab's approach to [self-service and self-learning](/company/culture/all-remote/self-service/) is reinforced during onboarding, continual reinforcement may be necessary. It is acceptable to ask someone if they are exercising a bias towards asynchronous communication, regardless of their position on the org chart.

Just as we would hope that all GitLab team members would be quick to ask if something is [inclusive](/company/culture/inclusion/building-diversity-and-inclusion/), it's important to remember that asynchronous communications *is* [another way](/handbook/values/#bias-towards-asynchronous-communication) for GitLab to be more inclusive.

There is [as much to unlearn as there is to learn](/jobs/faq/#whats-it-like-to-work-at-gitlab).

### 正確な用語とIDを使用する

It is important to use accurate names when referring to people. To do so, use the `@` symbol in GitLab Issues/Merge requests, Google documents, and Slack to clarify to whom you are referring. This avoids accidentally misspelling someone's name or referring to the wrong person.

Examples:

- Names that may be difficult to spell. E.g.: [Hubert Wolfeschlegelsteinhausenbergerdorff](https://en.wikipedia.org/wiki/Hubert_Blaine_Wolfeschlegelsteinhausenbergerdorff_Sr.)
- Names that could refer to multiple people. E.g.: There are multiple GitLab team members with the name `Tatiana`.

## 非同期型会議の運営方法 {#how-to-manage-asynchronous-meetings}

![GitLabコラボレーションパス図解](/images/all-remote/gitlab-collaboration-illustration.jpg)

GitLabは、[非同期コミュニケーションを重視する](/handbook/values/#bias-towards-asynchronous-communication)スタンスです。会議を開く側か招待される側かどちらだとしても仕事上の同期会議はすべてやるべきか疑ってかかることです。

1. 会議を開くことでどのような成果を期待していますか？
1. 期待している成果は[小さなタスク](/handbook/values/#iteration)に分解することができますか？
1. [ドッグフーディング](/handbook/engineering/development/principles/#dogfooding) もしくは [GitLab イッシュー](https://docs.gitlab.com/ee/user/project/issues/)や [マージリクエスト](https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html) を使って、期待している成果を達成したり、仕事を先に進められますか？
1. コンセンサスを集めたいだけですか？(*もしそうなら非同期で行うことができます*)
1. コンセンサスを集めた時に対応すべき[提案](/handbook/values/#make-a-proposal)があったら何らかの判断をしたいですか? (その場合非同期だと合意できないのであれば同期会議でもよいかもしれませんが、結果は[ハンドブックに文書化](/handbook/handbook-usage/#why-handbook-first)してください。最終的に成果が文書化できるのであれば、同期会議の[効率](/handbook/values/#efficiency)に疑問が残ります)。

### どういう時は同期的にすべきか {#clear-all-messages-dailyweekly}

キックオフミーティングを行うことで信頼関係を築き、グループ内で共有されている現在の状況を迅速に伝えられることが明らかな場合、仕事を同期的にはじめてみることを検討します。今後のコミュニケーションを非同期で進めるためのベースを確立するために、最初に同期的に取り組むことが大事です。

同期したキックオフではじめることは、次のようなケースで理にかなっています。(*Dropboxのチームが[リモートコミュニケーションガイド](https://blog.dropbox.com/topics/work-culture/-virtual-first-toolkit--how-to-communicate-effectively)*でこのことをうまく表現してくれていることに感謝します)。

1. 営業をすすめる時
1. 社外の方との初回の会議
1. 初めて一緒に働くメンバーとの初めての会議
1. 一方通行の意思決定 (例： 利害関係が複雑で決定を覆すことが難しい場合)
1. 複雑な初期化 (例: 企業シナリオの定義、スコープの大幅な見直しなど)
1. 感情的になりやすい話題 (例： 個人的な問題の議論、キャリアパス/昇進、難しいフィードバックなど)
1. 直属の部下をサポートしブロックを解除する (例： 定期的な1on1)
1. 祝賀会と振り返り会 (グループで成功を祝うのは気分がいいから、また軽くふりかえり会をすることは未来のスプリントのキックオフになりえるから)

### どういう時は非同期的にすべきか

「軽くビデオ通話をしよう」と誘うことは、対して問題がないことだと感じるかもしれませんが、生産性に悪い影響を与える可能性があります。一般的に、次のような項目については、会議を避けるのが得策です。

1. 進捗の更新
1. 参考になる情報の提供(FYI)やプロセス・ドキュメント(仕事のプロセスのススメ方を説明するもの)
1. 会議についての会議

非常に複雑なシナリオでも、非同期型から開始する例： コチラ[ビジョンステートメント: gitlab.tv](https://gitlab.com/groups/gitlab-com/marketing/-/epics/858)です。このシナリオでは、プロジェクトは非同期ではじまりました。チームメンバーがフィードバックをするために必要な情報を伝えるために、複雑な仮定や事例を伝える必要があったからです。

1. GitLab エピック(小さな議題をまとえた大きな単位)を作成した人は、情報量が多い時は、[他人の時間を尊重する](/handbook/values/#be-respectful-of-others-time)ことを伝えるため、上部に「ハイライト」の箇所を追加しました。
2. エピックの作成者は、[フィードバックのための時間枠を作る](/handbook/values/#set-a-due-date)方法で、非同期でのフィードバックを受け付ける時間枠を用意しました。
3. エピックの作成者は、非同期でフィードバックや提案をうけた後に、意思決定を下すために集中的な同期ミーティングが行われることを、グループの全員に伝えました。

### 非同期式から同期式に移行すべきタイミング {#when-to-pivot-from-asynchronous-to-synchronous}

二人の間で短文の発信が大量に飛び交い、話が行ったり来たりして非同期のままだと話がなかなか進まないときは、同期的に議論をすれば、速やかに解決にすることがあります。だいたい、2人が同じトピックについて3回以上会話が行き来する場合は、[議論を非同期にあった小さな単位にわける](/handbook/values/#minimal-viable-change-mvc)ことが現実的でないなら、一時的に同期的にコミュニケーションする **か** [Yac](http://yac.com/)、 [Soundbite](https://soundbite.ai/) または [Loom](https://www.loom.com/) などの、強力なコミュニケーション機能を持つツールを活用するほうがよいです。

それらのツールは、非同期でメッセージを伝えることができますが、音声やビデオで伝えることができるので、テキストだけの送信に比べてより深い話し合いができる可能性があります。

同期的に話し合った後は、話し合いの結果を他の人に知らせるために要約を作成すべきです。理想的は、関連する GitLab エピック、イッシュー、またはマージリクエストで共有します。

## 非同期型会議のベストプラクティス {#best-practices-for-asynchronous-meetings}

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/amiDcpIXIQ8?start=301" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

*In this GitLab Unfiltered [video](https://youtu.be/amiDcpIXIQ8), two GitLab colleagues discuss lessons learned from managing a team asyncronously, across many time zones, while traveling.*

### ポジティブなことに目を向ける

Working asynchronously allows teams to have fewer meetings. Initially, the notion of "[optional meetings](/company/culture/all-remote/meetings/#make-meetings-optional)" may seem absurd to those who are accustomed to synchronous communication. The truth is that you're either at a meeting to contribute, or you aren't.

The beauty of asynchronous is that team members can [contribute](/blog/2019/12/23/six-key-practices-that-improve-communication/) to meetings that occur while they sleep.

Meeting attendance becomes optional when each team member has access to an [agenda](/company/culture/all-remote/meetings/#document-everything-live-yes-everything) and a Google Doc, which should be attached to each invite. This allows people anywhere in the world to contribute questions/input asynchronously in advance, and catch up on documented outcomes [at a later time](/blog/2019/12/10/how-to-build-a-more-productive-remote-team/).

The person who called the meeting is responsible for contextualizing the outcomes and porting relevant snippets to relevant GitLab issues and/or merge requests.

The organizer is responsible for informing the entire company, via post-meeting documentation, of the outcomes should team members [go searching](/company/culture/all-remote/self-service/). That's a big responsibility, which keeps the quantity of meetings in check and acts as a filter for whether or not a meeting is truly necessary.

### 非同期で働いた改善状況を把握するためのKPI目標を設定する

Team needs are as unique as their objectives and will experience asynchronous communication differently. However, team leaders and managers can set KPI targets based on one or all of the following:

1. Percent reduction of minutes spent in syncronous meetings
2. Percent increase in GitLab issue/epic/merge request usage
3. Improved ratio of meeting minutes-to-[GitLab contributions](https://docs.gitlab.com/ee/user/group/contribution_analytics/)
4. Increase in [360 feedback](/handbook/people-group/360-feedback/) citing '[bias towards asynchronous communication](/handbook/values/#bias-towards-asynchronous-communication)' in the Diversity, Inclusion & Belonging field

### どのように非同期 1:1 会議を持つべきか

非同期の1on1ミーティングは、上司と直属の部下とのコミュニケーション業務の幅を広げられる優れた方法です。対面での[歩いて話す](/handbook/communication/#walk-and-talk-calls)の1on1も役に立ちますが、文章を使って非同期に1on1をして議題を取り上げることができれば、[リモートコンピテンシー](/handbook/competencies/#remote-work-competencies)の総合力を強化することができます。

非同期1:1を行うには、次のことを確認してください

1. 次の1on1は非同期で行いたい旨を相手に伝え、お互いがその進め方を理解します。
2. 非同期1on1をする週はその週全体を進行中のアジェンダドキュメントにコメントするためのかっこうの的と考えます。`FYI`(ご参考までに：For Your information)または`FYA`(要対応：For Your Action)コマンドで相手をタグ付けし、フィードバックやインプットがリアルタイムで行われないことを理解した上で、書面または埋め込みビデオで情報を提供します。
3. いつもの定期的な1on1の時間は予定に残しておいてください。その予定時間の前にアジェンダを見ることができない場合、予定をそのまま残しておけば、各議題に対応したり新しい議題を追加することに集中する時間を確保することができます。
4. 非同期1on1の週で対応しきれなかった議題については、非同期のやり方をあきらめて対面または歩きながら話す形式での1on1を再開します。

### 会議のふりかえり

既存および今後開催される会議の[議題](/company/culture/all-remote/meetings/#have-an-agenda)の上または下に次の質問を書いてください。また回答も文書化してください。「このミーティングは非同期ですることはできましたか？ もしできそうだったとしたら、どのように進めればよかったですか？」

回答は[パブリックチャンネル](/handbook/communication/#use-public-channels)で共有して、非同期の業務フローでもどこまでできるかの気づきを与えてください。最近出席したまたは出席する予定の会議を振り返ってみてください。どの会議は正しい時間の使い方で、どの会議は非同期でも進められたでしょうか？

同期でも非同期でも多くの作業をすることができます。目標は、可能な限り非同期を選択してください。集中する時間を１日の中にたくさん作ってことです。そうすることで、仕事での人間関係を強化することに、同期的にコミュニケーションをすることに力を使える可能性が高くなります。[非同期型に偏る](/handbook/values/#bias-towards-asynchronous-communication)ことで、ともに時間を使いチームの絆を深める余裕が生まれます。仕事のミーティングやビデオ通話に対する許容量に限りがあります。同期的な時間は、可能な限り、[コーヒーチャット](/company/culture/all-remote/informal-communication/#coffee-chats)や[チームトリビア](/company/culture/all-remote/informal-communication/#virtual-trivia)といった非公式なコミュニケーションに取っておいた方がよいのです。

## 非同期コミュニケーションの限界と課題

Asynchronous communication has its limits. Although projects are moved forward asynchronously at GitLab, there are times when portions of the project are best handled synchronously.

### 効率性の評価

As a rule, when team members at GitLab go back and forth three times, we look to jump on a synchronous video call (and document outcomes).

### 顧客対応業務

Certain roles are more tolerant of asynchronous communication than others. Client-facing roles, for instance, may have certain requirements for coverage during certain hours. It's possible to layer async work atop these demands by ensuring that there is no [single point of failure](/blog/2015/12/17/gitlab-release-process/), such that a team within an asynchronous organization can self-organize and decide who covers given time slots.

### タイムゾーン

While communicating asynchronously is an excellent way to reduce the pain of having team members spread across an array of time zones, managing this as a *small* team is particularly challenging. For example, a small team which is primarily based in North America may struggle to communicate well with the first team member who joins from Singapore given the time zone difference.

However, as a team scales and more coverage is added in time zones in between, it's easier to hand work off as the world turns. In many ways, managing time zones becomes *easier* with scale, as the delta between teams is reduced.

### 外部候補者との面談

All of GitLab's [interview processes](/handbook/hiring/interviewing/) involve some form of synchronous communication. Some of our teams utilize [asynchronous practices during the interview process](https://www.youtube.com/watch?v=jSbCt8b_4ug), however, this is not a standard approach across every interview process.

## 社外での非同期作業

Even if you have established asynchronous work within your team, it can be challenging or uncomfortable to encourage async practices when working with people outside of your company.

Every organization has their own norms, but you can politely challenge the status quo by seeking to inform and educate. Here's how to approach working async with external parties:

1. **Start synchronously:** Have a sync call to kick off a project or partnership. During that call, mention that you'd like to incorporate some asynchronous work into the project moving forward. If you use this call to [build relationships and rapport](/company/culture/all-remote/asynchronous/#when-to-start-synchronous-first), your async work will be more efficient.
2. **Set expectations and model behavior:** Discuss up front *how* you will work async together (what [tools you'll use](/company/culture/all-remote/asynchronous/#utilize-the-right-tools), what to document, and how often). Agree on a cadence for any future syncs so that everyone knows what to expect. Be sure that you model this behavior throughout the project or partnership.
3. **Share async documentation:** Send your handbook page or documentation about async to people you're working with externally. This way, anyone unfamiliar with working this way can refer to the page and share it with others.

Some organizations may not be open to working asynchronously, so it's important to remain flexible, particularly in a [client-facing role](/company/culture/all-remote/asynchronous/#client-facing-roles). However, imagine how much time could be saved if more companies had a [bias for async](/handbook/values/#bias-towards-asynchronous-communication)?

## 非同期 3.0 at GitLab {#async-30-at-gitlab}

![GitLabオールリモートデスク(ノートパソコン、地図付)](/images/all-remote/gitlab-commit-sf-2020-laptop-user.jpg){: .shadow.medium.center}

非同期コミュニケーションは、ビジネスのリモート化が進む世界において、重要な差別化要因です。GitLabの非同期3.0イニシアチブは、非同期コミュニケーションをきちんと明確に定義し、運用することを目的としています。

非同期1.0では、GitLabは小さなチームで、観察された行動を共有することで、ほぼ非同期で動作していました。非同期 2.0では、[プレイブック](https://learn.gitlab.com/suddenlyremote)を作り始め、同期と非同期が適切なタイミングを定義しています。非同期3.0では、ベストプラクティスと意図的な運用を定義する予定です。それが3.0になると信じています。

1. GitLabがリモートワークにおけるリーダーシップを維持できるようにする。
1. コミュニケーション手段の曖昧さを減らし、[ハンドブック・ファースト](/handbook/handbook-usage/#why-handbook-first)を強化する。
1. GitLabチームメンバーの日々の生活に[柔軟性を持たせる](/company/culture/all-remote/non-linear-workday/)ことを可能にする。
1. グローバルリモートワークのための[長期ビジョン](/company/culture/all-remote/vision/)をサポートする。



### GitLabチームでの非同期の活用事例 {#examples-of-asynchronous-integration-on-gitlab-teams}

| 活動内容                                                     | 非同期コミュニケーション                                          |
| ------------------------------------------------------------ | ------------------------------------------------------------ |
| **毎週のお知らせ**                                     | エンジニアリング・マネジメントは、各チームメンバーの都合の良い時間に、毎週発表用のビデオとスライドを作成し、非同期で閲覧できるようにしています。 |
| **新メンバー紹介**                             | 新メンバーは2分間の自己紹介ビデオを作成し、ミーティングやSlackチャンネルで共有することができます。 |
| **バックログ・リファインメント／プランニング・ポーカー**                      | [GitLab イッシュー](https://docs.gitlab.com/ee/user/project/issues/) (もしくは [エピック](https://docs.gitlab.com/ee/user/group/epics/manage_epics.html)、もしくは [マージ・リクエスト](https://docs.gitlab.com/ee/user/project/merge_requests/creating_merge_requests.html)、より適切であれば)を使い、具体的な要望を適切な相手に伝えるためのタグ付けを行いチームは協力します。情報量が1,000字を超える場合は、「ハイライト」セクションをトップに置くようにする。 |
| **キャパシティプランニング**                                        | チームで共有するGoogle Sheetを毎月更新。                  |
| **同期会議に参加できないチームメンバー**      | ミーティングの主催者は、招待前に[ミーティングへの招待状](/handbook/communication/#scheduling-meetings)にGoogle ドキュメントで書かれたアジェンダを貼り付けておく必要があります。ミーティングに招待されたチームメンバーは、ミーティングのアジェンダと質問を非同期で更新するか、共有すべき情報をあらかじめビデオに録画しておく（アジェンダにビデオをリンクする）必要があります。 |
| **四半期ごとのチーム成績の振り返りと達成会**           | コーポレートマーケティング (`#corp-mktg`) は、チームメンバーが非同期で結果を追加できるように [Google ドキュメント または Sスライド](https://docs.google.com/presentation/d/1NmgBwWY844BQHbV8CK0CWgWLia437Phoijh6oPkFClY/edit#slide=id.g5e411f22b2_0_0) を作成し、その後 [GitLab Unfiltered YouTubeチャンネル](https://youtu.be/eLkx0D6zs0Y) で結果のお祝いビデオを参加できなかった人と共有します です。 |
| **月次財務報告**                                 | 各部門のDRI（[ダイレクトリー・レスポンシブル・インディビジュアル／主責任者](/handbook/people-group/directly-responsible-individuals/) ）は、毎月、Google Sheetsに最新の会計処理を反映させるようリマインダーを設定し、質問があれば財務パートナーにタグ付けするようにしています。 |
| **プロジェクトのスプリントとマイルストーン**                           | インバウンド・マーケティング（`#inbound-mktg`）は、`Geekbot`というSlackアプリを使って、チームメンバーに以下のような質問を投げかけています。 **1)** 現在、どのプロジェクトに集中していますか？ **2)** 火曜日以降に公開されたもの/完了したものは何ですか？ **3)** 今週の優先順位トップ3は何ですか？ **4)** うまくいっていないもので、助けが必要なものはありますか？ |
| **有給の間にカバーする範囲を広げる**                           | チームメンバーは、[PTO by Roots(有給管理用SaaS)](/handbook/paid-time-off/#pto-by-roots) を使い、[有給休暇](/handbook/paid-time-off/) をとる際、「同僚」の代わりに「チャンネル」を指定して自分の仕事の代わりをお願いすることができます。|
| **会議・面接の準備**                     | GitLabのPRチーム（`#external-comms`）は、トピックの背景、伝えるべきキーメッセージ、関連するハンドブックやメディアのリンク、ミーティングの時間や参加リンク、セッションのロジスティックなどを事前にGoogleドキュメントで共有し、非同期にスピーカーの準備をしています。 |
| **公報やコンテンツの編集**                          | GitLabのコンテンツ（`#content`）、イベント（`#events`）、コーポレートマーケティング（`#corp-mktg`）チームは、パネル質問、セッションタイトル、企業発表、ピッチを日常的にGoogleドキュメントで編集しています。非同期のフィードバックは、Google ドキュメントの「提案」機能を使い、「コメント」機能で個人を正確にタグ付けしています。 |
| **週1回のチームキックオフ／スタンドアップセッション**                     | コーポレートマーケティング（`#corp-mktg`）では、Slackアプリの`Geekbot`を使って、毎週以下の質問をする非同期スタンダップを行っています。**1)** 今日の気分はどうですか？赤/黄/緑 **2)** この週末は何をしましたか？ **3)** 今週の優先順位は？ **4)** 進歩を阻むものはありますか？ **5)** 有給休暇（PTO）の予定はありますか？ |
| **未達成の成果物のふりかえり**                         | [エンジニアリングパッケージグループ](/handbook/engineering/development/ops/package/) は、 `~"group::package"` というラベルのついた GitLab イッシュー を使って、非同期で成果物のふりかえりをします。 |
| **カレンダーのブロックとと非直線の勤務時間**                | [家族や友人が最優先](/handbook/values/#family and-friends-first-work-second)となるように、仕事のカレンダーをブロックすることが推奨されています。 フィットネスや瞑想をするために時間をあけたり、介護、子供の送り迎えなど、さまざまな形があります。 このブロックは、[非線形の勤務時間](/company/culture/all-remote/non-linear-workday/)を強制し、ブロックされている時間帯はすぐに対応できない可能性があり、チームメンバーは[非同期にあなたと関わるべき](/company/culture/all-remote/mental-health/#work-into-async-tools) が徹底されます。 |
| **定期的に開催される会議の開催時間は交互に**         | 同期ミーティングは、異なるタイムゾーンにいる参加希望者にあわせる必要があります。例えば、毎週定期的にチームが開催するミーティングでは、[EMEA/ヨーロッパ中東アフリカ時間](/handbook/sales/territories/)とアメリカ東部[AMER](/handbook/sales/territories/)にとって最適な時間帯（太平洋側午前8時）と、[APAC/アジア太平洋時間](/handbook/sales/territories/)と[アメリカ西部時間](AMER)に最適な時間帯（太平洋側午後3時）で交互に開いています。 |
| **GitLabチームメンバー以外との非同期コミュニケーション** | 同期的なコミュニケーションを主とする顧客、ビジネスパートナー、コミュニティの貢献者等と非同期的に調整したりコミュニケーションをとることは困難な場合があります。 GitLabの非同期プラクティスを伝えるために、私たちの**[オールリモート 非同期ガイド](/company/culture/all-remote/asynchronous/)** を事前に共有し、カレンダーの招待状や議題文書に貼り付けることも一つの選択肢です。 柔軟に対応し、非同期コミュニケーションの利点や効果的なプロセスについて、周囲に啓蒙していくことが大切です。 |
| **非同期型エンジニアリングスタンドアップミーティング**                | [スタンドアップミーティング](https://en.wikipedia.org/wiki/Stand-up_meeting)は、エンジニアリングチームにおいて、チームメンバー全員が最近取り組んだこと、次に取り組む予定のこと、何か助けが必要なことを把握するためによく使われます。  GitLabは非同期を中心に業務をしているので、Slackチャンネルや[GeekBot](https://geekbot.com/blog/daily-standup-meeting/)のようなボットを使って非同期でやり取りしています。 |

*ぜひこのページにマージリクエストをして非同期を活用する事例をさらに追加してください*

### 非同期かつ構造化されるべき主な行動/コミュニケーション {#core-behaviorscommunications-that-should-be-async-and-structured}

1. ホワイトボードを使って、コラボレーションやブレーンストーミングをしたいなら、[GitLabがGoogle Docsをリモートホワイトボードとして使う方法](/company/culture/all-remote/collaboration and-whiteboarding/#google-docs-as-a-remote-whiteboard)を調べてみてください。
1. 提案や思考を誘発するには[書き留め](/handbook/values/#write-things-down)て、フィードバックや合意を非同期で幅広い人々から素早く集められるようにしてください。
1. 他のチームメンバーに手助けやフィードバックを求める場合は、適切な文脈でヘルプのリクエストをGitLab エピック、イッシュー、マージリクエストを使い、積極的に文書化してください

### 非同期を優先した会議の断り方

会議は、信頼関係を築き、プロジェクトを前進させるために有効であす。しかし、会議は非常にコストがかかり、仕事への集中を妨げるものです。会議に参加する前にもう一度よく考え、会議の誘いには丁重に応対することが、お互いの責任です。

会議よりも非同期な業務フローを提案すると、相手が不快に感じるかもしれません。GitLabではチームメンバー全員がそのような提案を「よりインクルーシブに仕事を進めようとする誠実な試みであり個人的にあなたを軽視しているわけではない」と認識するようにしてください。もし参加する必要のないミーティングに招待された場合は丁重にお断りして、同僚にハンドブックのこの章を思い出してもらってもかまいません。

以下は、Dropboxによってまとめられた素晴らしい[リモートコミュニケーションガイド](https://blog.dropbox.com/topics/work-culture/-virtual-first-toolkit--how-to-communicate-effectively)から拝借した、いくつかの後悔の例です。

1. 「私を招待してくれてありがとう! みんなが考えたことや進捗が文書化されるように、会議の代わりにGitLab イッシューやリクエストを使って議題に取り組めないかしら？」
1. 「最近会議がマジ多くて、スケジュール管理を徹底したいです。だから会議なしで議題に取り組めないでしょうか？」
1. 「フィードバックさせてください。会議をするまえに、GitLab イッシューかマージリクエストもしくは共有ドキュメントで、レビューを返させてください」

もし担当チームが会議を開く時に自分が出席できない場合は、誰か代理の代表者を任命し、自分からのフィードバックや質問を、事前にカレンダーの招待状に添付される議題に追加してみてください。

### ベストプラクティス、ガイドライン、非同期な機能の組み合わせ {#best-practices-guidelines-and-async-feature-set}

非同期 3.0は、杓子定規な方法を強制するものではなく、理解や配慮を重視し、多様なコミュニケーションアプローチをサポートし、効率化するための方法論です。

チームは、非同期での業務フローの機能や、GitLab（製品）で[非同期コミュニケーションを促進する](/blog/2019/08/02/gitlab for-the-non-technical/) 方法や、非同期で[既存のツール](/handbook/tools-and-tips/) (例 Google Docs) を活用する方法を完全に理解するために、[セルフサービスの考え方](/company/culture/all-remote/self-service/)や[正しい情報ソースの一元化 (SSoT-Single Source of Truth)](/handbook/values/#single-source-of-truth) を取り入れる必要があります。

GitLabチームメンバーはミーティングに疑問を持ち、ミーティングのトピックをカバーするために非同期の代替手段 (例： GitLab エピック、課題、マージリクエストで議論する)を提案することがあります。

1. [リモートワーク基礎学習認定](/company/culture/all-remote/remote-certification/)の中核をなす[GitLab 非同期ワークフロー知識評価](https://gitlab.edcast.com/pathways/copy-of-remote-foundations-badge)を完了する。
1. 非同期の試験的に運用してください。１週間の週次の会議うち半分を非同期で参加して、同期参加と非同期参加の違いについてふりかえりをするということです。
1. [ノンリニアワークデー](/company/culture/all-remote/non-linear-workday/) を試してみる。生産性の高い時間帯や介護の時間帯に合わせてスケジュールをシフトしたり、同期性の高い組織ではサポートされないような時間に働いてみることを試してみましょう。
1. どんな仕事でも、同期と非同期の組み合わせを最適化し、最大限の[効率](/handbook/values/#efficiency)と[反復](/handbook/values/#iteration)の可能性を追求します。
1. チームメンバーは、学習やコミュニケーションスタイルの好みが異なるため(例えば、[ニューロダイバーシティ-脳の多様性。全ての脳は、各々の考えがあり、各々素晴らしいということ。障害や教育の分野で用いられる考え方](/handbook/values/#embracing-neurodiversity))、音声によるディスカッションは書面によるものよりはるかに効果的です。同期ディスカッションの時間を適切に設定することで、全員が貢献できるようになります。
1. すべての会議は[具体的な提案の検討](/handbook/values/#make-a-proposal)か、これからは非同期で進めるためのキッカケとなるものであるべきです。そして非同期よりも効率的に成果を出せる場合にのみ同期で開かれるべきです。
1. プロジェクトやマイルストーンをはじめる時は、チームビルディングのための最初は同期会議を行うことで、その後に非同期での業務を効率的に進めることができます。このように最初は意図的に同期会議をひらいて、親密さと信頼関係を構築することを意識してください。グループを共有スペースに集める目的は明確で、チームメンバーがその後、主に非同期に切り替えるために必要な相互理解をすることです。このように意図的に開くキックオフのための会でさえ、すべてのタイムゾーンの人に対応できるとは限りません。GitLabの[ミーティングガイドライン](/handbook/communication/#scheduling-meetings)を遵守することが重要です。カレンダーの招待状にはGoogle Docのアジェンダを添付し、直接参加できない場合でもすべての当事者がテキストで貢献できるようにし、将来の閲覧できるように集まりを最初から最後まで録画してください。
1. 相手に **特定の文書による行動やフィードバック** を要求し、そのために必要な [提案とコンテキスト](/handbook/values/#make-a-proposal) を提供した場合ではない限り、`@`ハンドルは使用しないで下さい。
1. GitLab エピック、イッシュー、マージリクエストが1,000ワードを超える場合、キーポイントを効率的に理解できるようにするために、イッシュー/マージリクエストのトップに要約を記載してください。
1. 同期型のブレインストーミングやアイディア・インキュベーションは、全面的に否定してはいけません。とはいえ参加者は、忘れないようにするためにも、参加者以外からも多くの人からフィードバックを集めるために、得られたものをできるだけ早く文書化してください。[GitLab ソングブック](/company/culture/songbook/)に掲載される新しいジングルのアイデアを思いついたソングライターが二人いたとします。彼らは、ボイスメモを録音してアイデアの本質をまとめ、多くの人に共有して、曲をくりかえし改良し続けられます。同じようなやり方としては、閃いたことをGitLabのマージリクエストやイシューに記録し、関連するSlackチャンネルで共有し、フィードバックを受け付けることもできます。



### 非同期 3.0 調査データ

GitLab team members were polled on `2020-09-02` in the public `#company-fyi` Slack channel, with polling open through `2020-10-02`. Roughly 20% of team members responded to the poll, with answers and percentage of replies outlined below.

Team members were asked: *Why would you choose synchronous communication over asynchronous for work-related (e.g. not [informal communication](/company/culture/all-remote/informal-communication/)) discussions?*

- I was unaware of GitLab's operating principle '[Bias towards asynchronous communication](/handbook/values/#bias-towards-asynchronous-communication)' - 1%
- I prefer verbal communication over written communication - 3%
- I believe the subject matter is confidential - 10%
- Someone else on my team can join and document the takeaways from a synchronous meeting - 1%
- I find it difficult to get others' attention via asynchronous communication - 12%
- It's useful to build rapport and catalyze future async conversations - 38%
- I don't feel that I have the tools, support, and/or training to rely on asynchronous in my role - 0%
- It takes more time to set up an async communication for success that it does to schedule/conduct a meeting - 6%
- I find it hard to brainstorm or gather information when I operate async - 19%
- Other - 10%

#### 主な学習内容

Responses are open to interpretation, though the data provide key insights that GitLab leaders may use to better understand the dynamics of their teams and iterate on solutions.

1. While only 1% noted that they were unaware of an operating principle related to asynchronous communication, leaders should not assume that all [operating principles](/handbook/values/) are acknowledged and well-understood. Reinforce and discuss values in [1:1 meetings](/handbook/leadership/1-1/) and day-to-day workflows.
1. GitLab is [public by default](/handbook/values/#public-by-default). If you believe a matter is confidential, check this in the [Not Public](/handbook/communication/confidentiality-levels/#not-public) section of the Communication handbook. 
1. If you find it difficult to get someone's attention via asynchronous means, consider leveraging a synchronous engagement to discuss potential gaps in expectations. While GitLab is articulate about where work happens, some team members work exclusively from [GitLab's To-Do List](https://docs.gitlab.com/ee/user/todos.html) or Scoped Labels and have varying approaches to prioritization (*see Brand and Digital Design's [Working With Us](/handbook/marketing/inbound-marketing/digital-experience/#working-with-us) handbook for an example*). Assume positive intent, as delays in response may be attributable to putting [family and friends first](/handbook/values/#family-and-friends-first-work-second). 
1. The majority of respondents indicated that they leverage synchronous engagements to build rapport and catalyze future async conversations. Having a meeting not because it's *easy*, but because it will create *future efficiencies and cohesion*, is a positive outcome. 
1. It is encouraging that GitLab team members feel that they have the tools, support, and training to rely on asynchronous workflows. However, leaders should be mindful of new tools and practices that GitLab can pilot and surface these in the public `#values` Slack channel. [Iteration](/handbook/values/#iteration) also applies to our approach to asynchronous communication. 

#### GitLabのエキスパートが、同期と非同期の使い分けについてアドバイスします。 {#gitlab-experts-advise-on-when-to-use-sync-vs-async}

1. "障害や納期など緊急の案件が発生したときに、同期会議を利用して他の人をサポートします。"
1. "主にトラブルシューティングで、非同期に説明や議論をするよりも、よりライブな対話の方がすべての関係者にとって特定の問題を解決するのが早い場合に同期を使用しています。"
1. "非同期での引き出しを使い果たしたときや、非同期が[結果](/handbook/values/#results)につながらないときに同期を使います。"
1. "ぶっちゃけ非同期では難しいクリエイティブなアイデアや提案をチームと生み出すために同期会議を利用しています。"
1. "タグ付けしたチームメンバーからのGitLab Issueスレッドの返信を10日間待ったり、数時間かけてSlackで100回返信したりするより、Zoomで10分待つ方が効率的です。"
1. "仕事関係のフォーマルなコミュでは、非同期がいい（形式が決まっているときは非同期を選ぶ）。人間関係の構築（コーヒーチャット、グループソーシャルチャット）には、同期が最適です。"
1. "チームメンバーが初対面の場合、最初の人間的なつながりを確立するための同期で楽しんでいます（例：コーヒー／ソーシャル／チームコール）"
1. "非常に時間的制約のあるものは、関係者全員でのシンク・ミーティングを選び、迅速に議論します。"
1. 「私は、非同期コミュニケーションでリードし、非同期が失敗したときに同期会話に戻る傾向があります。非同期コミュニケーションに失敗するのは、時間的制約のあるトピックに効率的に対処できないとき、あるいは人々が矛盾していたり、互いに話し合っているのを感じるときだと考えています。このような場合、私は同期会話を呼び出して集中し、会話を強制的に行わせ、会話のブロックが解除されたら非同期会話に戻します。
1. "非同期は、特にコードと関する詳しい技術的な議論に非常に効果的です。時には、何かを構想するのに何度も読み返すことがあり、非同期はこれに最適です。また、非同期はコードレビューにも最適です。大局的な議論には、非同期とライブ/ビデオコールの組み合わせが有効です。ただし、透明性を保つために、結果は関連する GitLab イッシュー に記録すべきです。Googleドキュメントを使うこともありますが、GitLabの方が記録として優れていますし、検索やコメントもしやすいのです。"
1. 「しかし、プロダクトデザイナーとして、デザインプロセスの初期段階には、問題を確実に理解し、チームと一緒にブレーンストーミングを行うために、同期する時間が必要であることも認識しています。その後、非同期でも同期と同じように効率的な作業ができますが、そのためには、コミュニケーションをとる全員が文書化する努力をする必要があります。誤解を招いたり、やり直しが必要になったりする可能性を最小限にするために、詳細な情報を盛り込み、書き方に細心の注意を払うことが重要です」。
1. "私はほとんどのコミュニケーションを非同期で処理していますが、時折同期会議を行うことで、製品チーム全体の足並みが揃うことに気づきました。同期会議では、全員がテーブルにつき、ユーザー調査の結果やデザインの見直し、実装の検討などを行います。この稀なミーティングは、全員の足並みをそろえ、チームの非同期構造をよりスムーズに流すのに役立っています。"
1. 「ほとんどの場合、私は非同期通信をデフォルトにしています。一般に、その方が、意思決定に至る過程をたどりやすく、また、その理由を繰り返し説明しやすいからです。まれに、ある視点を共有することが難しい場合があります。一つの事柄について何度かやり取りをした後、短いチャットで問題の本質に迫り、その結果を文書化するのが好きです。また、非同期よりも同期の方がいいという例外は、重要な決定を下す前の最後のブレーンストーミングです。非同期コミュニケーションでは、些細なことでも、最終的には重要なことになる場合があります。そのような場合は、最後の締めとして同期ブレーンストーミングを行った後、ふりかえりやAMA(Ask Me Anything 何でも聞いてね)な会を行うことが有効です。"
1. "私は、非同期コミュニケーション（特に文章）で理解させるのは難しく時間がかかる（設計者である私にとって）非常に技術的なコンセプトで仕事をしています。技術的な詳細や機能の目的を説明できてその場で質問に答えられるより技術力のある同僚と会う方が効率的です。技術的な詳細をよく理解した後は、非同期で仕事をするのがより快適になります。"
1. "非同期コミュニケーションの最中に相手のレスを待っている間に、コンテキストが切り替わることがよくあります。迅速に進めるためには、同期コミュニケーションが必要な場合もあるのです。"

## GitLab ナレッジ アセスメント: 非同期コミュニケーションの採用

 [リモートワーク基礎認定](/company/culture/all-remote/remote-certification/) から すべての知識アセスメントを終えて、[リモートワーク基礎バッヂe in GitLab Learn](https://gitlab.edcast.com/pathways/copy-of-remote-foundations-badge)を受け取ってください。ご質問のある方は、弊社の[教育&開発チーム](/handbook/people-group/learning-and-development/)の`learning@gitlab.com`までご連絡ください。

![GitLab オールリモート・チーム・図解](/images/all-remote/gitlab-com-all-remote-1280x270.png)

GitLabは、世界最大のオールリモート企業の一つです。私たちは100％リモートで、地球上のどこにも社有オフィスはありません。チームメンバーは65カ国以上にいます。

[GitLabの製品が優れているかどうかを尋ねる](/why-gitlab/)ことが有効であるように、私たちはリモートワークの分野で私たちの専門知識を透明化したいと考えています。

## レッスンを提供する

GitLabは、オールリモートが[仕事の未来](/company/culture/all-remote/vision/)であり、リモート企業は価値観を共有する他の組織のためにやり方を伝える相互責任を負っていると信じています。もしあなたやあなたの会社がより良き世界を作るためになるような経験をお持ちなら、[マージ・リクエスト](https://docs.gitlab.com/ee/user/project/merge_requests/) を作成し、このページへの貢献を追加することを検討してみてください。

---

[オールリモート](/company/culture/all-remote/)のメインへ戻る
