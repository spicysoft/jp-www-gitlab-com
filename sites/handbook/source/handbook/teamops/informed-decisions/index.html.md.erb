---
layout: handbook-page-toc
title: "Informed decisions — TeamOps"
canonical_path: "/handbook/teamops/informed-decisions/"
description: Informed decisions — TeamOps
twitter_image: "/images/opengraph/all-remote.jpg"
twitter_image_alt: "GitLab remote team graphic"
twitter_site: "@gitlab"
twitter_creator: "@gitlab"
---

## On this page
{:.no_toc}

- TOC
{:toc}

![GitLab TeamOps collaboration illustration](/handbook/teamops/images/teamops-illustration_collaboration_purple.png)
{: .shadow.medium.center}

This page is about one of the four Guiding Principles of TeamOps. Get immersed in a [complete overview of TeamOps](/teamops/), or jump straight into the free [TeamOps Practitioner Certification](https://levelup.gitlab.com/learn/course/teamops). 

# Teams must be informed by an objective, shared reality

The decisions teams make must be informed by an objective — and shared — reality. We ensure everyone can consume (self-serve) the same shared information. This starts with clear documentation in a single source of truth. Values manifest as behaviors which can be observed and quantified. And wherever possible, teams must default to transparency. While other management philosophies prioritize the speed of knowledge ***transfer***, TeamOps optimizes for the speed of knowledge ***retrieval***.

Action tenets and real-world examples are below. 

## Public by default

Conventional management philosophies may rely on intentional information silos or a "need-to-know-basis" model. This approach restricts transparency, with the goal of reducing misinformation. 

TeamOps flips this: information should be [public by default](/handbook/values/#transparency), with the goal of allowing maximum contribution. "Public by default" requires an organization to designate which information is [explicitly not public](/handbook/communication/confidentiality-levels/#not-public), creating a bias for transparency across all functions of a business. 

A traditional business problem is "how do we get the right information to the right people at the right time?" A TeamOps organization asks: "How do we create a system that allows everyone to access information and make contributions, regardless of role or function?"

In practice, a TeamOps organization uses a project management system that allows any team member to view data related to all other functions. A marketing manager, for example, would be able to view a sales teams' work and data, without requesting special access. The system is free of walls and information silos. 

The result is that, instead of needing to create a system for unblocking access to information, management's role is to educate team members on how to use the information system, how to organize data, and how to self-serve.

This type of system scales with much less effort, and scalable leadership is effective leadership. By writing guidance down transparently — in a way that others can modify, validate, or contribute to — leadership scales beyond an individual or team, and even beyond the organization. 

GitLab refers to this approach as [handbook-first](/company/culture/all-remote/handbook-first-documentation/). A core outcome is that individuals are less dependent on others for the information they need to do their job.

**Here's an example:** [Livestreaming company meetings on a branded YouTube channel](https://youtu.be/XcqloQezOUg)

Shortly after GitLab Chief Revenue Officer Michael McBride joined the company in 2018, he [livestreamed a 1-to-1 meeting](https://youtu.be/XcqloQezOUg) with GitLab co-founder and CEO Sid Sijbrandij. As part of McBride's onboarding, Sid was asked to provide an impromptu pitch of GitLab. 

In a conventional organization, this interaction would likely be private and not recorded. By recording it and streaming it to the public on a branded YouTube channel, everyone is more informed — the two individuals on the call; GitLab team members past, present, and future; the wider community; customers and partners; candidates; etc. 

## Single Source of Truth (SSoT)

TeamOps deliberately structures data (policy, workflows, values, etc.) in a [single source of truth (SSoT)](/handbook/values/#single-source-of-truth). It is founded on the thesis that decisions are [better informed](/company/culture/all-remote/handbook-first-documentation/) when there is no such thing as a "latest version." There is only *the* version. 

Teams and functions may choose different mediums as the SSoT depending on the task and the nature of their work. TeamOps allows this type of SSoT flexibility, but requires that those who dictate the SSoT share that information transparently and [crosslink](/handbook/communication/#cross-link) where appropriate.

**Here's an example:** [Maintaining a single list of all applications used within the company](/handbook/business-technology/tech-stack/)

Maintaining a single source of truth for elements that few individuals need isn't difficult (e.g. using a single, persistent shared document for a [1-to-1 meeting](/handbook/leadership/1-1/) between a people manager and direct report). Honoring the single source of truth is harder for elements which are cross-functional by design, such as a list of all applications used across the entire organization. 

In conventional organizations, multiple departments may maintain their own version of this list. Crucially, this is either not acknowledged as a problem, or there is no known solution to removing duplication. In an organization powered by TeamOps, duplicate sources may exist initially. Once duplication is discovered, everyone can contribute to the solve (collaborating to create a SSoT) and one's default is to *actively work to remove duplication*. At GitLab, the application list [lives in our handbook](/handbook/business-technology/tech-stack/), and integrity is ensured thanks to [version control](/topics/version-control/). 

## Low-context communication

[Low-context communication](/company/culture/all-remote/effective-communication/) assumes that the person you're communicating with has little or no context about the topic at hand. The person delivering the information is responsible for making sure your communication includes everything the recipient will need. This empowers individuals to make decisions and take action without needing to ask unnecessary follow-up questions that could have been avoided.

Low-context communication is
* Explicit, not implicit
* Direct, not indirect
* Simple, not complex
* Comprehensive, not narrow.

Each business function may have unique expectations on low-context communication (e.g. what classifies as low-context in sales may not in engineering). If decisions within a function appear to be ill-informed, audit the expectations on context first.

**Here's an example:** [Making a company-wide announcement that meaningfully changes a policy](/handbook/communication/#how-to-make-a-company-wide-announcement)

At GitLab, a department leader will typically send out a [company-wide message](/handbook/communication/#how-to-make-a-company-wide-announcement) to a Slack channel that includes every team member. Crucially, this message does not include *only* the news, but a link to a GitLab merge request *detailing what changed* ([diffs](https://docs.gitlab.com/ee/development/diffs.html)). 

The [merge request](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/104440) which added the very copy you're reading now is an example of low-context communication in practice. Darren M., the [DRI](/handbook/people-group/directly-responsible-individuals/) for the change, also shares a link to the handbook and/or project page ("the news"). The merge request includes context on what's changing, and details on where to ask questions and contribute new iterations (including an optional [Ask Me Anything (AMA)](/handbook/communication/ask-me-anything/) session). This gives any team member enough context to share feedback and apply these changes to their own teams in an informed way.

## Situational leadership

Informed decisions require the use of a key phrase: "It depends." 

In a TeamOps organization, individuals and people managers alike are responsible for seeking whatever information is needed to respond appropriately to the situation at hand.

Adopting a [situational leadership strategy](/blog/2021/11/19/situational-leadership-strategy/) brings an added layer of intelligence to the way leaders manage each individual, project, and decision. TeamOps requires leaders to adapt the way they communicate, provide guidance, and delegate work based on a list of weighted factors and considerations. This strategy enables more informed decisions, prevents a reliance on status quo, and presents new growth opportunities for team members.

**[Situational leadership](https://situational.com/situational-leadership/) does not only apply to people managers.** It also applies to individual contributors, since everyone is expected to be a [manager of one](/handbook/leadership/#managers-of-one). 

**Here's an example**: [When to let others lead, and when to lead directly](https://youtu.be/Q5HPHZKecrQ?t=854)

[Situational leadership](/blog/2021/11/19/situational-leadership-strategy/) is exemplified when a leader adjusts behavior from scenario to scenario, rather than carrying emotions or biases from one scenario directly into the one they encounter next. In [this recorded meeting](https://youtu.be/Q5HPHZKecrQ?t=854), GitLab's CEO Sid shares two examples: in the first, he handed off a proposal and gave the team freedom to improve it. In the second, he pivoted to risk-reduction mode and required that every minor update go through his personal approval. 

In both cases, the leadership fits the scenario. In both cases, Sid began as "it depends," and adjusted his approach as the variables were revealed.

A third example is the meeting taking place in this video itself: working on an early iteration of this very content. The stakes are lower, the audience is smaller, and revisions are [two-way doors](/handbook/values/#make-two-way-door-decisions) (easily reversible). By seeking information on the audience, timeline, and impact, Sid is able to delegate more, reduce approval loops, and lean away from urgency. After all, "It depends."!

## Inclusivity 

Decisions are better informed overall when they include a maximally [diverse array of perspectives](/handbook/values/#seek-diverse-perspectives). In TeamOps, a [bias for asynchronous communication](/handbook/values/#bias-towards-asynchronous-communication) fosters [inclusion](/company/culture/inclusion/). By defaulting to written, asynchronous sharing, everyone contributes in the same size font. People of all backgrounds, abilities, and work styles are invited to participate in a way that serves their needs. The best idea wins, not the loudest voice in the meeting. 

TeamOps frees contributors from the conventional bounds of time zones and meetings. This generates more informed contributions from more parties, more thoughtful conversation, and more archived context for retrospectives and evaluations. 

**Here's an example:** [Changing a company operating principle](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/103753) 
   
Samantha L., a leader in GitLab's learning & development team hosted [Crucial Conversation](/handbook/leadership/crucial-conversations/) cohorts for six months. She noticed a common theme: people consistently struggled to say "no" at work. Rather than hosting a closed-door meeting to change an operating principle to address this, Samantha proposed a change in a public forum ([a GitLab merge request](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/103753)). 

Additionally, she posted a Slack message in the public `#values` channel asking for feedback and suggestions from anyone who felt compelled to contribute. Ultimately, [the DRI](/handbook/people-group/directly-responsible-individuals/) of the impacted handbook page — [GitLab Values](/handbook/values/) — came to a decision that was more informed, as it included a more diverse range of perspectives. The feedback is also well-documented for future reference and iterations. 

## Shared values

Informed decisions are best made in the context of a shared set of organizational values, which are one of the [prerequisites](/handbook/teamops/#prerequisites-for-TeamOps) for TeamOps. Without explicit values, there is no group identity or basis for group cohesiveness. 

Each organization may create its unique values, but whatever they are, values must be operationalized. Team members within the organization must be able to understand and utilize them. The guard rails created by explicit, shared values provide more freedom for individual decision making. This leads to more informed decisions by removing guesswork on whether (or how) values were applied during the decision-making process.

**Here's an example:** [20+ ways GitLab values are integrated into decision making](/handbook/values/#how-do-we-reinforce-our-values)

GitLab [reinforces its values in over 20 different ways](/handbook/values/#how-do-we-reinforce-our-values), including what we select for during hiring, our default software settings, criteria for discretionary bonuses and promotions, and what we explicitly call out when making decisions. These intentional integrations increase the likelihood that decisions are informed by shared values. 


---

Return to the [TeamOps](/handbook/teamops/) homepage. 
