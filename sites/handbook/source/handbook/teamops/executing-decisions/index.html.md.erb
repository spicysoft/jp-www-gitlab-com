---
layout: handbook-page-toc
title: "Measurement clarity — TeamOps"
description: Measurement clarity — TeamOps
twitter_image: "/images/opengraph/all-remote.jpg"
twitter_image_alt: "GitLab remote team graphic"
twitter_site: "@gitlab"
twitter_creator: "@gitlab"
---

## On this page
{:.no_toc}

- TOC
{:toc}

![GitLab TeamOps teamwork illustration](/handbook/teamops/images/teamops-illustration_teamwork_purple.png)
{: .shadow.medium.center}

This page is about one of the four Guiding Principles of TeamOps. Get immersed in a [complete overview of TeamOps](/teamops/), or jump straight into the free [TeamOps Practitioner Certification](https://levelup.gitlab.com/learn/course/teamops). 


# Measurement clarity 

This is about achieving objectives and understanding what you're measuring. TeamOps enables higher frequency measurements, clear owners, high accountability, and wide-reaching communication.   

Being more informed, making faster decisions, and increasing decision making velocity is only useful if you execute and measure outputs (not inputs). TeamOps empowers ***everyone*** to contribute to meaningful business outcomes. It also recognizes that execution ***is not a one-time event***; rather, it is the establishing of a new baseline on which future iterations are applied.

Action tenets and real-world examples are below.

## No-matrix organization

You should only have **one manager**. Conventional management philosophies may focus on minimizing the shortcomings of matrix organizations (or, "dotted line" reporting structures) but refuse to eliminate them. TeamOps asserts that a [no-matrix organization](/handbook/leadership/no-matrix-organization/) is not only feasible, but *essential* to executing decisions. By ensuring that each individual reports to exactly one other individual, contributions have a clear path to receiving feedback. 

**Here's an example**: Every GitLab team member has exactly one manager

In an organization powered by TeamOps, a team member specializing in sales accounting (in this example, the team member's title is `FP&A Analyst, Sales Finance`) reports to **exactly one person** with domain knowledge (with the title `Sr. Director, Sales Finance`). This *one* manager understands their report's day-to-day tasks, has served in that role prior, is positioned to share a single set of goals, and is suited to coach the team member through a mutually understood career path. The team member does not "dual report" to Finance and Sales. 

Rather than relying on reporting structure to ensure collaboration, [collaboration is installed at a foundational, organization-wide level](/handbook/values/#collaboration). Each function is expected to honor the associated operating principles. Whenever there is a need to work on a specific, high-level, cross functional business problem, assemble a [working group](/company/team/structure/working-groups/) only for the duration of time required to execute.

## Measure results, not hours

In organizations powered by TeamOps, all team members focus on [executing business results](/handbook/values/#measure-results-not-hours), rather than executing on [presenteeism](https://language.work/research/killing-time-at-work/). 

**Here's an example**: [Measuring impact of GitLab's 10 year campaign](https://gitlab.com/gitlab-com/marketing/corporate_marketing/corporate-marketing/-/issues/5507)

A cross-functional effort was required to produce the `10 Years of GitLab` integrated marketing campaign and [associated website](/ten/). A GitLab issue was established to explicitly define [elements to be tracked and measured](https://gitlab.com/gitlab-com/marketing/corporate_marketing/corporate-marketing/-/issues/5507) in order to provide an impact report. By focusing on results over hours spent (or if a given team member was online at a certain time, or in a certain office), everyone involved in the project can focus energy on execution. 





## Transparent measurements

Conventional management philosophies glorify metrics, which is a nonspecific term that often lacks connection to goals, mission, and strategy. TeamOps prefers [Key Performance Indicators (KPIs)](/company/kpis/), which may be linked to [Objectives and Key Results](/company/okrs/) (OKRs) and offer greater context on their relevance to a function or the entire company. 

OKRs are frequently the delta in KPIs. If you want to improve a KPI, you have an initiative (OKR), and that's what you work on that quarter. If you're not *creating* OKRs to *improve* KPIs, then you're either missing KPIs or you have the wrong OKRs. 

Crucially, KPIs for each function are [transparently shared](/handbook/values/#findability) across the organization. This enables everyone to contribute by creating visibility between departments.

**Here's an example**: [Chief Executive Officer OKR and KPIs](/company/okrs/fy23-q3/)

In Q3-FY23, a CEO OKR is [Improve user and wider-community engagement](/company/okrs/fy23-q3/). This is the *initiative* to improve a series of KPIs, a subset of which are documented below: 
1. Evolve the resident contributor strategy by conducting 5 customer conversations with current “resident contributors” in seat
1. Certify 1,000 team members and 10,000 wider-community members in TeamOps 
1. Enhance Corporate Processes and Successful Corporate Development Integration & Prospecting 

These are documented in a tool (GitLab uses Ally) that is accessible to the entire organization. Critically, any team member can see any other functions OKRs and KPIs for the quarter, reinforcing the [value of transparency](/handbook/values/#transparency).

## Iteration enables execution

Executing on a decision is not binary. It is also not a one-time event. TeamOps reframes execution as an ongoing series of [iterations](/handbook/values/#iteration), with each one worthy of celebration. This encourages [smaller steps](/handbook/values/#move-fast-by-shipping-the-minimal-viable-change), which are more amenable to feedback and course correction. By breaking decisions down into manageable components, execution is more feasible. 

**Here's an example**: [Adding an MVC GitLab Citation Index to GitLab for Education homepage](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/69665/)

In a conventional organization, a revised homepage could be seen as binary. It's either complete, or not. [This merge request](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/69665/) details a minimum viable change (MVC) to add one element to the [GitLab for Education](/solutions/education/) homepage. In the comment thread, GitLab team members agree that this iteration moves the page one step closer to an ideal state. By embracing and celebrating each iteration *as* execution, it enables team members to accelerate execution on other projects rather than being stuck on a prior project.  


## Prioritize due dates over scope

TeamOps requires due dates. This is not a means to create unnecessary rigidity, but to force mechanisms that enable teams to execute on decisions.

A TeamOps organization will always [set a due date](/handbook/values/#set-a-due-date), and if necessary, will cut scope to meet the due date rather than postpone the date. This enables everyone to contribute to future progress on adding features in a future iteration (or future *execution*), while limiting the loss of momentum.

**Here's an example**: [Maintaining a monthly release cadence for 10+ years](/releases/)

As of April 30, 2022, GitLab has shipped a monthly product release for [127 consecutive quarters](https://ir.gitlab.com/news-releases/news-release-details/gitlab-reports-first-quarter-fiscal-year-2023-financial-results). That's over 10 years! A decade of [consistent execution](/blog/2018/11/21/why-gitlab-uses-a-monthly-release-cycle/) is made possible by [cutting scope](/handbook/values/#set-a-due-date) instead of pushing ship dates. 


## Key Review meetings

[Key Review meetings](/handbook/key-review/) present a functional group's OKRs, KPIs, how the team is trending toward achieving goals, items that are top of mind, etc. In conventional organizations, this is apt to be a more informal conversation between a department head and their manager. By broadening the audience of attendees for a Key Review meeting to include the Chief Executive Officer (CEO), Chief Financial Officer (CFO), the function head, and (optionally) all other executives and their direct reports, we widen the pool of people who can contribute feedback, insights, and advice. It forces the presenting department to be more mindful of execution, consider areas where they are falling short, and gather input for potential iterations toward progress.  

**Here's an example**: [GitLab User Experience (UX) department Key Review meeting](https://youtu.be/54LAX8UFU9s)

GitLab User Experience (UX) department [livestreamed a Key Review meeting on GitLab Unfiltered](https://youtu.be/54LAX8UFU9s). A distinct element of these meetings is that [no presentations are allowed](/handbook/communication/#no-presenting-in-meetings). For context, each attendee was able to view a presentation prepared ahead of time, with a shared Google Doc agenda used to maintain an orderly and inclusive flow of questions and conversation. You'll notice that executives and their direct reports provide questions and suggestions throughout. There's a distinct conversation on usability beginning at the 13:51 mark where leads from various functions [contribute to improved execution on a 25-second lag recognized in the product](https://youtu.be/54LAX8UFU9s?t=831). 


## Stable counterparts

In a [stable counterparts model](/blog/2018/10/16/an-ode-to-stable-counterparts/) for enabling cross-functional execution, every functional team (e.g. Support) works with the same team members from a different functional team (e.g. Development). As a member of one function, you always know who your partner in another function will be. Stable counterparts are an intentionally chosen structure designed to execute on decisions. They foster collaboration *across functions* by giving people stable counterparts for other functions they need to work with to execute decisions. This enables more social trust and familiarity, which [speeds up decision making](/handbook/teamops/fast-decisions/), facilitates [stronger communication flows](/handbook/teamops/informed-decisions/), and reduces the risk of conflicts. Stable counterparts enhance cross-functional execution without the downsides of a [matrix organization](/handbook/leadership/#no-matrix-organization).

**Here's an example**: [Technical Support stable counterparts](/handbook/support/support-stable-counterparts.html)

Support team members are [assigned a permanent contact](/handbook/support/support-stable-counterparts.html) for a GitLab team member within another function in the company. The ability to build long-term relationships is the foundational benefit of having stable counterparts. Repeated interactions help us understand personal workflows and communication styles, so we know how to most effectively execute decisions with our counterparts.


---

Return to the [TeamOps homepage](/handbook/teamops/). 
