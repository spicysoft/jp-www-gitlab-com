---
layout: handbook-page-toc
title: "Everyone contributes — TeamOps"
canonical_path: "/handbook/teamops/everyone-contributes/"
description: Everyone contributes — TeamOps
twitter_image: "/images/opengraph/all-remote.jpg"
twitter_image_alt: "GitLab remote team graphic"
twitter_site: "@gitlab"
twitter_creator: "@gitlab"
---

## On this page
{:.no_toc}

- TOC
{:toc}

![GitLab TeamOps contribution illustration](/handbook/teamops/images/teamops-illustration_contribution_purple.png)
{: .shadow.medium.center}

This page is about one of the four Guiding Principles of TeamOps. Get immersed in a [complete overview of TeamOps](/teamops/), or jump straight into the free [TeamOps Practitioner Certification](https://levelup.gitlab.com/learn/course/teamops). 

# Everyone contributes

Organizations must **create a system** where everyone can consume information and contribute, regardless of level, function, or location. 

When people don't have the opportunity to contribute because of their background, or where they live, or their life stage, we miss out on valuable perspectives.

Action tenets and real-world examples are below. 

## Iteration

In conventional organizations, there's often inherent pressure to present a complete and polished project, document, or plan. This expectation slows progress and expends valuable time that could be used to exchange multiple rounds of feedback on smaller changes. 

A key aspect of TeamOps is incorporating [iteration](/handbook/values/#iteration) into every process and decision with a [low level of shame](/handbook/values/#low-level-of-shame). This means doing the smallest viable and valuable thing, and getting it out quickly for feedback. Despite the initial discomfort that comes from sharing the [minimal viable change (MVC)](/handbook/values/#minimal-viable-change-mvc), iteration enables faster execution, a shorter feedback loop, and the ability to course-correct sooner. 

This philosophy mirrors the GitLab product from a cycle-time standpoint. GitLab is built to reduce the time between making a decision and getting the result to market. Iteration enables cycle time reduction to be applied in day-to-day decision making.

**Here's an example**: [Iterating on promotional videos to launch TeamOps](https://gitlab.com/gitlab-com/marketing/inbound-marketing/global-content/digital-production/-/issues/319)

In the development of TeamOps, our team at GitLab aspired to produce [two high-quality videos](https://gitlab.com/gitlab-com/marketing/inbound-marketing/global-content/digital-production/-/issues/319) to introduce the first, internal iteration of this certification. When it became clear that TeamOps's brand identity would be changing in the coming weeks, we decided to produce only one video — an example of [Minimal Viable Change (MVC)](/handbook/values/#minimal-viable-change-mvc) — and iterate as new information came in. This showcases a maturity in embracing iteration. It celebrates the [boring solution](/handbook/values/#boring-solutions) (one video, the minimum required to inform GitLab team members), and enabled faster decisions throughout the launch phase. 

To empower even more of your team to make fast decisions through iteration, consider hosting [Iteration Office Hours](https://www.youtube.com/watch?v=2eA7-E950ps). 

## Short toes 

An organization's speed of decision-making can be dramatically slowed if teams are concerned about "stepping on others' toes" by contributing to work outside of their immediate job description. This is often fueled by a fear of conflict, which is one of the [five dysfunctions](/handbook/values/#five-dysfunctions) of a team.

Adopting a TeamOps mentality means having [short toes](/handbook/values/#short-toes) and feeling comfortable with feedback, suggestions, and contributions to the work you "own". It also means speaking up when you see an opportunity for iteration. Eliminating a territorial mindset allows for better [collaboration](/handbook/values/#collaboration), more [diversity of thought](/handbook/values/#seek-diverse-perspectives), and ultimately faster decisions.  

**Here's an example**: [Marketing team member contributing a proposal to improve a People function process](https://gitlab.com/gitlab-com/people-group/people-operations/General/-/issues/555)

In a People Group Conversation at GitLab, the following question was asked: "*What can we do from a company side to make sure people aren’t overworking?*" At conventional organizations, people outside of the People Group may not risk "stepping on their toes" by proposing iterations and solutions. At GitLab, [a proposal was offered](https://gitlab.com/gitlab-com/people-group/people-operations/General/-/issues/555) by a team member in Marketing. This proposal added an automated message within Slack to remind people to consider taking time off, and to add the note to their next manager 1:1 if they felt that they could not take PTO. Following a healthy discussion, the proposal was [added to GitLab's handbook](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/37624) and implemented in its tool stack. 

## Disagree, commit, and disagree

"Disagree and commit" has become a somewhat commonly understood phrase in professional settings. In an organization powered by TeamOps, a second "disagree" is added to form "[Disagree, commit, and disagree](/handbook/values/#disagree-commit-and-disagree)." This mentality empowers everyone to contribute to change without slowing down the pace of execution. In the more conventional "disagree and commit" framework, execution is encouraged but contributions to future iterations are limited. By explicitly stating that team members are expected to execute (commit) while a decision stands, but are welcome to disagree, it invites everyone to constructively surface dissent and potential proposals for change. 

**Here's an example**: [Require seniors to become maintainers](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/106942)

A GitLab merge request details a policy change to "[increase maintainers by requiring senior engineers to become a maintainer in at least one project/area](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/106942)." 57 team members participated in discussion within the merge request itself, and the DRI for the change confirms in the description that "in a recent survey, 11% of respondents did not want to become a maintainer, and 35% disagreed that it should be a senior+ responsibility." Despite the disagreement, the iteration was merged and thus, a decision was made. Thanks to the operating principle "Disagree, commit, and disagree," anyone is welcome to disagree with the change and influence the next iteration through constructive conversation with the DRI. 

## Directly responsible individual (DRI) 

In TeamOps, it's crucial that each project or decision is assigned a single [directly responsible individual (DRI)](/handbook/people-group/directly-responsible-individuals/) who is solely responsible for its success or failure. The DRI isn't responsible for doing all of the work: they are the ultimate decision-maker.

This model [combinines the best of both hierarchical and consensus organizations](/company/culture/all-remote/management/#separating-decision-gathering-from-decision-making). It helps avoid unclear expectations and delays from having too many people involved in a decision.

Leaders must foster a culture where DRIs are empowered, able to [escalate to unblock](/handbook/values/#escalate-to-unblock), and willing to share their ideas in the open. This unlocks the team's highest potential. A successful DRI should consult and collaborate with all teams and stakeholders and welcome input from a broad range of diverse perspectives as they form their thoughts. 

It's important to note that TeamOps still allows flexibility for team members to [disagree, commit, and disagree](/handbook/values/#disagree-commit-and-disagree), but it reduces the risk that disagreement or dissent will prevent a [bias for action](/handbook/values/#bias-for-action). 

**Here's an example**: [Learning & Development team member owns decisions related to her result metrics](https://gitlab.com/groups/gitlab-com/people-group/learning-development/-/epics/24)

A member of GitLab's Learning & Development team was responsible for [developing mental health awareness content](https://gitlab.com/groups/gitlab-com/people-group/learning-development/-/epics/24). Given that she was the one doing the work, and her result metric was the one impacted, she was given latitude to be the Directly Responsible Individual. This enabled her to make fast decisions about content type and structure, as opposed to waiting for a more senior person to sign off or appoint her as the lead for this piece of work. 


## Informal communication to build trust

An intentional approach to [informal communication](/company/culture/all-remote/informal-communication/) is crucial in a fast-paced organization with a bias for [asynchronous workflows](/company/culture/all-remote/asynchronous) and [text-based communication](/company/culture/all-remote/effective-communication/). Leaders should encourage team members to prioritize informal connections (e.g. coffee chats, social calls, special interest chat channels) and [get to know the people](/handbook/values/#get-to-know-each-other) behind the text. This builds trust, prevents conflict, and enables better communication during work-related interactions. 

Building this level of trust also helps enable DRIs to make faster decisions, as there's a foundation of confidence in the experience and judgment of others. 

**Here's an example**: [Sharing READMEs (personal operating manuals) to build trust with new team members](/handbook/engineering/readmes/)

Two GitLab team members have never worked together before, so they set up a [coffee chat](/company/culture/all-remote/informal-communication/#coffee-chats) and exchange [READMEs](/handbook/engineering/readmes/) prior to a new project starting. They learn a lot about each other, their work styles, and their backgrounds in the 25-minute video call and the asynchronous README reviews prior. The project runs more smoothly because of their [shared trust](/handbook/leadership/building-trust/) beyond the transactional work interactions.

## Two-way door decisions

In TeamOps, decisions are [two-way doors](/handbook/values/#make-two-way-door-decisions), meaning they're easy to reverse. That's why a DRI should go ahead and make the decision without approval or consensus. The only time a decision should require a more thorough discussion first is when you can't reverse it ***or*** break it down into smaller, reverseable components. 

This requires a reframing of the conventional management mindset. Reverting work back to a previous state is a positive thing, because you're quickly getting feedback and learning from it. Making a small change quickly prevents a bigger revert in the future. 

**Here's an example**: [Support decision is shipped and then reverted, leading to an async brainstorm](https://gitlab.com/gitlab-com/support/support-team-meta/-/issues/4485)

Engineers at GitLab collaborated on a change to clarify that GitLab Community Edition can have support. Following discussion in the [merge request](https://gitlab.com/gitlab-com/marketing/digital-experience/buyer-experience/-/merge_requests/765), it was merged into production. Hours later, a member of GitLab's Support Team [reverted the change](https://gitlab.com/gitlab-com/marketing/digital-experience/buyer-experience/-/merge_requests/838) with context on why. This two-way door decision enabled faster decision making. Even though we returned through the same door we entered (hence, two-way), it hastened decision making on the topic by generating an [async brainstorm issue](https://gitlab.com/gitlab-com/support/support-team-meta/-/issues/4485) following the reversion.  

## Group Conversations

Group Conversations are recurring 25 minute meetings providing regular updates across all GitLab teams on a rotating schedule. It's the same concept and content as the Key Review meeting mentioned above, with one major difference: *all* team members are invited! These meetings are designed to give people context on what other teams outside of their own are focused on (and how they're executing). Execution isn't solely about executing your goals, but also understanding what others are executing. 

**Here's an example**: [Learning and Development Group Conversation](https://youtu.be/OX15Rknk7tM)

GitLab's Learning and Development team hosted a [livestreamed Group Conversation](https://youtu.be/OX15Rknk7tM) in June 2021. [No presentations are allowed](/handbook/communication/#no-presenting-in-meetings) in Group Conversations. Attendees look at the prepared presentation deck in advance and document questions in a shared Google Doc. At the 6:35 mark, an attendee (who is sharing their screen) [notices that a button does not link to the appropriate place](https://youtu.be/OX15Rknk7tM?t=395). This enables the L&D team to create an action item, plan an iteration, and continue to execute on their OKRs/KPIs. 

---

Return to the [TeamOps](/teamops/) homepage. 
