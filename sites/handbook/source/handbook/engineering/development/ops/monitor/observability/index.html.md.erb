---
layout: handbook-page-toc
title: "Monitor:Observability Group"
description: "The Observability group is responsible for the Observability of the DevOps lifecycle."
---

## On this page

{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}


## Monitor:Observability

The **Monitor:Observability** group at GitLab is responsible for building tools that enable DevOps teams to respond to, triage and remediate errors and IT alerts for the systems and applications they maintain.

Based on the [recent Opstrace acquisition](https://about.gitlab.com/press/releases/2021-12-14-gitlab-acquires-opstrace-to-expand-its-devops-platform-with-open-source-observability-solution.html), we aim to provide a streamlined Operations experience within GitLab that enables the individuals who write the code, to maintain it at the same time.


## Goals

Our primary goals right now are to deliver a set of 3 Integration Milestones:

- [Milestone 1](https://gitlab.com/groups/gitlab-org/opstrace/-/epics/3): Migrating from GitHub => GitLab, Planning Integrated Authentication, Jaeger Tracing
- [Milestone 2](https://gitlab.com/groups/gitlab-org/opstrace/-/epics/11): Initial SaaS Infrastructure with Integrated Auth
- [Milestone 3](https://gitlab.com/groups/gitlab-org/opstrace/-/epics/19): Production SaaS platform, with Integrated Error Tracking and Tracing

## Team Organization

### Async Standups

We have Geekbot standups on Weds and retrospectives on Fridays. We use these async standups to communicate what we have accomplished, any current blockers and what we plan to work on next.

### Meetings

- Weekly Meetings: These are focused on organizing ongoing work or specific efforts such as rollout-outs or bigger initiatives.

- Bi-weekly Cross-functional meeting: This weekly meeting is focused on aligning the EM, PM, Principal Engineer, Developer Advocate, and UX on cross-functional objectives. Goals are set and weekly status is communicated.

- Bi-monthly social hour: This meeting is non-work related and helps team socialize and get to know each other better.

- Team member coffee chats: Each team member should schedule a coffee chat with all other team members rough every 4-6 weeks. Feel free to discuss work or non-work topics. If timezones are an issue find another way to connect, such as a async slack thread to checkin. The goal is to get to know your other team members on a 1:1 basis.

- Dev Syncs: These are developer-organized sync meetings where ICs can meet and discuss technical issues or organize technical work amongst themselves without requiring the presence of a EM.

### Communication

We use several Slack channels to organize ourselves:

- Primary channel: [#g_observability](https://gitlab.slack.com/archives/C02Q93U8J07)
- Standup channel: [#g_observability_standup](https://gitlab.slack.com/archives/C02VAHG10HW)
- Social channel: [#g_observability_random](https://gitlab.slack.com/archives/C02QLQUB0JZ)

### How we do Planning

Currently, during our initial phase, we are using a 2 month milestone cadence.
All work is organized into Epics, sub-epics, and assigned to the relevant Milestone.

#### Our process

- Two weeks before the beginning of the Milestone, the EM and PM meet to groom Epics, Issues, and Milestones.
- All Planning work can be seen on the [Planning Board](https://gitlab.com/groups/gitlab-org/opstrace/-/boards/3657448)
- Milestone goals are defined and objectives are broken up into relevant Epics, sub-epics, and issues.
- Sometimes DRIs and supporters are assigned to epics to clarify responsibilities and ownership.
- Throughout the Milestone we analyze progress and reprioritize as needed.

### How to find something to work on

Normally at the beginning of the Milestone the EM will discuss an overview of the work and what relevant areas you will focus on. Sometimes issues will already be assigned to you before the Milestone begins.

If you are ever looking for additional issues to work on:

1. Look at the [Development board](https://gitlab.com/groups/gitlab-org/opstrace/-/boards/4463190)
1. Identify an issue in the Ready for Development or Open columns that are unassigned.
1. Assign yourself to the issue.
1. Add a `workflow:in dev` label to the issue
1. If the scope or description are unclear, connect with the EM and or PM for clarification or (if feeling confident) groom the issue yourself and proceed.
1. Begin working on the issue.
1. Once you are done with the issue, make sure any relevant MRs are linked and close the issue.
1. Repeat.

## Team members

<%= direct_team(manager_role: 'Engineering Manager, Monitor:Observability') %>

## Stable counterparts

<%= stable_counterparts(role_regexp: /(?<!:)Monitor(?!:Respond)/, direct_manager_role: 'Engineering Manager, Monitor:Observability') %>


## April 2022 Opstrace Pulse Survey Results

A Pulse survey was conducted for the Opstrace team and the feedback was focused on a few key areas:

1. Prioritize onboarding documentation and process for Observability new hires to ensure clarity for new team members. 
1. Use the Direction page as more of a living doc that is always up-to-date and ensure we operate more as a handbook-first team for efficiency as the team scales.
1. Close any perceived “missing links” in terms of dispersing information and communication to ensure the what, why, and when is clear to everyone on the team.

## Technical Architecture

The Observability team is involved in the introduction of several new technologies and technical components to GitLab's tech stack. 

The [GitLab Monitor Stage Product Direction Handbook Page](/direction/monitor/#gitlab--opstrace--on-by-default-observability) has information about the product strategy for integrating GitLab and Opstrace.

We also encourage you to read our [architecture documentation](https://gitlab.com/gitlab-org/opstrace/opstrace/-/tree/main/docs/architecture).

### ClickHouse Datastore

Observability and analytics features have big data and insert heavy requirements which are not a good fit for Postgres or Redis.  [ClickHouse](https://github.com/ClickHouse/ClickHouse) was selected as a good fit to meet these features requirements.  ClickHouse is an open-source column-oriented database management system. It is attractive for these use cases because it can efficiently filter, aggregate, and sum across large numbers of rows. ClickHouse is not intended to replace Postgres or Redis in GitLab's stack.


ClickHouse is the backend datastore for these features (currently under development): 
* Tracing
* Error Tracking
* Logging  

ClickHouse is also being considered as a backend for:
* Metrics 
* Product Analytics
* Value Stream Analytics
* User Ping
* Vulnerability Reports

#### Benchmarks

 1. [ClickHouse Benchmarks](https://gitlab.com/gitlab-org/incubation-engineering/apm/apm/-/issues/4) - Evaluation of ClickHouse, benchmarking against TimescaleDB, CrateDB, and MongoDB.
 CrateDB, MongoDB and TimescaleDB.
 1. [ClickHouse vs. TimescaleDB Benchmark Video](https://youtu.be/cMdQsxolcqc) - Weekly demo video covering 


#### ClickHouse related issues, videos, and resources

1. Issues & Epics
    1. [Jaeger/ClickHouse tracing POC epic](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/101506) - Epic describing proof of concept work for running Jaeger tracing on ClickHouse.
        1. [Jaeger/ClickHouse tracing POC demo video](https://www.youtube.com/watch?v=IjW9d-UpARs)
    1. [Jaeger/ClickHouse Tracing is production ready epic](https://gitlab.com/groups/gitlab-org/opstrace/-/epics/10) - Epic for production readiness work of Jaeger tracing on Clickhouse.
    1. [Incubation:APM ClickHouse evaluation issue](https://gitlab.com/gitlab-org/incubation-engineering/apm/apm/-/issues/4)
    1. [Incubation:APM ClickHouse for logging existing solutions issue](https://gitlab.com/gitlab-org/incubation-engineering/apm/apm/-/issues/38)
1. Videos
    1. [Video - Sid Discusses Clickhouse for Logging](https://youtu.be/X7a6lVKt7jU)
    1. [Video - ClickHouse discussion with Frederic (Polar Signals) & Sid Sijbrandij (GitLab)](https://youtu.be/2LHjDA2MN24?t=965)
    1. [Video - Jaeger/ClickHouse tracing POC demo](https://www.youtube.com/watch?v=IjW9d-UpARs)
    1. [ Video - ClickHouse vs. TimescaleDB Benchmark](https://youtu.be/cMdQsxolcqc)
1. Example usage outside GitLab
    1. [Uber Engineering Blog Post: Fast and Reliable Schema-Agnostic Log Analytics Platform](https://eng.uber.com/logging/)
    1. [Sentry Architecture](https://develop.sentry.dev/architecture/)
    1. [ClickHouse K8s Operator](https://github.com/Altinity/clickhouse-operator/)

### GitLab Observability UI (previously known as Opstrace-ui)

[GitLab Observability UI](https://gitlab.com/gitlab-org/opstrace/opstrace-ui) is a data-visualization library used to visualize metrics.  We intend to extend it to visualize logging and tracing data as these features are added to the platform. GitLab Observability UI is based on a version of Grafana prior to the license change from Apache to AGPL.  This approach was chosen for the following reasons:

* Apache License, Version 2.0: Enables the UI to be embedded in GitLab and used by companies without [concern](https://news.ycombinator.com/item?id=20112476).
* Integration: Ease of integration and ability to embed in existing GitLab UIs.
* Grafana Dashboard: Basic Grafana dashboard compatibility.
* Innovation: The monitor and observability landscape for DevOps has evolved over the years with new user and business needs. Opstrace UI will allow for a unified experience around metrics, logs, traces and any other kind of observability event.


#### GitLab Observability UI related issues, videos, and resources

1. [GitLab Observability UI Repo](https://gitlab.com/gitlab-org/opstrace/opstrace-ui)
1. [Blog Post announcement](https://opstrace.com/blog/gitlabobsvervabilityui)
1. [Community Forum FAQ](https://forum.gitlab.com/t/updates-on-opstrace-integration-into-gitlab-faq/67257)

### Proposed Removal of Cortex

Cortex is a highly scalable timeseries database for Prometheus. Cortex has been part of the Opstrace stack since its founding and the team has invested energy in everything from [scale testing](https://opstrace.com/blog/scaling-200m-series) and developing its [own operator](https://opstrace.com/blog/introducing-a-cortex-operator).

Moving forward, we are proposing to remove Cortex from the stack for several reasons:

1. We want to [invest in ClickHouse](/#technical-architecture) as our sole Observability datastore. We previously implemented a Jaeger Tracing solution backed by ClickHouse and are planning to develop Metrics and Logging solutions as well. We see ClickHouse as a unified datastore capable of managing all our Observability data and this single source will prove easier to manage and scale both for our Observability SaaS but also for self-managed users.
1. Removing Cortex now and focusing solely on ClickHouse, we can prevent a potentially difficult data migration down the road. Any migration of Production data can be a complex operation and removing Cortex spares our users that difficulty in the future when they need to shift to using a Metrics solution backed by ClickHouse. 
1. Recently, [Grafana Labs decided to no longer contribute to the Cortex project](https://grafana.com/oss/cortex/) and focus instead on other efforts. This means that the Cortex project will likely see greatly reduced development of new features and bugfixes and the community will begin migrating away from Cortex. 

We would love community input on this proposal: https://gitlab.com/gitlab-org/opstrace/opstrace/-/issues/1656

## ClickHouse Acceleration Borrow Request

Timeline: April 6 - June 22, 2022

### Goals

- Company-wide interest in Clickhouse as a Analytical DB and Big data solution
- Deliver a scalable Clickhouse Service that the whole company can leverage
- Re-enable Error Tracking 

Many of the Goals and reasoning is discussed in the [borrow request proposal](https://gitlab.com/gitlab-com/Product/-/issues/3897).

### Exit criteria

"Clickhouse integrated as part of a standard Opstrace + GitLab .COM deployments with Error Tracking backed by Clickhouse enabled by default."

### Epics

- [Clickhouse as Datastore for Error Tracking](https://gitlab.com/groups/gitlab-org/-/epics/7772)
- [Develop and Rollout a ClickHouse Service](https://gitlab.com/groups/gitlab-org/opstrace/-/epics/27)

### Kickoff Meeting
- [Recording](https://gitlab.zoom.us/rec/play/RRhg_7eBY8a-OGDMacTDvYlAWjObATY30HJNpPIW0CgMfUolLs4ofrUcw1HUcZN6dprWR7WSoQqjcLJP.OHmN5OXJKkLqYBC5?continueMode=true)
- [Agenda](https://docs.google.com/document/d/1096378pYfsF1NRmZttjalrciQejk-Au50K01xfPGyO4/edit)

### Communicating Progress

We will communicate ongoing progress via:

- [Burndown/Burnup charts](https://gitlab.com/groups/gitlab-org/-/milestones/78#tab-issues)
- [Weekly updates for Observability team](https://gitlab.com/groups/gitlab-org/opstrace/-/epics/4)
- Adhoc showcase videos ([example](https://www.youtube.com/watch?v=IjW9d-UpARs))

## Dashboards

<%= partial "handbook/engineering/metrics/partials/_cross_functional_dashboard.erb", locals: { filter_value: "Observability" } %>





