---
layout: handbook-page-toc
title: "Plan Stage"
---

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

### Plan
{: #welcome}

Plan teams:

- [Plan:Project Management Team](/handbook/engineering/development/dev/plan-project-management/)
- [Plan:Product Planning Team](/handbook/engineering/development/dev/plan/product-planning/)
- [Plan:Certify Team](/handbook/engineering/development/dev/plan/certify/)
- [Plan:Optimize Team](/handbook/engineering/development/dev/manage/optimize/)

The responsibilities of this collective team are described by the [Plan stage](/handbook/product/categories/#plan-stage). Among other things, this means
working on GitLab's functionality around issues, issue boards, milestones, to-do list, issue lists and filtering, roadmaps, time tracking, requirements management, and notifications.

- I have a question. Who do I ask?

In GitLab issues, questions should start by @ mentioning the Product Manager for the [corresponding Plan stage group](/handbook/product/categories/#plan-stage). GitLab team-members can also use [#s_plan](https://gitlab.slack.com/messages/C72HPNV97).

For UX questions, @ mention the Product Designers on the Plan stage; [Nick Leonard](https://gitlab.com/nickleonard) for Plan:Project Management, [Alexis Ginsberg](https://gitlab.com/uhlexsis) for Plan:Product Planning, [Dan Mizzi-Harris](https://gitlab.com/danmh) for Plan:Certify and [Blair Christopher](https://gitlab.com/badnewsblair) for Plan:Optimize.

### How we work

- In accordance with our [GitLab values](/handbook/values/).
- Transparently: nearly everything is public, we record/livestream meetings whenever possible.
- We get a chance to work on the things we want to work on.
- Everyone can contribute; no silos.
- We do an optional, asynchronous daily stand-up in [#s_plan_standup](https://gitlab.slack.com/messages/CF6QWHRUJ).

### Workflow

We work in a continuous Kanban manner while still aligning with Milestones and [GitLab's Product Development Flow](/handbook/product-development-flow/).

#### Capacity Planning

When we're planning capacity for a future release, we consider the following:

1. Availability of the teams during the next release. (Whether people are out of the office, or have other demands on their time coming up.)
1. Work that is currently in development but not finished.
1. Historical delivery (by weight) per group.

The first item gives us a comparison to our maximum capacity. For instance, if the team has four people, and one of them is taking half the month off, then we can say the team has 87.5% (7/8) of its maximum capacity.

The second item is challenging and it's easy to understimate how much work is left on a given issue once it's been started, particularly if that issue is blocking other issues. We don't currently re-weight issues that carry over (to preserve the original weight), so this is fairly vague at present.

The third item tells us how we've been doing previously. If the trend is downwards, we can look to discuss this in our [retrospectives](#retrospectives).

Subtracting the carry over weight (item 2) from our expected capacity (the product of items 1 and 3) should tell us our capacity for the next release.

##### Historical capacity

<%= partial("handbook/engineering/development/dev/plan/historical_capacity") %>

#### Issues

Issues have the following lifecycle. The colored circles above each workflow stage represents the emphasis we place on collaborating across the entire lifecycle of an issue; and that disciplines will naturally have differing levels of effort required dependent upon where the issue is in the process. If you have suggestions for improving this illustration, you can leave comments directly on the [whimsical diagram](https://whimsical.com/2KEwLADzCJdDfPAb2CULk4).

![plan-workflow-example.png](plan-workflow-example.png)

#### Epics

If an issue is `> 3 weight`, it should be promoted to an epic (quick action) and split it up into multiple issues. It's helpful to add a task list with each task representing a vertical feature slice (MVC) on the newly promoted Epic. This enables us to practice "Just In Time Planning" by creating new issues from the task list as there is space downstream for implementation. When creating new vertical feature slices from an epic, please remember to add the appropriate labels - `devops::plan`, `group::*`, `Category:*` or `feature label`, and the appropriate `workflow stage label` - and attach all of the stories that represent the larger epic. This will help capture the larger effort on the roadmap and make it easier to schedule.

#### Themes

A small number of high priority features will be chosen as 'themes' for a period of time. Themes provide an opportunity for the whole team to rally around a deliverable, even if they don't contribute directly to it. These items are given especially close attention by all those involved with a view to delivering small iterations and keeping work unblocked. There should never be more than two themes in progress at a time per team.

- A Slack channel is created with the convention #f_[feature name].
- An epic hierarchy is created with sub-epics mapping to iterations, each achievable within a milestone.
- Iterations are broken into multiple issues that can be accomplished independently, and PMs schedule those as normal.
- Other actions may be established, such as regular 'office hours' calls.

Team-members work together to continuously refine the iterations as complexity is revealed.

Examples of successful themes:

1. **Requirements Management** ([#f_requirements-management](https://app.slack.com/client/T02592416/CUEQBQ7K8), [Epic](https://gitlab.com/groups/gitlab-org/-/epics/2703))
1. **Jira Importer** ([#f_jira-importer](https://app.slack.com/client/T02592416/CUS6GB2JH), [Epic](https://gitlab.com/groups/gitlab-org/-/epics/2738))

#### Roadmap Organization

``` mermaid
graph TD;
  A["devops::plan"] --> B["group::*"];
  B --> C["Category:*"];
  B --> D["non-category feature"];
  C --> E["maturity::minimal"];
  C --> F["maturity::viable"];
  C --> G["maturity::complete"];
  C --> H["maturity::lovable"];
  E--> I["Iterative Epic(s)"];
  F--> I;
  G --> I;
  H --> I;
  D --> I;
  I--> J["Issues"];
```

### Talking With Customers

In a perfect world, we would have cross-functional representation in every conversation we have with customers. To help work towards realizing this, anyone who is scheduling a call with a customer via sales, conducting usabiity reasearch, or generally setting up a time to speak with customers or prospects is encouraged to add [the Plan Customer Interviews calender](https://calendar.google.com/calendar/u/0/embed?src=gitlab.com_5icpbg534ot25ujlo58hr05jd0@group.calendar.google.com) as an invitee to the event. This will automatically populate the shared calendar with upcoming customer and user iteractions. All team members are welcome and encouraged to join -- even if it's just to listen in and get context.

You can subscribe to the calendar and invite it as a participant in a customer meeting that you are scheduling using the URL [gitlab.com_5icpbg534ot25ujlo58hr05jd0@group.calendar.google.com](gitlab.com_5icpbg534ot25ujlo58hr05jd0@group.calendar.google.com).

### Board Refinement

We perform many board refinement tasks asynchronously, using GitLab issues
in the [Plan project]. The policies for these issues are defined in
[triage-ops/policies/plan-stage]. Some of these issues use supplemental
boards:

1. [Plan backend / frontend check][befecheck] - engineering managers
check that issues on the current milestone have ~backend and
~frontend labels correctly assigned. If they don't, they won't show
up on a team's build board.
1. [Plan group check][groupcheck] - engineering managers check that
issues on the current milestone have a group label. Again, if they
don't, they won't show up on a group-specific build board.

Other issues just define that, for instance, anything in or to the left
of ~"workflow::ready for development" should be moved as a milestone
comes to a close. A full list of refinement issues is available by
[filtering by the ~"Plan stage refinement" label][refinement-issues].

[Plan project]: https://gitlab.com/gitlab-org/plan
[triage-ops/policies/plan-stage]: https://gitlab.com/gitlab-org/quality/triage-ops/tree/master/policies/plan-stage
[befecheck]: https://gitlab.com/groups/gitlab-org/-/boards/1134263
[groupcheck]: https://gitlab.com/groups/gitlab-org/-/boards/1383681
[refinement-issues]: https://gitlab.com/gitlab-org/plan/issues?label_name%5B%5D=Plan+stage+refinement

### Tracking Committed Work for an Upcoming Release

While we operate in a continuous Kanban manner, we want to be able to report on and communicate if an issue or epic is on track to be completed by a Milestone's due date. To provide insight and clarity on status we will leverage [Issue/Epic Health Status](https://docs.gitlab.com/ee/user/project/issues/index.html#health-status) on priority issues.

At the beginning of the Milestone, Product and Engineering Managers will assign the 'On Track' status to agreed-upon priority issues. As the Milestone progresses, anyone contributing to the work should update the Health Status as appropriate to surface risk or concerns as quickly as possible, and to jumpstart collaboration on getting an issue back to "On Track".

#### Health Status Definitions for Plan :

- _On Track_ - We are confident this issue will be completed and live for the current milestone
- _Needs Attention_ - There are concerns, new complexity, or unanswered questions that if left unattended will result in the issue missing its targeted release. Collaboration needed to get back On Track
- _At Risk_ - The issue in its current state will not make the planned release and immediate action is needed to rectify the situation

#### Flagging Risk is not a Negative

We feel it is important to document and communicate, that changing of any item's Health Status to "Needs Attention" or "At Risk" is not a negative action or something to be cause anxiety or concern. Raising risk early helps the team to respond and resolve problems faster and should be encouraged.

### Retrospectives

The Plan stage conducts [monthly retrospectives in GitLab
issues][retros]. These are confidential during the initial discussion,
then made public in time for each month's [GitLab retrospective]. For
more information, see [team retrospectives].

The retrospective issue is created by a scheduled pipeline in the
[async-retrospectives] project. For more information on how it works, see that
project's README.

[GitLab retrospective]: /handbook/engineering/workflow/#retrospective
[team retrospectives]: /handbook/engineering/management/team-retrospectives/
[async-retrospectives]: https://gitlab.com/gitlab-org/async-retrospectives
[retros]: https://gitlab.com/gl-retrospectives/plan/issues?scope=all&utf8=%E2%9C%93&state=all&label_name[]=retrospective

### Meetings

Most of our group meetings are recorded and publicly available on
YouTube in the [Plan group playlist][youtube].

<iframe width="560" height="315" src="https://www.youtube.com/embed/videoseries?list=PL05JrBw4t0KoceqcTneOVmAzhEp6NinY0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>

[youtube]: https://www.youtube.com/playlist?list=PL05JrBw4t0KoceqcTneOVmAzhEp6NinY0
#### Weekly group meeting

We hold a weekly team meeting where all team members across all functions are invited. We currently alternate the meeting time each week to be inclusive of our distributed team. The meeting is either EMEA (+Eastern US) friendly or APAC (+Western US) friendly. Regardless of the timezone we always record each meeting and post it to our youtube playlist.

The [agenda] follows this format:

1. Team updates: new hires, transfers, promotions, people leaving, etc.
1. Big-picture updates: these are typically either forward-facing
(vision statements), or backwards-looking (how a feature impacted
users, sales, etc.).
1. Issue-specific discussion and demos: any issues that people want to
share with the wider group, that can't be handled using our normal
asynchronous workflow.
1. Workflow: how we improve how we work together in future (including
updating this page).
1. Anything else.

If there are no agenda items eight hours prior to the call, we skip the call entirely.

[agenda]: https://docs.google.com/document/d/1cbsjyq9XAt9UYLIxDq5BYFk47VA5aaTeHfkY2dttqfk/edit

#### Links / References
- `~group::project management`
  - [Board](https://gitlab.com/groups/gitlab-org/-/boards/1285239)
  - [Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Aplan&label_name[]=group%3A%3Aproject%20management)
- `~group::product planning`
  - [Board](https://gitlab.com/groups/gitlab-org/-/boards/1569369?not[milestone_title]=Backlog)
  - [Roadmap](https://gitlab.com/groups/gitlab-org/-/roadmap?scope=all&utf8=%E2%9C%93&state=opened&label_name[]=devops%3A%3Aplan&label_name[]=group%3A%3Aproduct+planning)
- `~group::certify`
  - [Board](https://gitlab.com/groups/gitlab-org/-/boards/1235846?not[milestone_title]=Backlog)


### Team Process

Each group within the Plan stage follows GitLab's [product development flow](https://about.gitlab.com/handbook/product-development-flow/) and [process](https://about.gitlab.com/handbook/product/product-processes/). This allows for consistency across the stage, enables us to align with other stages and stable-counterparts, and enables us to clearly understand our throughput and velocity. We're currently focused on strictly following the process stated in the handbook, as opposed to creating our own local optimizations.

In some cases we need to dogfood a new Plan feature that may adjust our adherence to the GitLab's process. If that happens we assign a DRI responsible for setting the objective, reporting on the outcomes and facilitating feedback to ensure we prioritize improvements to our own product. This ensures we're not making a change for the sake of making changes, and gives us clarity into our own evaluation of a change to the product.
In some cases we need to dogfood a new Plan feature that may adjust our adherence to the GitLab's process. If that happens we assign a DRI responsible for setting the objective, reporting on the outcomes and facilitating feedback to ensure we prioritize improvements to our own product. This ensures we're not making a change for the sake of making changes, and gives us clarity into our own evaluation of a change to the product.

There are a couple of process-related improvements we'll continue to adopt:

- **Iterations:** We've recently started organizing the prioritized work in a given milestone into weekly iterations. This doesn't change any of the canonical process, and allows us to break a months worth of work into sizeable timeboxes. Intended outcome: Dogfood iterations (the feature), improve velocity and give more granular visibility into the progress of issues. DRI: @donaldcook

### Product Outreach

There can be a gap in understanding between Engineering and Product on a team. We are experimenting with a pilot programme that will allow engineers to spend time in the world of Product, with the goal of greater mutual communication, understanding and collaboration. It helps us work more effectively as a team for better features.

#### Product Shadowing schedule

Engineering team-members can shadow a product stable-counterpart. Shadowing sessions last two working days, or the equivalent split over multiple days to maximize experience with different functions of the role. In particular, the session should include at least one customer call. To shadow a counterpart on the team:

1. Create an issue in the [plan](https://gitlab.com/gitlab-org/plan) project tracker using the `Product-Shadowing` template;
1. Create a WIP MR to this page to update the table below, adding your name and issue link, and
1. When your counterpart is assigned to the issue, add their name, remove WIP status and assign to your manager for review.

| Month | Engineering counterpart | Product counterpart | Issue link |
| ----- | ----------------------- | ------------------- | ---------- |
| 2020-07 | Charlie Ablett ([@cablett](https://gitlab.com/cablett)) | Keanon O'Keefe ([@kokeefe](https://gitlab.com/kokeefe)) | [gitlab-org/plan#118](https://gitlab.com/gitlab-org/plan/-/issues/118) |
| 2020-10 | Jan Provaznik ([@jprovaznik](https://gitlab.com/jprovaznik)) | Gabe Weaver ([@gweaver](https://gitlab.com/gweaver)) | [gitlab-org/plan#185](https://gitlab.com/gitlab-org/plan/-/issues/185) |

### Speed Runs

- Labels
    - [Scoped Labels](https://youtu.be/ebyCiKMFODg)
- Issues
    - [Description Change History](https://youtu.be/-JgfJSSLYlI)
- Epics
    - [Organize sub-Epics with the Epic Tree](https://youtu.be/TzRCan5ki6o)
- Requirements Management
    - [Requirements MVC](https://youtu.be/uSS7oUNSEoU)
    - [Satisfy Requirements from CI Pipeline](https://youtu.be/4m1mSEb2ywU)

### Metrics

#### Plan xMAU

- [Project Management Performance Indicators](https://about.gitlab.com/handbook/product/dev-section-performance-indicators/#plan-planproject-management---smau-paid-gmau---mau-interacting-with-issues), [Issue Interactions Dashboard](https://app.periscopedata.com/app/gitlab/775807/Plan-xMAU-(monthly))
- [Product Planning Performance Indicators](https://about.gitlab.com/handbook/product/dev-section-performance-indicators/#planproduct-planning---paid-gmau---mau-creating-epics-each-month)
- [Certify Performance Indicators](https://about.gitlab.com/handbook/product/dev-section-performance-indicators/#plancertify---paid-gmau---mau-interacting-with-requirements)
