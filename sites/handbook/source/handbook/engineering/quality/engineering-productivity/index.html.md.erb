---
layout: handbook-page-toc
title: "Engineering Productivity team"
description: "The Engineering Productivity team increases productivity of GitLab team members and contributors by shortening feedback loops and improving workflow efficiency for GitLab projects."
---
## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}

#### Child Pages
{:.no_toc}

##### [GDK](/handbook/engineering/quality/engineering-productivity/gdk/)
{:.no_toc}

##### [Flaky tests](/handbook/engineering/quality/engineering-productivity/flaky-tests/)
{:.no_toc}

##### [Make review apps faster](/handbook/engineering/quality/engineering-productivity/make-review-apps-faster/)
{:.no_toc}

## Common Links

| **GitLab Team Handle** | [`@gitlab-org/quality/engineering-productivity`](https://gitlab.com/gitlab-org/quality/engineering-productivity) |
| **Slack Channel** | [`#g_engineering_productivity`](https://gitlab.slack.com/archives/CMA7DQJRX) |
| **Team Boards** | [Team Board](https://gitlab.com/groups/gitlab-org/-/boards/978615) & [Priority Board](https://gitlab.com/groups/gitlab-org/-/boards/1333450) |
| **Issue Tracker** | [`gitlab-org/quality/engineering-productivity/team`](https://gitlab.com/gitlab-org/quality/engineering-productivity/team/-/issues/) |

### Office hours

Engineering productivity has monthly office hours on the 3rd Wednesday of the month at the 13:30 UTC (6:30 PST) on odd months (e.g January, March, etc) and 3:00 UTC (20:00 PST) on even months (e.g February, April, etc) open for anyone to add topics or questions to the [agenda](https://docs.google.com/document/d/1_4BapuLIufA_OJ1YSdqdq-aLw4kjBLWQZw2hqSKDsJc/edit#). Office hours can be found in the [GitLab Team Meetings calendar](https://about.gitlab.com/handbook/tools-and-tips/#gitlab-team-meetings-calendar)

## Vision

The Engineering Productivity team increases productivity of GitLab team members and contributors by shortening feedback loops and improving workflow efficiency for GitLab projects. The team uses a quantified approach to identify improvements and measure results of changes.

### Mission

[Reduce pipeline cost](/handbook/engineering/quality/performance-indicators/#gitlab-project-average-pipeline-cost-per-merge-request), [reduce pipeline duration](/handbook/engineering/quality/performance-indicators/#gitlab-project-average-successful-merge-request-pipeline-duration), and [increase pipeline stability](/handbook/engineering/quality/performance-indicators/#gitlab-project-master-pipeline-success-rate) for GitLab projects focusing on projects with the largest reach, leveraging GitLab features where possible.

Improve engineering workflow automation to decrease [Open MR Review Time (OMRT)](/handbook/engineering/development/performance-indicators/#open-mr-review-time-omrt) and [Open MR Age (OMA)](/handbook/engineering/development/performance-indicators/#open-mr-age-oma), and decrease [open ~"type::bug" age](/handbook/engineering/quality/performance-indicators/#s1-oba).

Enable frequent and positive experience of Community Contributions from the Wider GitLab Community.

### Workstream objectives

The Engineering Productivity team focuses on the following workstreams and the associated Epics with workstream specific vision and objectives.

| Tracking Label | Epics |
| --- | --- |
| ~"ep::pipeline" | [GitLab Project Pipeline Improvement](https://gitlab.com/groups/gitlab-org/-/epics/1853)<br />[GitLab Project Selective Test Execution](https://gitlab.com/groups/gitlab-org/-/epics/3806)<br />[Measure and act on flaky specs](https://gitlab.com/groups/gitlab-org/-/epics/8789) |
| ~"ep::review-apps" | [Improve Review Apps Reliability](https://gitlab.com/groups/gitlab-org/-/epics/605)<br />[Improve Review Apps setup and usefulness](https://gitlab.com/groups/gitlab-org/-/epics/606) |
| ~"ep::triage" | [Quality: Triage](https://gitlab.com/groups/gitlab-org/-/epics/1461) |
| ~"ep::metrics" | [Centralized handbook first metrics dashboard](https://gitlab.com/groups/gitlab-org/-/epics/3580) |
| ~"ep::workflow" | [Reviewer Roulette Improvements](https://gitlab.com/groups/gitlab-org/-/epics/3287) |

## Areas of Responsibility

* **See it and find it**: Build automated measurements and dashboards to gain insights into the productivity of the Engineering organization to identify opportunities for improvement.
  * Implement new measurements to provide visibility into improvement opportunities.
  * Collaborate with other Engineering teams to provide visualizations for measurement objectives.
  * Improve existing performance indicators.
* **Do it for internal team**: Increase contributor and developer productivity by making measurement-driven improvements to the development tools / workflow / processes, then monitor the results, and iterate.
  * Identify and implement quantifiable improvement opportunities with proposals and hypothesis for metric improvements.
  * Automated [merge request quality checks](https://docs.gitlab.com/ee/development/dangerbot.html) and [code quality checks](https://docs.gitlab.com/ee/development/contributing/style_guides.html).
  * [GitLab project pipeline](https://docs.gitlab.com/ee/development/pipelines.html) improvements to improve efficiency, quality or duration.
* **Dogfood use**: Dogfood GitLab product features to improve developer workflow and provide feedback to product teams.
  * Use new features from related product groups (Analytics, Monitor, Testing).
  * Improve usage of [Review Apps] for GitLab development and testing.
* **Engineering support**: Participate in activities related to [Engineering MR Rate](/handbook/engineering/performance-indicators/#engineering-mr-rate) and [Quality KPIs](/handbook/engineering/quality/performance-indicators/).
  * [`#master-broken`](/handbook/engineering/workflow/#broken-master) pipeline monitoring.
  * KPI corrective actions such as [Review Apps stabilization](/handbook/engineering/quality/performance-indicators/#review-app-deployment-success-rate-for-gitlab).
  * [Merge Request Coach](/job-families/expert/merge-request-coach/) for ~"Community contribution" merge requests.
* **Engineering workflow**: Develop automated processes for improving label classification hygiene in support of product and Engineering workflows.
  * [Automated issues and merge requests triage](/handbook/engineering/quality/triage-operations/).
  * Improvements to the labelling classification and automation used to support Engineering measurements.
  * See the [GitLab Triage], and [GitLab triage operations] projects for examples.
* **Do it for wider community**: Increase efficiency for wider GitLab Community contributions.
* **Dogfood build**: Enhance and add new features to the GitLab product to improve engineer productivity.

## Team Structure

Engineering Productivity team resides under the Quality Department operating as a team of Full-stack engineers, led by an Engineering Manager reporting to the
Quality Department Leader.

```mermaid
graph TD
    A[Quality Department]
    A --> B[Engineering Analytics Team]
    A --> C[Contributor Success team]
    A --> D(Quality Engineering)
    A --> E[Engineering Productivity Team]
    E --> EA[Engineering Productivity Engineer]
    E --> EB[Engineering Productivity Engineer]

    click A "/handbook/engineering/quality"
    click B "/handbook/engineering/quality/engineering-analytics"
    click C "/handbook/engineering/quality/contributor-success"
    click D "/handbook/engineering/quality/quality-engineering"
    click E "/handbook/engineering/quality/engineering-productivity"

    style E fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style EA fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
    style EB fill:#bbf,stroke:#f66,stroke-width:2px, color:#fff
```

## Team Members

<%= direct_team(manager_role: 'Backend Engineering Manager, Engineering Productivity') %>

### Stable Counterpart

| Person | Role |
| --- | --- |
| Greg Alfaro | [GDK Project Stable Counterpart](https://about.gitlab.com/handbook/engineering/quality/engineering-productivity/gdk/), Application Security |

## Team meetings

Engineering Productivity has an alternating [weekly team meeting schedule](https://docs.google.com/document/d/1yzHuosvykzb_kaldjGP9I6wxpNpMXdNEvEFBkHyZpXs/edit#) to allow for all team members to collaborate in times that work for them. 

- Week 1 is Tuesdays 1200 UTC, 0400 PDT
- Week 2 is Tuesdays 1630 PDT, Wednesday 0030 UTC

### Showcase

Showcases are done every two months and will be voted on by the team asynchronously in an issue. 

1. Engineering Manager will create an issue to discuss showcase during the second week of even months. 
1. Team members will identify topics they'd like to learn more about or demo for the team.
1. Team members vote with `:thumbsup:` reactions on the ideas they'd like to hear about. 
1. Engineering Manager will identify a DRI to lead the showcase and schedule for the second week of the odd month. 

## Work prioritization

The Engineering Productivity team uses [modified prioritization and planning guidelines](prioritization.html) for targeting work within a Milestone.

## Projects

1. [GitLab] CI [Pipeline configuration optimization and stability](https://docs.gitlab.com/ee/development/pipelines.html).
1. [GitLab] [Review apps] provisioning.
1. [GitLab triage operations] for issues, merge requests, community contributions.
1. [GitLab Triage] engine, used by [GitLab triage operations].
1. [Development department metrics](/handbook/engineering/development/performance-indicators) for measurements of Quality and Productivity.
1. [GitLab Dangerfiles] for shared [Danger](https://docs.gitlab.com/ee/development/dangerbot.html#danger-bot) rules and plugins.
1. [GitLab Styles] for shared [RuboCop cops](https://docs.gitlab.com/ee/development/contributing/style_guides.html#ruby-rails-rspec).
1. [GitLab Development Kit (GDK)] continued development.
1. [GitLab feature flag alert] for reporting on GitLab feature flags.
1. [GitLab RSpec Profiling Statistics] for profiling information on RSpec tests in CI.

## Active Quarter OKRs

<iframe src="https://app.ally.io/public/bXJs2qbiOBjFf4M" class="dashboard-embed" height="1000" width="100%" style="border:none;"> </iframe>

## Previous Quarter OKRs

<iframe src="https://app.ally.io/public/HSTiKTDxLQ33iHS" class="dashboard-embed" height="1000" width="100%" style="border:none;"> </iframe>

## Engineering productivity team metrics

The Engineering Productivity team creates metrics in the following sources to aid in operational reporting.

- [Sisense Quality Engineering KPIs](https://app.periscopedata.com/app/gitlab/516343/Quality-KPIs)
- [Sisense Engineering Productivity Sandbox](https://app.periscopedata.com/app/gitlab/496118/Engineering-Productivity-Sandbox)
- [Sisense Engineering Productivity Pipeline](https://app.periscopedata.com/app/gitlab/564156/Engineering-Productivity---Pipeline)
- [Sisense Engineering Productivity Jobs Durations](https://app.periscopedata.com/app/gitlab/652085/Engineering-Productivity---Pipeline-Build-Durations)
- [Sisense Engineering Productivity Package And QA Durations](https://app.periscopedata.com/app/gitlab/869271/Engineering-Productivity---Package-And-QA-Durations)
- [Sisense GitLab Issue Triage Dashboard](https://app.periscopedata.com/app/gitlab/621211/WIP:-GitLab-Issue-Triage-Dashboard)
- [GitLab-Org Native Insights](https://gitlab.com/groups/gitlab-org/-/insights)
- [Review Apps monitoring dashboard](https://app.google.stackdriver.com/dashboards/6798952013815386466?project=gitlab-review-apps)
- Triage Reactive monitoring dashboards
  - [Overview dashboard](https://console.cloud.google.com/monitoring/dashboards/builder/e3e9d8fc-54cd-4a98-b4a3-e81f01d37e26?project=gitlab-qa-resources&dashboardBuilderState=%257B%2522editModeEnabled%2522:false%257D&timeDomain=1w)
  - [Processors dashboard](https://console.cloud.google.com/monitoring/dashboards/builder/3338d66b-649c-4ea9-aec9-14ffba96c25f?project=gitlab-qa-resources&dashboardBuilderState=%257B%2522editModeEnabled%2522:false%257D&timeDomain=1w)

## Team gearing ratio

**Exception Ratio**: 2 Staff+ Engineering Team

**Justification**: Engineering Productivity has a wide focus to enable efficiency for GitLab code workflows. The team is implementing productivity improvements and globally optimizing for all workflows (GitLab, JiHu and Contributors). Staff+ team members focus on digging deep into feedback loop bottlenecks ([Solver](https://about.gitlab.com/handbook/engineering/ic-leadership/#solver)) and ensuring that the approach and implementation is scalable ([Tech Lead](https://about.gitlab.com/handbook/engineering/ic-leadership/#tech-lead)) by working with counterparts in Development and Infrastructure departments.

**Future Growth or Anticipated Change**: It is expected that Engineering Productivity will maintain the current ratio during FY22 and re-evaluate in FY23.

## Communication guidelines

The Engineering Productivity team will make changes which can create notification spikes or new behavior for
GitLab contributors. The team will follow these guidelines in the spirit of [GitLab's Internal Communication Guidelines](/handbook/communication/internal-communications).

### Pipeline changes

#### Critical pipeline changes

Pipeline changes that have the potential to have an impact on the GitLab.com infrastructure should follow the [Change Management](/handbook/engineering/infrastructure/change-management) process.

Pipeline changes that meet the following criteria must follow the [Criticality 3](/handbook/engineering/infrastructure/change-management/#criticality-3) process:

- update to the [`cache-repo` job](https://gitlab.com/gitlab-org/gitlab/-/blob/master/.gitlab/ci/cache-repo.gitlab-ci.yml) job

These kind of changes [led to production issues in the past](https://gitlab.com/gitlab-com/gl-infra/production/-/issues/3013).

#### Non-critical pipeline changes

The team will communicate significant pipeline changes to [`#development`](https://gitlab.slack.com/messages/C02PF508L) in Slack and the Engineering Week in Review.

Pipeline changes that meet the following criteria will be communicated:

- addition, removal, renaming, parallelization of jobs
- changes to the conditions to run jobs
- changes to pipeline DAG structure

Other pipeline changes will be communicated based on the team's discretion.

### Automated triage policies

Be sure to give a heads-up to `#development`,`#eng-managers`,`#product`, `#ux` Slack channels
and the Engineering week in review when an automation is expected to triage more
than 50 notifications or change policies that a large stakeholder group use (e.g. team-triage report).

## Experiments

This is a list of Engineering Productivity experiments where we identify an opportunity, form a hypothesis and experiment to test the hypothesis.

| Experiment | Status | Hypothesis | Feedback Issue or Findings |
| --- | --- | --- | --- |
| [Always run minimal jobs for fork pipelines](https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/1170) | Complete | The goal is to reduce the CI minutes consumed by fork pipelines. The "full" jobs only run for canonical pipelines (i.e. pipelines manually started by a member of the project) once the MR is approved. | |
| [Retry failed specs in a new process after the initial run](https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/1148) | Complete | Given that a lot of flaky tests are unreliable due to previous test which are affecting the global state, retrying only the failing specs in a new RSpec process should result in a better overall success rate. | https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/1148#note_914106156 |
| [Experiment with automatically skipping identified flaky tests](https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/1069) | Complete | Skipping flaky tests should reduce the number of false broken `master` and increase the `master` success rate. | We found that this doesn't seem to have a negative impact on `master` stability so the experiment was made opt-out. |
| [Experiment with running previously failed tests early](https://gitlab.com/gitlab-org/gitlab/-/issues/333857) | In Progress | Can iteration or cycle time be improved if failed tests are run earlier in the `gitlab-org/gitlab` pipeline? | |
| [Store/retrieve tests metadata in/from pages instead of artifacts](https://gitlab.com/gitlab-org/gitlab/-/issues/335675) | In Progress | We're only interested in the latest state of these files, so using Pages makes sense here. Also, this would simplify the logic to retrieve the reports and reduce the load on GitLab.com's infrastructure. | [There are some transient problems where a Cloudflare page is returned instead of the expected JSON file](https://gitlab.com/gitlab-org/gitlab/-/issues/337319). |
| [Reduce pipeline cost by reducing number of rspec tests before MR approval](https://gitlab.com/gitlab-org/gitlab/-/issues/336063) | In Progress | Reduce the CI cost for GitLab pipelines by running the most applicable rspec tests for changes prior to approval | |
| [Enabling developers to run failed specs locally](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/58569) | In Progress | Enabling developers to run failed specs locally will lead to less pipelines per merge request and improved productivity from being able to fix regressions more quickly | <https://gitlab.com/gitlab-org/gitlab/-/issues/327660> |
| [Use dynamic analysis to streamline test execution](https://gitlab.com/gitlab-org/gitlab/-/issues/222369) | Complete | Dynamic analysis can reduce the amount of specs that are needed for MR pipelines without causing significant disruption to master stability | [Miss rate of 10%](https://gitlab.com/gitlab-org/gitlab/-/issues/222369#note_480768617) would cause a large impact to master stability. Look to leverage dynamic mapping with local developer tooling. Added [documentation](https://docs.gitlab.com/ee/development/pipelines.html#rspec-minimal-job-experiment) from the experiment. |
| [Using timezone for Reviewer Roulette suggestions](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/34862) | Complete - Reverted | Using timezone in Reviewer Roulette suggestions will lead to a reduction in the mean time to merge | Reviewer Burden was inconsistently applied and specific reviewers were getting too many reviews compared to others. More details in the [experiment issue](https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/563#note_397680373) and [feedback issue](https://gitlab.com/gitlab-org/gitlab/-/issues/227123) |

[GitLab]: https://gitlab.com/gitlab-org/gitlab
[GitLab Insights]: https://gitlab.com/gitlab-org/gitlab-insights
[GitLab Triage]: https://gitlab.com/gitlab-org/gitlab-triage
[GitLab triage operations]: https://gitlab.com/gitlab-org/quality/triage-ops
[Review apps]: https://docs.gitlab.com/ee/development/testing_guide/review_apps.html
[GitLab Development Kit (GDK)]: https://gitlab.com/gitlab-org/gitlab-development-kit

[GitLab docs]: https://gitlab.com/gitlab-org/gitlab-docs
[GitLab Dangerfiles]: https://gitlab.com/gitlab-org/ruby/gems/gitlab-dangerfiles
[GitLab Styles]: https://gitlab.com/gitlab-org/ruby/gems/gitlab-styles
[GitLab feature flag alert]: https://gitlab.com/gitlab-org/gitlab-feature-flag-alert
[Gitlab RSpec Profiling Statistics]: https://gitlab.com/gitlab-org/rspec_profiling_stats
