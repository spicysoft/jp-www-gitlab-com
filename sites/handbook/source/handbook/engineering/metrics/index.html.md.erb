---
layout: handbook-page-toc
title: "Engineering Metrics"
---

## On this page
{:.no_toc}

- TOC
{:toc}

## Centralized Engineering Metrics

Our centralized engineering dashboards provide a set of common metrics that capture the overall health of the entire R&D Product/Engineering structure, with drill downs into every stage and group.

This work is the product of the team working in our unified [engineering metrics task process](/handbook/engineering/quality#engineering-metrics-task-process).
The inception of this initiative can be see in this [epic](https://gitlab.com/groups/gitlab-org/-/epics/3580).

### Engineering Metrics Dashboards

The links below take you to a handbook dashboard page which covers metrics from the Development, Infrastructure, Quality, UX, and Security Departments.

* [Dev Section Dashboards](/handbook/engineering/metrics/dev/)
  * [Create Stage Dashboards](/handbook/engineering/metrics/dev/create)
    * [Source Code Group Dashboards](/handbook/engineering/metrics/dev/create/source-code)
    * [Code Review Group Dashboards](/handbook/engineering/metrics/dev/create/code-review)
    * [Editor Group Dashboards](/handbook/engineering/metrics/dev/create/editor)
    * [Gitaly Group Dashboards](/handbook/engineering/metrics/dev/create/gitaly)
  * [Plan Stage Dashboards](/handbook/engineering/metrics/dev/plan)
    * [Project Management Group Dashboards](/handbook/engineering/metrics/dev/plan/project-management)
    * [Product Planning Group Dashboards](/handbook/engineering/metrics/dev/plan/product-planning)
  * [Manage Stage Dashboards](/handbook/engineering/metrics/dev/manage)
    * [Access Group Dashboards](/handbook/engineering/metrics/dev/manage/access)
    * [Compliance Group Dashboards](/handbook/engineering/metrics/dev/manage/compliance)
    * [Import Group Dashboards](/handbook/engineering/metrics/dev/manage/import)
    * [Optimize Group Dashboards](/handbook/engineering/metrics/dev/manage/optimize)
    * [Workspace Group Dashboards](/handbook/engineering/metrics/dev/manage/workspace)
  * [Ecosystem Stage Dashboards](/handbook/engineering/metrics/dev/ecosystem)
    * [Integrations Group Dashboards](/handbook/engineering/metrics/dev/ecosystem/integrations)
    * [Foundations Group Dashboards](/handbook/engineering/metrics/dev/ecosystem/foundations)
* [Ops Section Dashboards](/handbook/engineering/metrics/ops/)
  * [Verify Stage Dashboards](/handbook/engineering/metrics/ops/verify)
    * [Pipeline Execution Group Dashboards](/handbook/engineering/metrics/ops/verify/pipeline-execution)
    * [Pipeline Authoring Group Dashboards](/handbook/engineering/metrics/ops/verify/pipeline-authoring)
    * [Runner Group Dashboards](/handbook/engineering/metrics/ops/verify/runner)
    * [Pipeline Insights Group Dashboards](/handbook/engineering/metrics/ops/verify/pipeline-insights)
  * [Package Stage Dashboards](/handbook/engineering/metrics/ops/package)
  * [Configure Stage Dashboards](/handbook/engineering/metrics/ops/configure)
  * [Monitor Stage Dashboards](/handbook/engineering/metrics/ops/monitor)
  * [Release Stage Dashboards](/handbook/engineering/metrics/ops/release)
* [Sec Section Dashboards](/handbook/engineering/metrics/sec/)
  * [Secure Stage Dashboards](/handbook/engineering/metrics/sec/secure/)
    * [Static Analysis Group Dashboards](/handbook/engineering/metrics/sec/secure/static-analysis)
    * [Dynamic Analysis Group Dashboards](/handbook/engineering/metrics/sec/secure/dynamic-analysis)
    * [Composition Analysis Group Dashboards](/handbook/engineering/metrics/sec/secure/composition-analysis)
    * [Threat Insights Group Dashboards](/handbook/engineering/metrics/sec/secure/threat-insights)
    * [Vulnerability Research Group Dashboards](/handbook/engineering/metrics/sec/secure/vulnerability-research)
  * [Protect Stage Dashboards](/handbook/engineering/metrics/sec/protect/)
    * [Container Security Group Dashboards](/handbook/engineering/metrics/sec/protect/container-security)
  * [Anti-Abuse Stage Dashboards](/handbook/engineering/metrics/sec/anti-abuse/)
    * [Anti-Abuse Group Dashboards](/handbook/engineering/metrics/sec/anti-abuse/anti-abuse)
* [Analytics Section Dashboards](/handbook/engineering/metrics/analytics)
  * [Product Intelligence Group Dashboards](/handbook/engineering/metrics/analytics/product-intelligence)
* [Growth Section Dashboards](/handbook/engineering/metrics/growth)
  * [Acquisition Group Dashboards](/handbook/engineering/metrics/growth/acquisition)
  * [Activation Group Dashboards](/handbook/engineering/metrics/growth/activation)
* [Fulfillment Section Dashboards](/handbook/engineering/metrics/fulfillment/)
  * [Purchase Group Dashboards](/handbook/engineering/metrics/fulfillment/purchase)
  * [License Group Dashboards](/handbook/engineering/metrics/fulfillment/license)
  * [Utilization Group Dashboards](/handbook/engineering/metrics/fulfillment/utilization)
* [Enablement Section Dashboards](/handbook/engineering/metrics/enablement/)
  * [Systems Stage Dashboards](/handbook/engineering/metrics/enablement/systems)
    * [Distribution Group Dashboards](/handbook/engineering/metrics/enablement/distribution)
    * [Geo Group Dashboards](/handbook/engineering/metrics/enablement/geo)
  * [Data Stores Stage Dashboards](/handbook/engineering/metrics/enablement/data-stores)
    * [Memory Group Dashboards](/handbook/engineering/metrics/enablement/memory)
    * [Global Search Group Dashboards](/handbook/engineering/metrics/enablement/global-search)
    * [Database Group Dashboards](/handbook/engineering/metrics/enablement/database)
    * [Sharding Group Dashboards](/handbook/engineering/metrics/enablement/sharding)
* [ModelOps Section Dashboards](/handbook/engineering/metrics/modelops/)
  * [Applied Machine Learning Group Dashboards](/handbook/engineering/metrics/modelops/applied-ml)
  * [MLOps Group Dashboards](/handbook/engineering/metrics/modelops/mlops)
  * [DataOps Group Dashboards](/handbook/engineering/metrics/modelops/dataops)

These handbook dashboard pages are populated from 5 filterable Sisense dashboards.
* [Development Embedded Dashboard](https://app.periscopedata.com/app/gitlab/681347/Development-Embedded-Dashboard)
* [Quality Embedded Dashboard](https://app.periscopedata.com/app/gitlab/736012/Quality-Embedded-Dashboard)
* [Infrastructure Embedded Dashboard](https://app.periscopedata.com/app/gitlab/798401/Infrastructure-Embedded-Dashboard)
* [UX Embedded Dashboard](https://app.periscopedata.com/app/gitlab/736036/UX-Embedded-Dashboard)
* [Security Embedded Dashboard](https://app.periscopedata.com/app/gitlab/758795/Appsec-Embedded-Dashboard)

#### How to navigate Engineering Metrics Dashboards
To navigate to section metrics, click on the `___ Section Dashboards` link above. To navigate to stage metrics, click on the `___ Stage Dashboards` link above or redirect from the section dashboards pages. To navigate to group metrics, find the stage that contains the group and click on the corresponding `___ Stage Dashboards` link above.

Group metrics can be queried using labels or determining which group the team member is a part of.

**Label Based**: For example, the `~"group::authentication and authorization"` label is used to query MRs or issues belonging to the Authentication and Authorization group. If a group is missing from the filter dropdown in the embedded dashboards above, check if it’s included in this [spreadsheet](https://docs.google.com/spreadsheets/d/1_IFiLaHK9BfpaomwFU864OQWjVgXR3jokwOKIuhXLd8/edit#gid=0). If it’s missing, add a new row with the corresponding stage and section. This spreadsheet flows to our data warehouse once a day so you may not see updates in Sisense until the next day. In order to display this new group in the handbook dashboard pages, please reach out to a member of the [Engineering Analytics Team](https://about.gitlab.com/handbook/engineering/quality/engineering-analytics/#how-to-engage-with-us) to get this added to the handbook dashboard page filters.

**Author Based**: A common metric using author based metric methodology is [MR Rate](https://about.gitlab.com/handbook/engineering/metrics/#merge-request-rate). Instead of looking at labels to determine what group this MR belongs to, we look at the team member who authored the MR to determine the group. Specifically, we use the `job title specialty` field in Bamboo HR. Per the [handbook](https://about.gitlab.com/handbook/people-group/promotions-transfers/#job-information-change-in-bamboohr), managers are responsible for updating the `job title speciality` field in for any/all specialty changes.
* Troubleshooting #1: Ensure that your job title specialty is entered in Bamboo HR. A missing value means you aren't being counted in the metrics.
* Troubleshooting #2: If a team member isn’t counted in the organization metrics but their group information (job title specialty) is correct in Bamboo HR, check that the [notification email in their GitLab.com profile](https://gitlab.com/-/profile/notifications) matches the work email in Bamboo HR. We use this email to connect MRs back to the team member. If there is a mismatch, update the Bamboo HR profile email to match the [GitLab.com notification email](https://gitlab.com/-/profile/notifications).
* Troubleshooting #3: If a group was recently added or moved to a different section, update this [mapping file](https://docs.google.com/spreadsheets/d/1_IFiLaHK9BfpaomwFU864OQWjVgXR3jokwOKIuhXLd8/edit#gid=0). This mapping file links each job title speciality to the corresponding stage and section and flows to our database once a day.

### Metrics list

The Engineering Metrics listed here are available for all product group teams. The indicators captured here may or may not roll into an existing KPI/PI.
The Engineering Analytics team reserves the urgency for these dashboards to provide timely visibility without the requirement of having all indicators be a KPI/PI at the department level.

#### Development indicators

* MRs vs Issues
* [MR Rate](https://about.gitlab.com/handbook/engineering/development/performance-indicators/#development-department-mr-rate)
* [Open MR Review Time (OMRT)](https://about.gitlab.com/handbook/engineering/development/performance-indicators/#open-mr-review-time-omrt)
* MRs by team members vs Community
* [Merged Product MRs by Type](https://about.gitlab.com/handbook/engineering/development/performance-indicators/#overall-mrs-by-type)
* Feature flags older than 2 months
* [Past Due Security Issues](https://about.gitlab.com/handbook/engineering/development/performance-indicators/#past-due-security-issues)

#### Infrastructure indicators

* S1 Open InfraDev Age
* S2 Open InfraDev Age
* InfraDev past SLO
* [Corrective Actions past SLO](https://about.gitlab.com/handbook/engineering/infrastructure/performance-indicators/#corrective-action-slo)
* Open S1/S2 InfraDev Issues

#### Quality indicators

* [S1 Open Bug Age (OBA)](https://about.gitlab.com/handbook/engineering/quality/performance-indicators/#s1-oba)
* [S2 Open Bug Age (OBA)](https://about.gitlab.com/handbook/engineering/quality/performance-indicators/#s2-oba)

#### UX indicators

* [Open UX Debt Age](https://about.gitlab.com/handbook/engineering/ux/performance-indicators/#open-ux-debt-age)
* [Issues with Actionable Insights](https://about.gitlab.com/handbook/engineering/ux/performance-indicators/#actionable-insights)
* Total open SUS-impacting issues by severity
* SUS-impact issues opened/closed

#### Security indicators

* [Average Age of currently open bug vulnerabilities](https://about.gitlab.com/handbook/engineering/security/performance-indicators/#average-age-of-open-vulnerabilities-by-severity)

### Helpful pointers

* Review the chart regularly and take notes of your group, stage or section's trends.
* Take note of anything that might be impacting the team's capacity such as holidays or increased PTO.
* Take note of your team's focus on community contribution as an example. If the team is able to consistently merge MRs in this categories, celebrate it.
* If you see a large amount `undefined`, spend some time to review your team's issues and MRs and add labels so we can get a more accurate classification.

## Merge Request Rate

Merge Request (MR) Rate is a measure of productivity and efficiency. The numerator is a collection of merge requests to a set of projects.  The denominator is a collection of people. Both are tracked over time (usually monthly).

MR Rate begins with an `[Identity]` prefix which defines the group of people (the denominator) taken into calculation. This is usually a Division, Department, Sub-Department, or Team name from our [Organizational Structure](/company/team/structure/#organizational-structure). The calculation for MR rate is the number of authored MRs by the team members divided by the number of team members in the group. `~group::*` labels are **not** used to filter the authored MRs. For example:
* [Engineering MR Rate](/handbook/engineering/performance-indicators/#engineering-mr-rate)
* [Development Department MR Rate](/handbook/engineering/development/performance-indicators/#development-department-mr-rate)

Previously MR Rate was called "Narrow MR Rate," but [that term was removed](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/78269).

### Examples

Team A consists of 5 members. In the past month, there were 200 merged MRs:
* 100 MRs were authored by Team A team members
* 50 MRs were authored by people from  GitLab employees not in Team A.
* 50 MRs were authored by people from the wider-community.

Team A's MR Rate for that month would be: (100 / 5) = 20

## Work Type Classification

We use the following type labels to classify our Issues and Merge Requests.

The 3 types (Bug, Feature & Maintenance) is key to our report to industry analysts. It is important for GitLab to communicate effort spent into a format that is easily understandable widely in the industry. We provide this [metric](https://app.periscopedata.com/app/gitlab/976817/Merge-Request-Types) to our leadership reporting and improve the accuracy with subtypes categorization. The 3 top level types can be applied without having to apply a sub-category type.

1. `~"type::bug"`: Defects in shipped code and fixes for those defects. Read more about [features vs bugs](/handbook/product/product-processes/#issues).
  - `~"bug::performance"`: Performance defects or response time degradation
  - `~"bug::availability"`: Defects related to GitLab SaaS availability
  - `~"bug::vulnerability"`: Defects related to Security Vulnerabilities
  - `~"bug::mobile"`: Defects encountered on Mobile Devices
1. `~"type::feature"`: Effort to deliver new features, feature changes & improvements. Read more about [features vs bugs](/handbook/product/product-processes/#issues).
  - `~"feature::addition"`: The first MVC that gives GitLab users a foundation of new capabilities that were previously unavailable. Includes [good user value, usability, and tests](/blog/2021/12/01/dont-confuse-these-twelve-shortcuts-with-iteration/). For example, these issues together helped create the first MVC for our Reviewer feature: [Create a Reviewers sidebar widget](https://gitlab.com/gitlab-org/gitlab/-/issues/237921), [Show which reviewers have commented on an MR](https://gitlab.com/gitlab-org/gitlab/-/issues/10294), [Add reviewers to MR form](https://gitlab.com/gitlab-org/gitlab/-/issues/216054), [Increase MR counter on navbar when user is designated as reviewer](https://gitlab.com/gitlab-org/gitlab/-/issues/255102)
  - `~"feature::enhancement"`: Subsequent user-facing improvements that refine the initial MVC by adding additional capabilities that make it more useful. Includes [good user value, usability, and tests](/blog/2021/12/01/dont-confuse-these-twelve-shortcuts-with-iteration/). For example, these issues enhance the existing Reviewer feature: [Show MRs where user is designated as a Reviewer on the MR list page](https://gitlab.com/gitlab-org/gitlab/-/issues/237922), [Display which approval rules match a given reviewer](https://gitlab.com/gitlab-org/gitlab/-/issues/233736), [Add Reviewers quick action](https://gitlab.com/gitlab-org/gitlab/-/issues/241244)
  - `~"feature::consolidation"`: Merging a feature into an existing feature for simplification. For example, [Workspace project: (Consolidate Groups and Projects)](https://gitlab.com/groups/gitlab-org/-/epics/6473) and [Combine Top Navigation Menu](https://gitlab.com/groups/gitlab-org/-/epics/5645) are good examples of such work.
  - `~"feature::removal"`: Deprecation and removal of a functionality when it's no longer needed.
1. `~"type::maintenance"`: Upkeeping efforts & catch-up corrective improvements that are not Features nor Bugs. This includes restructuring for long-term maintainability, stability, reducing technical debt, improving the contributor experience, or upgrading dependencies. For example: [Refactoring the CI YAML config parser](https://gitlab.com/gitlab-org/gitlab-foss/-/issues/15060), [Updating software versions in our tech stack](https://gitlab.com/gitlab-org/ci-cd/codequality/-/issues/22), [Recalculating UUIDs for vulnerabilities using UUIDv5](https://gitlab.com/gitlab-org/gitlab/-/issues/212322)
  - `~"maintenance::refactor"`: Simplifying or restructuring existing code or documentation
  - `~"maintenance::dependency"`: Dependency updates and their version upgrades
  - `~"maintenance::usability"`: General improvements to product usability that are unrelated to feature prioritization. For example, [UI component](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/80903) and [UI text](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/80457) updates for consistency with Pajamas and [usability improvements](https://gitlab.com/gitlab-org/gitlab/-/merge_requests/79888).
  - `~"maintenance::test-gap"`: Test coverage improvements that were not included in feature prioritization.
  - `~"maintenance::pipelines"`: Pipeline related changes.
  - `~"maintenance::workflow"`: Improvements of the engineering tooling like Danger, RuboCop, linters, issue templates, etc.

If these labels are missing, it will be tracked in the `undefined` bucket instead.
The Engineering Manager for each team is ultimately responsible for ensuring that these labels are set correctly.

Classifying work types may require context. All work to deliver a feature with security, performance and quality meeting the [definition of done](https://docs.gitlab.com/ee/development/contributing/merge_request_workflow.html#mr-merge) should be classified as feature work. For example if you are anticipating the performance needs of a feature and implement an application limit as part of the introduction of that feature it should be classified as `feature:addition`. If you discovered an issue scaling an existing feature and implemented an application limit that issue would likely start as a bug and the associated MR would be classified as `bug:performance`.

### Spike work

Large efforts will occasionally undergo a spike to identify & research technical approaches to complete the work. Spike efforts shall be classified with the following guidelines:

1. Classifying the spike based on type of work that the spike will result in. For example: 
   - A spike to enhance a feature should be classified as `~"feature::enhancement"` and `~"type::feature"`
   - A spike to update dependencies, upgrade versions of underlying libraries should be classified as `~"maintenance::dependency"` and `~"type::maintenance"`
1. If the spike will result in multiple types of work, choose the type that is of the majority of the resulting work (e.g. more than half). 

### Additional guidance

#### `~"Community contribution"`

`~"Community contribution"` was intended to track community contributions as a top-level type, but it's now only a facet label and a merge request should always get a proper type label set in addition.

Community contributions are welcome in all areas of GitLab, so any type label can be set on `~"Community contribution"` merge requests.

#### `~"security"`

`~"security"` was intended to track security-related merge requests as a top-level type, but it's now only a facet label and a merge request should always get a proper type label set in addition.

This guidance may be helpful if you are wondering the go-forward type label based on your use case for applying `~"security"`:

- `~"type::feature"` for new security features that aren't fixing an existing vulnerability
- `~"type::bug"` for any other security changes

#### `~"documentation"`

`~"documentation"` was intended to track documentation-only merge requests as a top-level type, but it's now only a facet label and a merge request should always get a proper type label set in addition.

This guidance may be helpful if you are wondering the go-forward type label based on your use case for applying `~"documentation"`:

- `~"type::feature"` for new feature documentation (this type would usually be already set on merge requests that introduce a new feature)
- `~"type::maintenance"` for any other documentation changes

#### `~"backstage"`

`~"backstage"` was intended to be changes that were done to keep product development running smoothly. Over time, `~"backstage"` was also being used for pre-feature work and has become unclear and confusing. `~"backstage"` was deprecated as part of <https://gitlab.com/gitlab-org/quality/team-tasks/-/issues/488>. This will be removed with <https://gitlab.com/gitlab-org/quality/triage-ops/-/issues/483>.

This guidance may be helpful if you are wondering the go-forward type label based on your use case for applying `~"backstage"`:

- `~"type::maintenance"`
  - for industry standard and refactoring changes such as: `~"technical debt"`, `~"railsx.y"`, `~"Architecture Decision"`, non-`~"security"` `~"dependency update"`
  - for addition or updates to specs for existing GitLab features
- `~"type::feature"`
  - and `~"feature::addition"` for all changes related to the release of a new feature
  - and `~"feature::enhancement"` for user-facing improvements that refine the initial MVC to make it more useful and usable.
- `~"maintenance::workflow"` for changes to engineering workflows such as `~"Danger bot"`, `~"static analysis"`, release tooling, Docs tooling changes
- `~"maintenance::pipelines"` for changes to project pipeline configurations

### Stage and Group labels

In the spirit of "Everyone can Contribute" it's natural that members in a group will contribute to another group.

We allow flexibility where the parent `devops::xxx` and child `group::xxx` label may not match. For example:
* In the case where labelling was corrected by a human.
* When working on shared `frontend`, `backend` components or `type::tooling` work that spans multiple groups.

If a contribution happens across groups, we leave it to the discretion of the engineering and product manager to change the `group::xxx` label to reflect which group worked on it.
They can also decide if they want to move over the `devops::xxx` as well or keep it to reflect the product area.
The [triage bot](https://gitlab.com/gitlab-org/quality/triage-ops/) automatic labelling will not override existing labels.

## Projects that are part of the product

In the MR Rate and Volume of MR calculations, we consider MRs from projects that contributes to the overall product efforts.

The current list of projects are identified in the [`gitlab-data/analytics`](https://gitlab.com/gitlab-data/analytics) project for the following system databases:

| System Database | File |
|-----------------|------|
| GitLab.com      | [`projects_part_of_product.csv`](https://gitlab.com/gitlab-data/analytics/blob/master/transform%2Fsnowflake-dbt%2Fdata%2Fprojects_part_of_product.csv) |
| ops.gitlab.net  | [`projects_part_of_product_ops.csv`](https://gitlab.com/gitlab-data/analytics/blob/master/transform%2Fsnowflake-dbt%2Fdata%2Fprojects_part_of_product_ops.csv)


### Updating the list of projects

The guidelines for inclusion in the `is_part_of_product` lists are:

- Included with the product as apart of a GitLab Omnibus or Cloud Native installation
- Support product development efforts
- Support the delivery and release process to GitLab SaaS

Follow these steps to request a new project to be tracked:

1. Create a merge request to the GitLab.com or ops.gitlab.net project list from above.
1. Assign the merge request to the [Manager of Engineering Productivity team](https://gitlab.com/kwiebers)
1. The Manager of the Engineering Productivity team will work with the [Engineering Analyst](https://gitlab.com/lmai1) to determine the changes to MR Rate metrics and provide validation for the projects
1. The [VP of Development](https://gitlab.com/clefelhocz1) is the DRI to approve the list of projects. Upon approval the merge request author should ask in #data for assistance by a member of the Data Engineering team to merge.

There is no need to remove archived projects from the `is_part_of_product` list. Removal of projects will remove historical merge requests from metrics and reduce Merge Request rates.

Please reach out to a member of the [Engineering Productivity team](/handbook/engineering/quality/engineering-productivity/) if more assistance is needed


## Guidelines

*  Each KPI chart is a timeseries chart.
    - The `URL` property is only used to link to a chart until it is an embedded Sisense chart.
    - Use HTML hyperlinks `<a>` in description text if we need to link out to a supporting artifact e.g. Epics or Issues.
    - Use Purple bars to denote values.
    - Use a Red stepped-line for timeseries target.
    - Directional targets will be used:
      - `Above ...`
      - `Below ...`
      - `At ...`
      - `At or above ...`
      - `At or below ...`
    - Optional: Use a Black line for rolling average.
    - Optional: Use a Gray line for supporting indicator in the background.
*  For bar charts, the current month should be Green and subsequent months Purple. Highlighting the current month in a different color helps to indicate that data for the current month is not complete.
    - This can be quickly implemented via a `case` `when` clause in Sisense. Example below:
    - `CASE WHEN date_month < date_trunc('month',current_date) THEN MEDIAN(open_age_in_days) ELSE NULL END AS "Historical Median Open Days",`
    - `CASE WHEN date_month = date_trunc('month',current_date) THEN MEDIAN(open_age_in_days) ELSE NULL END AS "Current Median Open Days",`
* List a DRI for the KPI/PI if the metric is being delegated by the VP of that Engineering department.
*  Each Sisense dashboard for KPIs should consider the following settings to ensure timely updates:
    - [Setting up auto-refresh](https://about.gitlab.com/handbook/business-ops/data-team/platform/periscope/#sts=Requesting%20Automatic%20Dashboard%20Refresh) for a frequency that fits the KPI
    - [Excluding Dashboards from Auto Archive](https://dtdocs.sisense.com/article/auto-archive)
*  Each KPI should have a standalone dashboard with a single chart representing the KPI and a text box with a link back to the handbook definition.
    - In Sisense, [create a shared dashboard link](https://dtdocs.sisense.com/article/share-dashboards) to get the shared dashboard ID.
    - In Sisense, [use the Share Link action of the chart](https://dtdocs.sisense.com/article/chart-options#ShareLink) to get the chart (widget_id) and the dashboard ID.
    - Add the `shared_dashboard`, `chart` , and the `dashboard` key-value pairs to the [corresponding Performance Indicators data file](https://gitlab.com/gitlab-com/www-gitlab-com/-/blob/master/data/performance_indicators/) under the `sisense_data` property
*  Multi-series performance indicators should consider the following guidelines:
    * If series are mutually exclusive, use stacked bars for each series with a monthly time series
    * If series are not mutually exclusive, use grouped bars for each series with a monthly time series
    * Do not graph any targets in the chart.
    * Current month styling guidelines will not apply
*  Avoid `:` in strings as it's an important character in YAML and will confuse the data parsing process. Put the string in "quotes" if you really need to use a `:`
