---
layout: sec_direction
title: Product Section Direction - Security
description: "Security visibility from development to operations to minimize risk"
canonical_path: "/direction/security/"
---

## On this page
{:.no_toc}

- TOC
{:toc}

<p align="center">
    <font size="+2">
        <b>Security visibility from development to operations to minimize risk</b>
    </font>
</p>

GitLab provides the single application organizations need to find, triage, and fix vulnerabilities, from development to production. This empowers organizations to apply repeatable, defensible processes that automate security and compliance policies that proactively reduce overall security risk.

<%= devops_diagram(["Secure","Govern"]) %>

## Section Overview

The Sec Section focuses on providing security and compliance visibility across the entire software development lifecycle and is
comprised of the [Secure](https://about.gitlab.com/direction/secure/) and [Govern](https://about.gitlab.com/direction/govern/)
stages of the DevOps lifecycle. This is accomplished by [shifting security testing left](https://about.gitlab.com/direction/security/#shift-left-no-more-left-than-that) with the Secure stage, enabling developers to begin security scanning with their first written line of code, and by providing organizations with visibility and control over the security risk present across their environment with the Govern stage. 

### GitLab and the DevSecOps Lifecycle

GitLab is uniquely positioned to fully support DevSecOps by providing a single application for the entire software development lifecycle. This includes both shifting Application Security Testing (AST) left as well as providing visibility and control over security and compliance findings, from first line of code to production.

![DevSecOps Lifecycle](/images/direction/sec/DevSecOps_Lifecycle.png)

GitLab’s single application maps directly to the DevSecOps lifecycle. GitLab's Secure Stage focuses on pinpointing vulnerabilities and weaknesses, from development to production, while the Govern Stage provides visibility and control over the security & compliance findings Secure detects. Together, GitLab supports all teams involved in delivering secure applications:

* Develop: Developers create new source code, including new features and bug fixes, and commit this code to a branch within the project. This step is supported by the [Create](https://about.gitlab.com/stages-devops-lifecycle/create/) stage of the DevOps lifecycle, providing developers with [source code management](https://about.gitlab.com/stages-devops-lifecycle/source-code-management/), [code editors](https://about.gitlab.com/direction/create/editor/web_ide/), and [code review](https://about.gitlab.com/stages-devops-lifecycle/code-review/) workflows.
* Analyze: Upon code commit, Secure scanners kick off automatically and identify any new security findings with the delta code change. This enables developers to stay within context, enabling them to understand the cause and effect of their code change. Secure scanners leverage the [Verify](https://about.gitlab.com/stages-devops-lifecycle/verify/) stage of the DevOps lifecycle to provide scanning within the [CI pipeline](https://about.gitlab.com/stages-devops-lifecycle/continuous-integration/).
* Mitigate: Developers are provided with the [details needed](https://docs.gitlab.com/ee/user/application_security/index.html#interacting-with-the-vulnerabilities) to understand how to remediate the newly introduced security findings. Developers are also offered [automatic remediation](https://docs.gitlab.com/ee/user/application_security/#automatic-remediation-for-vulnerabilities), where applicable.
* Protect: Secure scanners provide continuous scanning coverage for applications deployed to production and Govern dashboards, policies, and compliance frameworks help users security findings and compliance requirements across their organization.

### Lowering the Cost of Remediation

The earlier a security vulnerability can be remediated has both risk reduction and cost reduction benefits.

![Cost of Remediation](/images/direction/sec/Cost_Of_Remediation.png)

When security vulnerabilities are identified at the time of code commit, developers can understand how their newly
introduced code has led to this new issue. This gives the developer a cause-and-effect enabling quicker resolution
while not having the time hit of context switching. This is not true as security scanning is performed later in the
software development lifecycle. New vulnerabilities may not be identified until weeks or months after they were added
to the application while under development.

Time is not the only savings when shifting security left.

![Stage of Remediation](/images/direction/sec/Stage_of_Remediation.png)

In [“The Economic Impacts of Inadequate Infrastructure for Software Testing”](https://www.nist.gov/system/files/documents/director/planning/report02-3.pdf), NIST estimated the cost of remediating software bugs at $59.5 billion/year. This is compounded when taking in the average time to remediate software bugs. In [“Software Development Price Guide & Hourly Rate Comparison”](https://www.fullstacklabs.co/blog/software-development-price-guide-hourly-rate-comparison), FullStack Labs estimates the average cost of a software developer at $300/hour. The following table outlines the cost to remediate software bugs at different stages of the software development lifecycle:

![Completed Loop](/images/direction/sec/costs_table.png)

These costs are just the start of the financial impact when the software bug is also a software vulnerability. IBM, in partnership with the Ponemon Institute, put the [average cost to remediate a data breach in 2020](https://www.ibm.com/security/digital-assets/cost-data-breach-report/#/) at $3.86 million (USD). This does not take into consideration the reputation impact to the organization.

### Closing the Loop

Having visibility into security risk in just development only provides you with half of the picture. Development and
SecOps teams need to have a closed feedback loop enabling both teams to be successful. Development teams can gain
insight into attacks targeting the applications they develop. This allows them to prioritize vulnerabilities correctly,
enabling proactive resolutions to reduce risk. Likewise, SecOps teams can gain insight from their development
counterparts, providing them with visibility into how the application works. This allows them to best apply proactive
measures to mitigate attacks targeting the application until development can fix the vulnerability.

![Completed Loop](/images/direction/sec/Completed_Loop.png)

Closing the loop requires close collaboration, transparency, and efficiencies that only a single platform for the entire DevOps lifecycle can provide. Shifting security left while also providing protection for applications in production within a single application empowers teams to work closer together. [Security is a team sport](https://ddesanto-update-sec-direction-fy21q4.about.gitlab-review.app/direction/security/#security-is-a-team-effort) and teams working together can best reduce their organization’s overall security risk.

### Groups

The Security Section is made up of two DevOps stages, Secure and Govern, and seven groups supporting the major categories of DevSecOps including:

* **Composition Analysis** - Assess your applications and services by analyzing dependencies for vulnerabilities and weaknesses, confirming only approved licenses are in use, and scanning your containers for vulnerabilities and weaknesses.
* **Static Analysis** - Assess your applications and services by scanning your source code for vulnerabilities and weaknesses.
* **Dynamic Analysis** - Assess your applications and services while they are running by leveraging the [Review App](https://docs.gitlab.com/ee/ci/review_apps/) available as part of GitLab’s CI/CD functionality.
* **Threat Insights** - Holistically view, manage, and reduce potential risks across the entire DevSecOps lifecycle, including Security Merge Request Views, Pipeline Security Reports, and Security Dashboards at the Project, Group, and Instance level.
* **Security Policies** - Apply policies to enforce scans and to require security approvals when vulnerabilities are found.
* **Compliance** - Provide users with the tools and features necessary to manage their compliance programs.
* **Vulnerability Research** - Leverage GitLab research to empower your Secure results by connecting security findings to industry references like [CVE IDs](https://cve.mitre.org).

### Teams and Investments

#### Team members

The existing team members for the Sec Section can be found in the links below:

* [Development](https://about.gitlab.com/company/team/?department=sec-section)
* [User Experience](https://about.gitlab.com/company/team/?department=secure-ux-team)
* [Product Management](https://about.gitlab.com/company/team/?department=sec-pm-team)
* [Quality Engineering](https://about.gitlab.com/company/team/?department=sec-datascience-qe-team)

#### Investments

Learn more about GitLab's investment into the Sec section by visiting our
[Product Investment](https://internal-handbook.gitlab.io/handbook/product/investment/) page within the
[Internal Product Handbook](https://internal-handbook.gitlab.io).

### Accomplishments, News, and Updates

A complete list of released features can be found on the [Release Feature Overview](https://gitlab-com.gitlab.io/cs-tools/gitlab-cs-tools/what-is-new-since/?tab=features&selectedStages=secure&selectedStages=govern) page and a complete list of upcoming features can be found on the [Upcoming Releases](https://about.gitlab.com/upcoming-releases/) page.

#### Section & team member updates

* No new updates at this time

#### Important PI milestones

* Composition Analysis fully expects an uptick in usage toward the end of the calendar year, as the team completes a major re-architecture project and begins to deliver feature improvements again
* Secret Detection and IaC scanning are both showing double-digit percentage growth over the last couple months; the team has advocated for additional investment in these areas next fiscal year
* The Static Analysis Group has started to [track usage trends across tiers](https://internal-handbook.gitlab.io/handbook/company/performance-indicators/product/sec-section/#securestatic-analysis---gmau---users-running-static-analysis-jobs), leading to some interesting insights about where to apply resources to improve user experience in Premium, for instance, to encourage upsell
* Derek Ferguson, Sec PI metrics DRI, has been hard at work with Dave Peterson on investigating both how to better reflect self-managed uplift and distinctions between Ultimate paid accounts vs. OSS/EDU accounts and are making steady progress

#### Recent accomplishments

* [Streamlined SAST analyzer coverage](https://about.gitlab.com/releases/2022/09/22/gitlab-15-4-released/#streamlined-sast-analyzer-coverage) - a big step in the move to semgrep-based scanning
* [GraphQL Schema support for DAST API and API Fuzzing](https://about.gitlab.com/releases/2022/09/22/gitlab-15-4-released/#graphql-schema-support-for-dast-api-and-api-fuzzing)
* [Browser-based DAST passive attack parity](https://gitlab.com/groups/gitlab-org/-/epics/5779)
* [Faster secret detection](https://about.gitlab.com/releases/2022/07/22/gitlab-15-2-released/#faster-secret-detection)

#### What’s ahead
* [Browser-based DAST Active Attack Parity](https://gitlab.com/groups/gitlab-org/-/epics/5780)
* [API Discovery](https://gitlab.com/groups/gitlab-org/-/epics/7539)
* [Deprecate and remove Vulnerabilities::Feedback Model](https://gitlab.com/groups/gitlab-org/-/epics/5629)
* [Continuous Vulnerability Scans for Container Scanning & Dependency Scanning](https://gitlab.com/groups/gitlab-org/-/epics/7886)
* [Automatically revoke GitLab.com tokens found in public repositories](https://gitlab.com/gitlab-org/gitlab/-/issues/371658)
* [GA Container Scanning category support for scans against running containers](https://gitlab.com/groups/gitlab-org/-/epics/3410)
* [Improve tracking accuracy of SAST, Secret Detection findings](https://gitlab.com/groups/gitlab-org/-/epics/5144)
* [Vulnerability Dismissal Types / Reasons](https://gitlab.com/groups/gitlab-org/-/epics/4942)

## 3 Year Section Themes

<%= partial("direction/secure/templates/themes") %>

<%= partial("direction/govern/templates/themes") %>

## 1 Year Plan

### What We Recently Completed

The Sec team has been actively delivering updates to help you reduce risk.  The following are some highlights from recent GitLab releases:
* **Semgrep-based Scanning by Default.** We recently hit a major milestone in our Semgrep consolidation. In GitLab 15.4, we swapped over to semgrep-based scanning by default for analyzing JavaScript, TypeScript, React, Go, Python, and Java code.
* **DAST Moved to Complete Maturity.** We recently achieved complete maturity with our DAST category.
* **Browser-based DAST Passive Attack Parity.** GitLab's browser-based DAST scanner is now at parity with respect to the OWASP ZAP passive attack library. The scanner itself provides substantial gains in terms of speed and coverage for single-page applications. This version of the scanner will be released in GA in the coming months, as the team continues to work on meeting active attack parity next.
* **Inline Security Training.** In early 2022, we released an inline security training capability that allows developers to connect to context-based training content directly from the MR experience. This provides a tight loop between practical tasks that developers need to complete (i.e., fixing vulnerable code) and security knowledge.
* **Dependency Paths.** We recently added information about the shortest dependency path for findings identified in your projects. This improvement makes it easier for you to triage findings and to determine the steps to resolve vulnerabilities in your open source dependencies.

### What We Are Currently Working On

The Sec team is actively working to bring world class security to DevSecOps and the following outlines where we are currently investing our efforts:
* **Application Security Testing (AST) Leadership** - We will take a leadership position within the Application Security Testing (AST) market.  This will be accomplished by focusing on moving the [Dependency Scanning](https://about.gitlab.com/direction/secure/#dependency-scanning) and [Vulnerability Management](https://about.gitlab.com/direction/secure/vulnerability_management/) categories to [Complete](https://about.gitlab.com/direction/maturity/) maturity, as well as returning [License Compliance](https://about.gitlab.com/direction/secure/composition-analysis/license-compliance/) to [Viable](https://about.gitlab.com/direction/maturity/) maturity.
* **Dogfooding** - We will [“practice what we preach”](https://www.dictionary.com/browse/practice-what-you-preach), including leveraging Secure Categories in all things GitLab does.  This tight circle will provide immediate feedback and increase our rate of learning.
* **Security for everyone** - In order to make security accessible to everyone across the DevOps lifecycle, we will bring all Secure OSS scanners to Core (self-managed) / Free (GitLab.com).
* **Security and Compliance Visibility** - Provide a unified user experience for viewing, triaging, and resolving security findings across the development lifecycle, while also enabling security policy and compliance requirement management across development, staging, and production.


### What's Next For Us

To meet our [audacious goals](https://about.gitlab.com/company/mission/#big-hairy-audacious-goal), the Sec Section will focus on the following over the next 12 months:

* **Differentiate on value** - Running a security test is just the beginning.  GitLab's unique visibility into the full picture of application code, configuration, and behavior puts us in a unique position to do many things: connect findings across scanning disciplines for higher-fidelity results, better evaluate the true risk of a finding, tie findings and behaviors back to the original code and code owners, and so on.  We will start to leverage this advantaged position to develop value-add capabilities that only a platform like GitLab can offer. 
* **Integrated Software Supply Chain Security (SSCS)** - SSCS has become a top priority for most organizations in the wake of multiple software supply chain attacks in the last 2 years. GitLab is uniquely positioned to bring unique visibility, comprehensive coverage, and a world-class user experience to bear on this very difficult problem. We will be dedicating resources across various of the product to execute on our [SSCS vision](https://about.gitlab.com/direction/supply-chain/).
* **Holistic developer-first experience** - We will capitalize on a unique opportunity to present results and activate workflows for developers and security professionals that standalone security products cannot replicate.  We want to provide a first-class experience and enable users to make data-driven decisions to secure their applications and services as well as their enterprise.  Our [Security Dashboards](https://docs.gitlab.com/ee/user/application_security/security_dashboard/#gitlab-security-dashboard) and [Merge Request Approvals](https://docs.gitlab.com/ee/user/application_security/index.html#security-approvals-in-merge-requests) is just the beginning.
* **Cross-stage Security Policy Management** - Allowing users to configure and manage security policies in a unified manner across their GitLab Workspace.  This includes managing policies for applications running in production (such as managing network policies) as well as managing policies that specify when scans should be required to run.
* **First-class Container Security** - We will continue to build out our container scanning capabilities to provide GA support for production container scanning and reduce noise overall.
* **Machine Learning** - We will begin to leverage aspects of machine learning to make "intelligent" recommendations to users about how to reduce their security risk.


### What We're Not Doing

The following will NOT be a focus over the next 12 months:
* **Security services** - The cybersecurity staffing shortage [continues to grow](https://www.forbes.com/sites/martenmickos/2019/06/19/the-cybersecurity-skills-gap-wont-be-solved-in-a-classroom/#79a380dd1c30) with no solvable solution yet defined.  To solve this issue, organizations have been relying on security services to fill this gap in their security processes.  As part of Secure’s 3 Year Strategy, we want to address this for the GitLab community by offering cybersecurity augmentation powered by GitLab Secure categories.
* **SIEM functionality** - Security Information and Event Management (SIEM) solutions are a common tool leveraged by IT Ops and SecOps organizations to monitor for events within their production environments.
* **Non-cloud native environments** - Enterprises are undergoing cloud-native transformations shifting from traditional data centers to public cloud environments leveraging technologies like Kubernetes.


## Target audience

GitLab identifies who our DevSecOps application is built for utilizing the following categorization. We list our view of who we will support when in priority order.
* 🟩- Targeted with strong support
* 🟨- Targeted but incomplete support
* ⬜️- Not targeted but might find value

### Today
To capitalize on the [opportunities](#opportunities) listed above, the Sec Section has features that make it useful to the following personas today.
1. 🟩 Developers / Development Teams
1. 🟩 Security Teams
1. 🟨 SecOps Teams
1. 🟨 QA engineers / QA Teams
1. ⬜️ Security Consultants

### Medium Term (1-2 years)
As we execute our [3 year strategy](#3-year-strategy), our medium term (1-2 year) goal is to provide a single DevSecOps application that enables collaboration between developers, security teams, SecOps teams, and QA Teams.
1. 🟩 Developers / Development Teams
1. 🟩 Security Teams
1. 🟩 SecOps Teams
1. 🟩 QA engineers / QA Teams
1. 🟨️ Security Consultants

## Stages and Categories

The Sec section is composed of two stages, [Secure](/direction/secure/) and [Govern](/direction/govern/), each of which contains several categories. Each stage has an overall
strategy statement below, aligned to the themes for Sec. Each category within each stage has a dedicated direction page
plus optional documentation, marketing pages, and other materials linked below.

<%= partial("direction/secure/templates/strategies") %>

<%= partial("direction/govern/templates/strategies") %>

## Upcoming Releases

<%= direction["all"]["all"] %>

<p align="center">
    <i><br>
    Last Reviewed: 2022-10-11<br>
    Last Updated: 2022-10-11
    </i>
</p>
