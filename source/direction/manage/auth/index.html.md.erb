---
layout: markdown_page
title: "Category Direction - Authorization and Authentication"
description: "Authentication and authorization are critical, foundational elements to keeping resources secure but accessible."
canonical_path: "/direction/manage/auth/"
---

- TOC
{:toc}

| Category | **Authorization and Authentication** |
| --- | --- |
| Stage | [Manage](https://about.gitlab.com/handbook/product/categories/#manage-stage) |
| Group | [Authentication and Authorization](https://about.gitlab.com/handbook/product/categories/#authentication-and-authorization-group) |
| Maturity | [Complete](/direction/maturity/) |
| Content Last Reviewed | `2022-10-14` |


<%= partial("direction/manage/auth/templates/intro") %>

## Overview

<%= partial("direction/manage/auth/templates/overview") %>

### Target audience and experience

<%= partial("direction/manage/auth/templates/target") %>


## Where we are Headed

We're currently focused on broader and deeper support for identity management and authentication strategies. Our objective is to allow users to quickly join GitLab with the right level of access, and building support for large organizations to quickly onboard and offboard users is essential.

For large organizations, we also need to make sure that users are armed with the right level of access. GitLab's role-based access control has served small teams well - and fits with a permissions model where anyone can contribute - but makes it challenging for large, security-minded organizations to build the level of granular controls and variation they need.

We are also acutely aware of the increasing security needs in Authentication and Authorization. The credentials that users are able to obtain are the "keys to the kingdom" and in a large enterprise, there needs to be strict inventory and management of these credentials, ensuring that their use and scope can be monitored and revoked if necessary.

### What's Next and Why

<%= partial("direction/manage/auth/templates/next") %>

## Maturity Plan

<%= partial("direction/manage/auth/templates/maturity") %>

<%= partial("direction/manage/auth/templates/competitors") %>

## Goals

### Near-Term Goals

1. Continue progress on [Customizable Roles and Permissions](https://gitlab.com/groups/gitlab-org/-/epics/4035). Early in the 15.6 milestone, we will have our [technical performance MVC](https://gitlab.com/groups/gitlab-org/-/epics/8408) complete, which will allow us to [understand](https://gitlab.com/gitlab-org/gitlab/-/issues/370089) the scope of work we have to do in order to make custom roles a reality.

Depending on performance constraints, we hope to deliver our first customer facing portion of customizable roles in the next 2 milestones. This MVC will [allow Guest users on an Ultimate license to view code](https://gitlab.com/gitlab-org/gitlab/-/issues/20277), which is a popular issue amongst our customers. This will be achieved by adding one custom permission to the existing role of "Guest", creating a new custom role.


2. Our MVC for [Domain Verification](https://gitlab.com/gitlab-org/gitlab/-/issues/353030) is completed as of %15.4, and unlocks a lot of features in the [Enterprise Users](https://gitlab.com/groups/gitlab-org/-/epics/5299) Epic. We now allow any provisioned user that matches a verified domain to [bypass e-mail verificaion](https://gitlab.com/gitlab-org/gitlab/-/issues/238461) for any e-mail address belonging to the domain, which is something that our customers have been requesting due to the onboarding friction it causes.

Next up for Enterprise Users will be an [automated user claims process](https://gitlab.com/gitlab-org/gitlab/-/issues/322039), which means that any user that matches a verified domain and was not provisioned will automatically belong to the Enterprise.

We are also adding support for [group owners to reset their user's 2FA](https://gitlab.com/gitlab-org/gitlab/-/issues/372401). Up until now, our GitLab.com customers had to reach out to Support to do this. It will be much easier for our users to self-service! 

### Mid-Term Goals

1. Parity in administrator features between self-managed and GitLab.com. [Workspace](https://docs.gitlab.com/ee/user/workspace/#workspace) is creating the container that will allow us to move existing self-managed administrator features  to GitLab.com.

2. [Service Accounts](https://gitlab.com/groups/gitlab-org/-/epics/6777) - will roll Group and Project Access tokens into a new concept called Service Accounts, which will be better attuned to the needs of integrations rather than human users.

3. Allow Administrators and Group Owners more control over their claimed [Enterprise Users](https://gitlab.com/gitlab-org/gitlab/-/issues/322039)


### Top Vision Item(s)

<%= partial("direction/manage/auth/templates/vision") %>
