---
layout: handbook-page-toc
title: "Verify Stage Direction"
description: "Check out GitLab's Direction for automatically building, testing, and optimizing code."
canonical_path: "/direction/verify/verify/"
---

- TOC
{:toc}

Everyone can contribute! Feel free to comment on our [async AMA issue](https://gitlab.com/gitlab-com/Product/-/issues/3278), [email Jackie Porter](mailto:jporter@gitlab.com), and [propose an MR](https://gitlab.com/gitlab-com/www-gitlab-com/-/edit/master/source/direction/verify/verify/index.html.md.erb) to this page!

<%= devops_diagram(["Verify"]) %>

## Overview

<!-- blank line -->
<figure class="video_container">
  <iframe src="https://www.youtube.com/embed/CZXC2tK1J_c" frameborder="0" allowfullscreen="true"> </iframe>
</figure>
<!-- blank line -->

### What is Verify?

The Verify Stage is responsible for executing on the market needs for continuous integration. From our Continuous Integration [use case](/handbook/marketing/strategic-marketing/usecase-gtm/ci/#continuous-integration):

_When practicing Continuous Integration, teams collaborate on projects by using a shared repository to store, modify and track frequent changes to their codebase. Developers check in, or integrate, their code into the repository multiple times a day and rely on automated tests to run in the background. These automated tests verify the changes by checking for potential bugs and security vulnerabilities, as well as performance and code quality degradations. Running tests as early in the software development lifecycle as possible is advantageous in order to detect problems before they intensify._

### Market Landscape for Continuous Integration Tools

The total addressable market (TAMkt) for DevOps tools delivering against the Verify stage is [$1.7B in 2020 and is expected to grow to $2.80B by 2024 (15.09% CAGR) (i)](https://docs.google.com/spreadsheets/d/1LO57cmXHDjE4QRf6NscRilpYA1mlXHeLFwM_tWlzcwI/edit?ts=5ddb7489#gid=1474156035). The Verify Stage makes up 23% of the [Ops market](/direction/ops/#market) and represents a significant portion of GitLab's expanding addressable market.

### GitLab Continuous Integration Current Position

The Verify Stage has continued to maintain a premium experience for individual and small teams of Software and DevOps Engineers with market share increasing each month as evidenced in our [Verify product performance indicators (internal)](https://internal-handbook.gitlab.io/handbook/company/performance-indicators/product/ops-section/#verifypipeline-execution---gmau-smau---unique-users-triggering-pipelines).

Delivering on the Enterprise use case is steadily increasing as evidenced in our [Verify Paid user-product performance indicators (internal)](https://app.periscopedata.com/app/gitlab/758607/Centralized-SMAU-GMAU-Dashboard?widget=10040188). To continue this growth, the Verify Stage needs to invest more in the scaling requirements for large organizations, deliver on a solution for building secure and compliant software, as well as prioritize the usability of our core CI capabilities.

### SWOT

Combining [GitLab's Biggest Risks](/handbook/leadership/biggest-risks/) with the Verify Stage perspective, the Continuous Integration vision has some significant strengths, weaknesses, opportunties, and threats to becoming the leading platform for building, testing, and optimizing code:

| STRENGTHS<br>Internal resources to exploit | WEAKNESSES<br>Internal Risks to mitigate | OPPORTUNITIES<br>External resources to exploit | THREATS<br>External Risks to mitigate |
| --- | --- | --- | --- |
| We are one of the core adoption paths for our users at GitLab<br><br>Developer first approach for experiences <br><br>Meaningful insights from use of the DevOps platform | Lack of usage data-informed product decisions <br><br>Ineffectively managed Technical debt/bugs<br><br>Over indexing to Enterprise Product Management | Reduce friction between all functions of development in a single-platform <br><br>Empower developers to manage operations, quality, and security by baking those activities into GitLab | Competition is by far the largest external risk for GitLab <br><br>GitHub<br><br>Circle CI<br><br>JFrog <br><br>HashiCorp<br><br>Public cloud providers<br><br>New market entrants |

#### Core competencies for Continuous Integration

As organizations migrate to a [cloud-first strategy](https://about.gitlab.com/direction/#why-is-this-important), Continuous Integration must work to adapt to any changing needs in scale, performance, and usability. The Verify Stage must simultaneously support the trend toward microservices architecture and infrastructure as code, while balancing the needs of monorepos. In response to the rise in supply chain attacks, there is an ever-increasing pace of government-issued [directives](https://www.whitehouse.gov/wp-content/uploads/2022/09/M-22-18.pdf), standards, and regulations focused on the security and integrity of the software supply chain. This means we must add features and capabilities that enable customers to efficiently meet the most stringent secure CI/CD and software chains of custody requirements. In order to adequately deliver on these expectations, the [core competencies Continuous Integration](/handbook/marketing/strategic-marketing/usecase-gtm/ci) must meet for Enterpises are as follows: **build and test automation**, **pipeline configuration management**, **visibility into CI performance**, and **built-in compliance with security**.

#### Competitive Landscape

Our top competitors for the Verify Stage are as follows:

1. [GitHub Actions](https://about.gitlab.com/devops-tools/github-vs-gitlab/ci-missing-github-capabilities/)
1. [Jenkins](https://about.gitlab.com/devops-tools/jenkins-vs-gitlab/)
1. [Cloudbees Electric flow](https://about.gitlab.com/devops-tools/electric-flow-vs-gitlab/)

Secondarily, there are emerging competitors in the continuous integration space we are watching carefully:

1. Waypoint
1. Tekton
1. [JFrog](https://about.gitlab.com/devops-tools/jfrog-vs-gitlab/)
1. [Harness](https://about.gitlab.com/devops-tools/harness-vs-gitlab/)
1. [CircleCI](https://about.gitlab.com/devops-tools/circle-ci-vs-gitlab/)

### Continuous Integration Mission

Our mission for GitLab Continuous Integration is to empower all users to easily contribute to the automated building, testing, and optimization of code across teams, organizations, and the Open Source Community.

<!-- ### Continuous Integration Vision -->

<%= partial("/direction/verify/includes/_verify-vision.erb") %>

#### Continuous Integration Jobs To Be Done

Each of our product groups have specific JTBDs:

1. [Pipeline Execution JTBD](/handbook/engineering/development/ops/verify/pipeline-execution/jtbd/)
1. [Pipeline Authoring JTBD](/handbook/engineering/development/ops/verify/pipeline-authoring/jtdb/)
1. [Testing JTBD](/handbook/engineering/development/ops/verify/pipeline-authoring/jtdb/)
1. [Runner JTBD](/handbook/engineering/development/ops/verify/runner/jtbd/)

Some of the core JTBDs for our three year vision and strategies are as follows:

- Once I have a stable development and operations organization, I want to author a CI pipeline so others in my team can leverage CI to increase the efficiency of their tasks.
- When implementing CI/CD practices across the organization, I want to ensure consistency and standardization of CI/CD workflows to ensure compliance and to ease and increase CI/CD adoption across my teams.
- When I build my project, I want to review test result data, so that I can stop and review test failures before bugs get into production.
- When analysing configured CI tasks at a higher level for my organization, I want an overall understanding of the historical data about them, so I can identify trends and opportunities for improvements.
- When administering runners for a GitLab instance or group, I need to perform general administrative functions as quickly and efficiently as possible.

### Strategy

<%= partial("direction/ops/strategies/_verify.erb") %>

## Letters from the Editor

As a part of our annual planning, we want to transparently convey our progress to our goals and what lies ahead for each of the groups in the Verify Stage. We use a format called "Letter from the Editor", a play on the [Letter to the Editor](https://en.wikipedia.org/wiki/Letter_to_the_editor), which positions the writer of this letter to the community of GitLab rather than the community writing to GitLab. We use this method to broadcast our priorities and updates in the product group.

<%= partial("/direction/verify/letters-from-the-editor/_pipeline-execution.erb") %>

<%= partial("/direction/verify/letters-from-the-editor/_pipeline-authoring.erb") %>

<%= partial("/direction/verify/letters-from-the-editor/_runner.erb") %>

<%= partial("/direction/verify/letters-from-the-editor/_pipeline-insights.erb") %>
