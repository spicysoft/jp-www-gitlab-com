### Enterprise source code management 

[Source code management (SCM)](https://about.gitlab.com/stages-devops-lifecycle/source-code-management/) is the foundation of an organizations software development practice but for large and growing companies, it is challenging and expensive. SCM tools must optimize for a multitude of attributes that include access controls, compliance, varying development workflows, and repository storage. It either enables or hinders progress. It is critical that source code management tools be intuitive, secure, compliant, that they enable best development practices, and that they provide fast, reliable, and easily managed repository storage.

The market has agreed that [Git](https://git-scm.com/) is the leading Version Control System (VCS), however, it is not without shortcomings. Git does not handle huge repositories very well. This challenge led to the the development of [Git LFS](https://docs.gitlab.com/ee/topics/git/lfs/) as an iteration towards improving the handling huge files in Git. This solution still can't stand up to other centralized version control systems like [Concurrent Versions System (CVS)](https://en.wikipedia.org/wiki/Concurrent_Versions_System), [Apache Subversion (SVN)](https://en.wikipedia.org/wiki/Apache_Subversion), and [Perforce](https://www.perforce.com/), which  organizations with extremely large projects continue to use. To displace those tools, Git and the tools built around it need to add support that allows development teams to work with and collaborate on enormous repositories with ease.

As examples, GitLab will provide:
- An intuitive [framework for configuring rules and controls](https://gitlab.com/groups/gitlab-org/-/epics/6351)
- Merge strategies that enable teams to adopt GitLab flow 
- [Support for development in monolithic repositories](https://about.gitlab.com/direction/monorepos/)

### Reduce cycle time 

[Every business benefits from shorter cycle times](https://about.gitlab.com/resources/whitepaper-reduce-cycle-time/). It means delivering more value, more often to customers. However, all development organizations, expecially as they grow, have steps and process that extend cycle time. A critical piece of reducing cycle time is the [code review](https://about.gitlab.com/direction/create/code_review/), an essential best practice of every successful software project. It is necessary for maintaining the quality of code and products and it can be one of the most time-consuming activities in the software development process. 

There is an also the opportunity to reduce cycle time utilizing [browser IDEs](https://en.wikipedia.org/wiki/Online_integrated_development_environment) for [remote development](https://about.gitlab.com/direction/create/editor/remote_development/). As developers contribute to a software project, they often have to switch between environments as they collaborate with teammates on features, code reviews, bug fixes, and security patches. Remote development environments can speed up cycles by making it easy for a developer to make small changes fast. In seconds, they can spin up isolated pre-configured environments, fix a bug, push the change, and move onto something else while the system tears down the environment.

As examples, GitLab will provide:
- Code review workflows for large teams
- Extend GitLab to the tools where developers work
- Simple and easy to use embedded [Web IDE](https://docs.gitlab.com/ee/user/project/web_ide/)
- Remote development option that enables developers to quickly spin up environments to develop cloud native applications

### Digital media production
The quality of today's video games and movies is unparalleled. Technology has enabled the creation of virtual content that is so real, there is little difference between what you see on the screen and in real-life. Production of real-time content at this level is no easy feat. It requires expensive tools and highly-skilled humans. Platforms that are popular in the game and film development include [Unreal](https://www.unrealengine.com/en-US/), [Unity](https://unity.com/), [Amazon Lumberyard](https://aws.amazon.com/lumberyard/), to name a few. 


Right now, a problem faced by businesses in this space is the management of [binary files](https://en.wikipedia.org/wiki/Binary_file). Binary files are a common asset used in movies, games, and applications that utilize ML/AI models. These files are enormous and therefore require centralized version control systems (VCS) like  [CVS](https://en.wikipedia.org/wiki/Concurrent_Versions_System), [SVN](https://en.wikipedia.org/wiki/Apache_Subversion), and [Perforce](https://www.perforce.com/) to efficiently work with them. Even though the market has agreed that Git is the leading VCS, businesses in the digital media space still rely on tools like Perforce to manage the source code. To displace those tools, Git and the tools built around it need to add support that allows development teams to work with enormous repositories and binary files.

As examples, GitLab will provide:
- Support for binary file workflows such as [improved partial clone](https://gitlab.com/groups/gitlab-org/-/epics/3790), [integrations with binary file tools](https://gitlab.com/groups/gitlab-org/-/epics/2704), and [sparse checkout](https://gitlab.com/groups/gitlab-org/-/epics/773)
- Integrations with game development platforms

### The citizen developer
The market is seeing the rise of the [citizen developer](https://www.gartner.com/en/information-technology/glossary/citizen-developer). This is a persona who creates applications for the benefit of their team or department and whom does not report into the IT organization at their company. A citizen developer teaches themselves technical skills so that they can perform tasks that would otherwise be out-sourced to a formally trained developer. These individuals want to optimize their personal and team's workflows to produce better outcomes for the business. This includes but is not limited to: customizing the software tools that they use, building integrations between tools to automate work, writing scripts, and creating and maintaining websites. Empowering the citizen developer makes organizations more efficient by enabling non-IT departments to operate autonomously of their development teams meaning those development team can focus on their highest-value output: writing code for the software they sell.


As examples, GitLab will provide:
- Tools for the citizen developer starting with low code options
- End to end platform for editing, deploying, and hosting static sites
- Embedded [WSYIWYG editor](https://about.gitlab.com/direction/create/editor/content_editor/) across GitLab




