---
layout: secure_and_protect_direction
title: Product Stage Direction - Secure
description: "The Secure Section focuses on identifying security findings within applications and services prior to moving them to operations. Learn more!"
canonical_path: "/direction/secure/"
---

## On this page
{:.no_toc}

- TOC
{:toc}

<p align="center">
    <font size="+2">
        <b>Proactively identify vulnerabilities and weaknesses to minimize risk</b>
    </font>
</p>

<%= partial("direction/secure/templates/overview") %>

<%= devops_diagram(["Secure"]) %>

## Stage Overview

> GitLab was named as a [Challenger in the 2021 Magic Quadrant for Application Security Testing](https://about.gitlab.com/analysts/gartner-ast21/).

The Secure Stage focuses on identifying security findings (e.g., vulnerabilities and weaknesses) within applications and services prior to moving them to operations. Furthermore, Secure can (and will) provide security visibility for applications and services already deployed to production. Secure‚Äôs goal is to proactively identify vulnerabilities and weaknesses before they are exploited.  This is done by:

* Applying a proactive approach to security with a focus on identifying security findings
* Analyzing applications and services including cloud-native infrastructure for security vulnerabilities and weaknesses
* Leveraging common methods including ethical hacking and fuzz testing as well as static and dynamic analysis

<figure class="video_container">
    <iframe width="560" height="315" src="https://www.youtube.com/embed/XnYstHObqlA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
</figure>

### Groups

The Secure Stage is made up of one DevOps stage, Secure, and four groups supporting the major categories of DevSecOps including:

* Static Analysis - Assess your applications and services by scanning your source code for vulnerabilities and weaknesses.
* Dynamic Analysis - Assess your applications and services while they are running by leveraging the [Review App](https://docs.gitlab.com/ee/ci/review_apps/) available as part of GitLab‚Äôs CI/CD functionality.
* Composition Analysis - Assess your applications and services by analyzing dependencies for vulnerabilities and weaknesses, confirming only approved licenses are in use, and scanning your containers for vulnerabilities and weaknesses.
* Vulnerability Research - Leverage GitLab research to empower your Secure results by connecting security findings to industry references like [CVE IDs](https://cve.mitre.org).

### Resourcing and Investment

The existing team members for the Secure Stage can be found in the links below:

* [Development](https://about.gitlab.com/company/team/?department=secure-section)
* [User Experience](https://about.gitlab.com/company/team/?department=secure-ux-team)
* [Product Management](https://about.gitlab.com/company/team/?department=secure-pm-team)
* [Quality Engineering](https://about.gitlab.com/company/team/?department=sec-modelops-qe-team)

## 3 Year Stage Themes

<%= partial("direction/secure/templates/themes") %>

## 3 Year Strategy

In three years the Secure Stage market will:
* Have the application security testing (AST) market continue to grow, adding new techniques into its definition
    * This includes a bigger focus on API readiness with API fuzzing and security testing growing in popularity
    * See a resurgence of security testing within operations / production
* Continue the "Shift Left" trend, with Static Analysis (SAST) becoming more prominent
* Adopt machine learning techniques within the development phases of the DevOps lifecycle

As a result, in three years, Gitlab will:
* Identify insecure coding practices in real-time and provide recommendations to correct them prior to merge request
* Provide fuzz testing across the entire application technology stack (protocol, API, application), including both black-box and white-box testing techniques
* Expand Secure to support testing in development as well as in operations / production
    * Introduce categories that enable continuous verification (e.g., hourly, daily, weekly) of operations / production
* Expand focus within preexisting categories to apply knowledge / results from one scan type to optimize another scan type's configuration

## 1 Year Plan

### What We Recently Completed

The Secure team has been actively delivering updates to help you reduce risk.  The following are some highlights from recent GitLab releases:
* **Next Generation SAST.** We released a proprietary static application security testing engine, initially focused on reducing false positives in Ruby and Rails, that builds upon years of experience leveraging open source analyzers. This engine leverages program analysis techniques, including data and control flow analysis and a novel pattern extraction language, to eliminate vulnerabilities that may have been falsely reported by other integrated security tools. It also lays the groundwork for future integration of across scanning disciplines offered within GitLab for smarter, more actionable results.
* **DAST API Beta.** We beta-released API scanning capabilities based on technology gains from our acquisition of Peach Tech. This scanner will eventually fully replace OWASP ZAP as our API scanner, but in the immediate term gave users the benefit of enabling more API specification methods, more API language support, and additional authentication methods, as well as the ability to use Postman collections and HAR files to provide multiple options for defining what can be tested in the API.
* **Infrastructure as Code (IaC) Scanning.** We released an IaC scanner to address common misconfiguration issues in IaC templates. Initially, our scanner supports Terraform, Ansible, AWS CloudFormation, and Kubernetes and is based on the open-source Keeping Infrastructure as Code Secure (KICS) project.
* **Vulnerability Management Usability.** We've made multiple usability improvements to our vulnerability management workflows, including a change to the structure of our reporting format so that, regardless of scanner provenance, results are handled and displayed uniformly for the user in the UI.


### What We Are Currently Working On

The Secure team is actively working to bring world class security to DevSecOps and the following outlines where we are currently investing our efforts:
* **Application Security Testing (AST) Leadership** - We will take a leadership position within the Application Security Testing (AST) market. This will be accomplished by focusing on moving Dynamic Analysis (DAST), API Security, Dependency Scanning, and Vulnerability Management categories to Complete maturity, as well as returning License Compliance to Viable maturity.
* **Dogfooding** - We will [‚Äúpractice what we preach‚Äù](https://www.dictionary.com/browse/practice-what-you-preach), including leveraging Secure Categories in all things GitLab does.  This tight circle will provide immediate feedback and increase our rate of learning.
* **Security for everyone** - In order to make security accessible to everyone across the DevOps lifecycle, we will bring all Secure OSS scanners to Core (self-managed) / Free (GitLab.com).


### What's Next For Us

To meet our [audacious goals](https://about.gitlab.com/company/mission/#big-hairy-audacious-goal), the Secure Stage will focus on the following over the next 12 months:
* **Differentiate on value** - Running a security test is just the beginning.  We want to provide a first-class experience and enable users to make data-driven decisions to secure their applications and services as well as their enterprise.  Our [Security Dashboards](https://docs.gitlab.com/ee/user/application_security/security_dashboard/#gitlab-security-dashboard) and [Merge Request Approvals](https://docs.gitlab.com/ee/user/application_security/index.html#security-approvals-in-merge-requests) is just the beginning.
* **Holistic developer-first experience** - We will capitalize on a unique opportunity to present results and activate workflows for developers and security professionals that standalone security products cannot replicate. We want to provide a first-class experience and enable users to make data-driven decisions to secure their applications and services as well as their enterprise. Our Security Dashboards and Merge Request Approvals is just the beginning.


### What We're Not Doing

The following will NOT be a focus over the next 12 months:
* **Machine learning** - Machine learning (ML) will be leveraged, as part of static analysis, to identify insecure coding practices and help developers write more secure code.  This will be opt-in and will enable the power of the GitLab global community.
* **Security services** - The cybersecurity staffing shortage [continues to grow](https://www.forbes.com/sites/martenmickos/2019/06/19/the-cybersecurity-skills-gap-wont-be-solved-in-a-classroom/#79a380dd1c30) with no solvable solution yet defined.  To solve this issue, organizations have been relying on security services to fill this gap in their security processes.  As part of Secure‚Äôs 3 Year Strategy, we want to address this for the GitLab community by offering cybersecurity augmentation powered by GitLab Secure categories.

Please explore the individual [Category](https://about.gitlab.com/direction/secure/#categories) Direction pages for more information on 12 month plans.

## Target audience

GitLab identifies who our DevSecOps application is built for utilizing the following categorization. We list our view of who we will support when in priority order.
* üü© - Targeted with strong support
* üü® - Targeted but incomplete support
* ‚¨úÔ∏è - Not targeted but might find value

### Today
To capitalize on the [opportunities](#opportunities) listed above, the Secure Stage has features that make it useful to the following personas today.
1. üü©  Developers / Development Teams
1. üü©  Security Teams
1. üü®  SecOps Teams
1. üü©  QA engineers / QA Teams
1. üü®  Security Consultants
1. ‚¨úÔ∏è  Compliance Specialists / Manager

### Medium Term (1-2 years)
As we execute our [3 year strategy](#3-year-strategy), our medium term (1-2 year) goal is to provide a single DevSecOps application that enables collaboration between developers, security teams, SecOps teams, and QA Teams.
1. üü©  Developers / Development Teams
1. üü©  Security Teams
1. üü©  SecOps Teams
1. üü©  QA engineers / QA Teams
1. üü®Ô∏è  Security Consultants
1. üü®Ô∏è  Compliance Specialists / Manager

### Developers

We want to support developers and provide feedback during the application development process.
[**Security Reports**](https://docs.gitlab.com/ee/user/project/merge_requests/#security-reports)
in merge request widgets and pipelines allow early access to security
information that can be used to fix problems even before they are merged into
the stable branch or released to the public, embracing the idea of [shift left testing](https://en.wikipedia.org/wiki/Shift_left_testing).

This approach is valuable to highlight how specific changes could affect the
security of the application.

Personas
* [Sasha - Software Developer](https://about.gitlab.com/handbook/product/personas/#sasha-software-developer)
* [Delaney - Development Team Lead](https://about.gitlab.com/handbook/product/personas/#delaney-development-team-lead)

### Security teams

We want to support security teams as first-class citizens. GitLab should be
their primary tool to manage monitoring and remediation of security issues.
Using the **Security Dashboard**, security specialists know exactly which is the
most important thing they need to take care of, while Directors of Security can
manage workflows and analyze historical data to figure out how to improve the
response time.

This is a vulnerability-centric approach where items are grouped and ordered to
suggest what's most important in a group, or in the entire instance.

Personas
* [Sam - Security Analyst](https://about.gitlab.com/handbook/product/personas/#sam-security-analyst)
* [Alex - Security Operations Engineer](https://about.gitlab.com/handbook/product/personas/#alex-security-operations-engineer)


<%= partial("direction/categories", :locals => { :stageKey => "secure" }) %>


## Other top-level features

In the Secure stage there are features that are cross-category. They allow Security
Teams and Developers to manage security with a holistic approach.
The prioritization of a security issue doesn't fully depend on the type of
vulnerability, but on its severity and so which is the impact on the application.

That's why we want to create features where vulnerabilities are in one single place,
no matter if they are coming from SAST, Dependency Scanning, Container Scanning, etc.

### Automatic Remediation

When a vulnerability is automatically detected by GitLab, users can be aware
of that using the Security Dashboard or looking at security reports. But this
still requires manual intervention to create a fix and push it to production,
and during this time there is a vulnerable window where attackers can leverage
the vulnerability.

Automatic Remediation aims to automate vulnerability solution flow, and automatically create
a fix. The fix is then tested, and if it passes all the tests already defined
for the application, it is deployed to production.

GitLab can then monitor performances of the deployed app, and revert all the
changes in case performances are decreasing dramatically, warning the user
about the entire process and reducing the need for manual actions.

Read more about this in our [user documentation](https://docs.gitlab.com/ee/user/application_security/vulnerabilities/index.html#resolve-a-vulnerability) or in this [epic](https://gitlab.com/groups/gitlab-org/-/epics/759). Sometimes this feature is incorrectly referred to as Auto-Remediation, Auto Remediation, or Suggested Solutions.

<figure class="video_container">
   <iframe width="560" height="315" src="https://www.youtube.com/embed/ZgFqyXCsqPY?start=4216" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
</figure>

Slides are available [here](https://docs.google.com/presentation/d/1VuUKRnMlISEK4ECPaJVOYv3Pom4Zh6JXBFbD58RuibI/edit#slide=id.g4286011fc8_8_0).

### Bill of materials

Software is often based on many components that are reused. Every modern programming
language makes it easy to pull and use external libraries via package managers.
There is a growing need to know exactly what is included in the final app, and the
relevant information about those third-party components, like the version number,
the license, and the security status.

The bill of materials (BOM) makes this information available and accessible so that
compliance can validate that the app may be released and deployed.

Read more in this [epic](https://gitlab.com/groups/gitlab-org/-/epics/858).

### Offline environment deployments

Users of [GitLab Self-Managed](https://about.gitlab.com/install/) may have installations with limited or no internet connectivity.  These environments might be in their lab, their datacenter, or even in their preferred cloud provider.  GitLab refers to these deployments as offline environment deployments however other common names include [air-gapped environments](https://en.wikipedia.org/wiki/Air_gap_(networking)), limited connectivity environments, local area network (LAN) environments, or intranet environments.  These environments have physical barriers preventing internet access or potentially have security policies (e.g., firewalls) which limit access.

We are actively working to allow users to run all of our Secure categories in physically disconnected networks with access to internal registries. This will enable users within the other environment types like limited connectivity to be successful using Secure categories by following the same documentation and use cases.

Learn more about this in [GitLab Docs](https://docs.gitlab.com/ee/user/application_security/offline_deployments/) as well as in the [epic](https://gitlab.com/groups/gitlab-org/-/epics/1359) for Secure's current status supporting these types of environments.

## Auto DevOps
[Auto DevOps](https://docs.gitlab.com/ee/topics/autodevops/) provides pre-defined CI/CD configuration for your applications.
To do so, Auto DevOps includes security testing templates including SAST, Dependency Scanning, License Compliance, Container Scanning, and DAST to enable quick setup of security jobs within CI/CD.
The relevant [Secure stage groups](/handbook/product/categories/#secure-stage) maintain the [pre-defined Auto DevOps jobs](https://gitlab.com/gitlab-org/gitlab/-/tree/master/lib%2Fgitlab%2Fci%2Ftemplates%2FJobs) for those tests.

## Pricing
<%= partial("direction/secure/templates/pricing") %>

## Upcoming Releases

<%= direction["all"]["all"] %>

<%= partial("direction/other", :locals => { :stage => "secure" }) %>

<p align="center">
    <i><br>
    Last Reviewed: 2021-12-13<br>
    Last Updated: 2021-12-13
    </i>
</p>
