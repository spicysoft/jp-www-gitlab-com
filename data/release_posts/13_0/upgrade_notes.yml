upgrades:
  - reporter: fjsanpedro
    description: |
      - Before upgrading to GitLab 13.0, you will need to upgrade to 12.10. For more details on upgrading, see [Upgrading to a new major version](https://docs.gitlab.com/ee/update/#upgrading-to-a-new-major-version).
      - GitLab 13.0 automatically migrates all snippets, creating a repository for each one of them and also committing a file into it based on the snippet `file name` and `content`. This operation is done in a background migration, therefore no downtime is required. In case the background migration fails migrating any of the snippets, GitLab 13.0 also introduces several [rake tasks](https://docs.gitlab.com/ee/raketasks/migrate_snippets.html) to help migrating them manually.
      - PostgreSQL 11 is the minimum required version starting in GitLab 13.0. PostgreSQL 9.6 and 10 have been removed and are no longer officially supported. You will need to plan on some downtime for the PostgreSQL upgrade because the database must be down while the upgrade is performed. If you are using the GitLab-provided PostgreSQL database, you should make sure that your database is PostgreSQL 11 on GitLab 12.10 regardless of your installation method.
      - Puma is now the default web application server for GitLab. Users who have customized their Unicorn settings will need to [manually migrate these settings to Puma](https://docs.gitlab.com/omnibus/settings/puma.html#configuring-puma-settings). Additionally installations using [Direct Git Access](https://docs.gitlab.com/ee/administration/gitaly/#direct-git-access-in-gitlab-rails), usually those with slower NFS drives, may want to consider [running Puma single-threaded](https://docs.gitlab.com/ee/administration/operations/puma.html#performance-caveat-when-using-puma-with-rugged). To learn more about the benefits of switching to Puma, see [the Puma release note](#reduced-memory-consumption-of-gitlab-with-puma). Unicorn support will be [removed in GitLab 14.0](#unicorn-will-be-removed-in-favor-of-puma).
      - If you are running a self-managed instance of GitLab with an external PostgreSQL database, please note that the default timeout for PostgreSQL statements that was [added in GitLab 12.9](/releases/2020/03/22/gitlab-12-9-released/#omnibus-improvements) has been temporarily disabled. This was due to [an issue experienced with GitLab.com](https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/5287). The default timeout will be re-enabled when [the proposed change in implementation has been added](https://gitlab.com/gitlab-org/omnibus-gitlab/-/issues/5255).
      - If you have a self-managed instance of GitLab and are using the Mattermost integration, please note that a schema change was made in the Mattermost database to fix performance issues with emoji reactions. As a result of the schema change, you may experience longer upgrade times if your Mattermost database contains a lot of emoji reactions. See [the Mattermost upgrade documentation](https://docs.mattermost.com/administration/important-upgrade-notes.html) for the recommended approach to upgrading.
      - The Redis configuration has been changed in 13.0 to replace the `slave` terminology with `replica`, and the Redis version was updated to 5.0.9. These change require a restart of Redis. If you are using Redis HA, follow the [Redis HA updgrade steps](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/48907) to upgrade without downtime. If you are running Redis on a single node, you will need to plan on Redis being in accessbile while it restarts.

